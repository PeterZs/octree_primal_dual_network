// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe {

namespace {

const ::google::protobuf::Descriptor* BlobShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobProtoVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobProtoVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* Datum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Datum_reflection_ = NULL;
const ::google::protobuf::Descriptor* FillerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FillerParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SolverParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SolverState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverState_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetState_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetStateRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetStateRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParamSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParamSpec_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformationParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformationParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LossParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AccuracyParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccuracyParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArgMaxParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArgMaxParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConcatParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConcatParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchNormParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchNormParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BiasParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BiasParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContrastiveLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContrastiveLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvolutionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvolutionParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CropParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CropParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DropoutParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropoutParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DummyDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DummyDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* EltwiseParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EltwiseParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ELUParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ELUParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmbedParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmbedParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlattenParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlattenParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HDF5DataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HDF5DataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HDF5OutputParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HDF5OutputParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HingeLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HingeLossParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImageDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfogainLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfogainLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnerProductParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerProductParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LRNParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LRNParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MemoryDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVNParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVNParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParameterParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParameterParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoolingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoolingParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PowerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PythonParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PythonParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecurrentParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecurrentParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReductionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReductionParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReLUParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReLUParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReshapeParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReshapeParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScaleParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScaleParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SigmoidParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SigmoidParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SliceParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SliceParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftmaxParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftmaxParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TanHParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TanHParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TileParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TileParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThresholdParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThresholdParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* WindowDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WindowDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPPParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPPParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Input3DParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Input3DParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestInput3DParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestInput3DParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputPrimalDualParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputPrimalDualParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClipByValueParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClipByValueParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pooling3DParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pooling3DParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Pooling3DParameter_PoolMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UpSampling3DParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpSampling3DParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DualUpdateParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DualUpdateParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DualUpdateParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PrimalUpdateParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrimalUpdateParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PrimalUpdateParameter_Engine_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LagrangianUpdateParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LagrangianUpdateParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrimalDualCrossEntropyLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrimalDualCrossEntropyLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrimalDualWeightedCrossEntropyLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrimalDualWeightedCrossEntropyLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DenseGridDataWriteParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DenseGridDataWriteParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Accuracy3DReconstructionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Accuracy3DReconstructionParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScalingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScalingParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OctDualUpdateParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OctDualUpdateParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OctPrimalUpdateParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OctPrimalUpdateParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OctPropParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OctPropParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OctPropParameter_PropagationMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OctPropLossPrepParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OctPropLossPrepParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OctLevelSamplingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OctLevelSamplingParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OctUpSamplingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OctUpSamplingParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OctConvParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OctConvParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OctInputParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OctInputParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OctConvertParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OctConvertParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OctInputPrimalDualParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OctInputPrimalDualParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OctAccuracy3DReconstructionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OctAccuracy3DReconstructionParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OctOutputParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OctOutputParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OctOutputParameter_PropagationMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DenseConvertParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DenseConvertParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OctSegLossPrepParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OctSegLossPrepParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegCrossEntropyLossParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegCrossEntropyLossParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* V1LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  V1LayerParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* V0LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  V0LayerParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PReLUParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PReLUParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Phase_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_caffe_2eproto() {
  protobuf_AddDesc_caffe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "caffe.proto");
  GOOGLE_CHECK(file != NULL);
  BlobShape_descriptor_ = file->message_type(0);
  static const int BlobShape_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, dim_),
  };
  BlobShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobShape_descriptor_,
      BlobShape::default_instance_,
      BlobShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobShape));
  BlobProto_descriptor_ = file->message_type(1);
  static const int BlobProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, double_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, double_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, width_),
  };
  BlobProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobProto_descriptor_,
      BlobProto::default_instance_,
      BlobProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobProto));
  BlobProtoVector_descriptor_ = file->message_type(2);
  static const int BlobProtoVector_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, blobs_),
  };
  BlobProtoVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobProtoVector_descriptor_,
      BlobProtoVector::default_instance_,
      BlobProtoVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobProtoVector));
  Datum_descriptor_ = file->message_type(3);
  static const int Datum_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, float_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, encoded_),
  };
  Datum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Datum_descriptor_,
      Datum::default_instance_,
      Datum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Datum));
  FillerParameter_descriptor_ = file->message_type(4);
  static const int FillerParameter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, sparse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, variance_norm_),
  };
  FillerParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FillerParameter_descriptor_,
      FillerParameter::default_instance_,
      FillerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FillerParameter));
  FillerParameter_VarianceNorm_descriptor_ = FillerParameter_descriptor_->enum_type(0);
  NetParameter_descriptor_ = file->message_type(5);
  static const int NetParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, force_backward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layers_),
  };
  NetParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetParameter_descriptor_,
      NetParameter::default_instance_,
      NetParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetParameter));
  SolverParameter_descriptor_ = file->message_type(6);
  static const int SolverParameter_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_net_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_net_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_compute_loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_initialization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, base_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, average_loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, max_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, iter_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, lr_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, regularization_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, stepsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, stepvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, clip_gradients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, solver_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, random_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, momentum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, rms_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_after_train_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, solver_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, layer_wise_reduce_),
  };
  SolverParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolverParameter_descriptor_,
      SolverParameter::default_instance_,
      SolverParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolverParameter));
  SolverParameter_SnapshotFormat_descriptor_ = SolverParameter_descriptor_->enum_type(0);
  SolverParameter_SolverMode_descriptor_ = SolverParameter_descriptor_->enum_type(1);
  SolverParameter_SolverType_descriptor_ = SolverParameter_descriptor_->enum_type(2);
  SolverState_descriptor_ = file->message_type(7);
  static const int SolverState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, learned_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, current_step_),
  };
  SolverState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolverState_descriptor_,
      SolverState::default_instance_,
      SolverState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolverState));
  NetState_descriptor_ = file->message_type(8);
  static const int NetState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, stage_),
  };
  NetState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetState_descriptor_,
      NetState::default_instance_,
      NetState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetState));
  NetStateRule_descriptor_ = file->message_type(9);
  static const int NetStateRule_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, not_stage_),
  };
  NetStateRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetStateRule_descriptor_,
      NetStateRule::default_instance_,
      NetStateRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetStateRule));
  ParamSpec_descriptor_ = file->message_type(10);
  static const int ParamSpec_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, share_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, lr_mult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, decay_mult_),
  };
  ParamSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParamSpec_descriptor_,
      ParamSpec::default_instance_,
      ParamSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParamSpec));
  ParamSpec_DimCheckMode_descriptor_ = ParamSpec_descriptor_->enum_type(0);
  LayerParameter_descriptor_ = file->message_type(11);
  static const int LayerParameter_offsets_[87] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, loss_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, blobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, propagate_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, include_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, exclude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, transform_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, accuracy_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, argmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, batch_norm_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bias_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, concat_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, contrastive_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, convolution_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, crop_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dropout_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dummy_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, eltwise_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, elu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, embed_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, exp_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, flatten_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hdf5_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hdf5_output_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hinge_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, image_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, infogain_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, inner_product_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, input_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, log_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, lrn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, memory_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, mvn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, parameter_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pooling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, power_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, prelu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, python_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, recurrent_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reduction_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, relu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reshape_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, scale_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, sigmoid_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, softmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, spp_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, slice_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, tanh_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, threshold_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, tile_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, window_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, input3d_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, clip_by_value_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pooling3d_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, upsampling3d_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dual_update_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, primal_update_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, lagrangian_update_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, primal_dual_cross_entropy_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dense_grid_data_write_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, accuracy_3dreconstruction_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, input_primal_dual_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, scaling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, test_input3d_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, primal_dual_weighted_cross_entropy_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, oct_dual_update_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, oct_primal_update_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, oct_prop_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, oct_prop_loss_prep_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, oct_level_sampling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, oct_upsampling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, oct_conv_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, oct_input_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, oct_convert_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, oct_input_primal_dual_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, oct_accuracy_3dreconstruction_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, oct_output_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dense_convert_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, oct_seg_loss_prep_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, seg_cross_entropy_loss_param_),
  };
  LayerParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayerParameter_descriptor_,
      LayerParameter::default_instance_,
      LayerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayerParameter));
  TransformationParameter_descriptor_ = file->message_type(12);
  static const int TransformationParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, crop_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mean_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, force_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, force_gray_),
  };
  TransformationParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransformationParameter_descriptor_,
      TransformationParameter::default_instance_,
      TransformationParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransformationParameter));
  LossParameter_descriptor_ = file->message_type(13);
  static const int LossParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, ignore_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, normalization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, normalize_),
  };
  LossParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LossParameter_descriptor_,
      LossParameter::default_instance_,
      LossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LossParameter));
  LossParameter_NormalizationMode_descriptor_ = LossParameter_descriptor_->enum_type(0);
  AccuracyParameter_descriptor_ = file->message_type(14);
  static const int AccuracyParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, top_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, ignore_label_),
  };
  AccuracyParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccuracyParameter_descriptor_,
      AccuracyParameter::default_instance_,
      AccuracyParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccuracyParameter));
  ArgMaxParameter_descriptor_ = file->message_type(15);
  static const int ArgMaxParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, out_max_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, top_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, axis_),
  };
  ArgMaxParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArgMaxParameter_descriptor_,
      ArgMaxParameter::default_instance_,
      ArgMaxParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArgMaxParameter));
  ConcatParameter_descriptor_ = file->message_type(16);
  static const int ConcatParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, concat_dim_),
  };
  ConcatParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConcatParameter_descriptor_,
      ConcatParameter::default_instance_,
      ConcatParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConcatParameter));
  BatchNormParameter_descriptor_ = file->message_type(17);
  static const int BatchNormParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, use_global_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, moving_average_fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, eps_),
  };
  BatchNormParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchNormParameter_descriptor_,
      BatchNormParameter::default_instance_,
      BatchNormParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchNormParameter));
  BiasParameter_descriptor_ = file->message_type(18);
  static const int BiasParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, num_axes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, filler_),
  };
  BiasParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BiasParameter_descriptor_,
      BiasParameter::default_instance_,
      BiasParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BiasParameter));
  ContrastiveLossParameter_descriptor_ = file->message_type(19);
  static const int ContrastiveLossParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, legacy_version_),
  };
  ContrastiveLossParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContrastiveLossParameter_descriptor_,
      ContrastiveLossParameter::default_instance_,
      ContrastiveLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContrastiveLossParameter));
  ConvolutionParameter_descriptor_ = file->message_type(20);
  static const int ConvolutionParameter_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, dilation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, force_nd_im2col_),
  };
  ConvolutionParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConvolutionParameter_descriptor_,
      ConvolutionParameter::default_instance_,
      ConvolutionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConvolutionParameter));
  ConvolutionParameter_Engine_descriptor_ = ConvolutionParameter_descriptor_->enum_type(0);
  CropParameter_descriptor_ = file->message_type(21);
  static const int CropParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, offset_),
  };
  CropParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CropParameter_descriptor_,
      CropParameter::default_instance_,
      CropParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CropParameter));
  DataParameter_descriptor_ = file->message_type(22);
  static const int DataParameter_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, rand_skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, backend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, crop_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, force_encoded_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, prefetch_),
  };
  DataParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataParameter_descriptor_,
      DataParameter::default_instance_,
      DataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataParameter));
  DataParameter_DB_descriptor_ = DataParameter_descriptor_->enum_type(0);
  DropoutParameter_descriptor_ = file->message_type(23);
  static const int DropoutParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, dropout_ratio_),
  };
  DropoutParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropoutParameter_descriptor_,
      DropoutParameter::default_instance_,
      DropoutParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropoutParameter));
  DummyDataParameter_descriptor_ = file->message_type(24);
  static const int DummyDataParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, data_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, width_),
  };
  DummyDataParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DummyDataParameter_descriptor_,
      DummyDataParameter::default_instance_,
      DummyDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DummyDataParameter));
  EltwiseParameter_descriptor_ = file->message_type(25);
  static const int EltwiseParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, stable_prod_grad_),
  };
  EltwiseParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EltwiseParameter_descriptor_,
      EltwiseParameter::default_instance_,
      EltwiseParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EltwiseParameter));
  EltwiseParameter_EltwiseOp_descriptor_ = EltwiseParameter_descriptor_->enum_type(0);
  ELUParameter_descriptor_ = file->message_type(26);
  static const int ELUParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, alpha_),
  };
  ELUParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ELUParameter_descriptor_,
      ELUParameter::default_instance_,
      ELUParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ELUParameter));
  EmbedParameter_descriptor_ = file->message_type(27);
  static const int EmbedParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, input_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, bias_filler_),
  };
  EmbedParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmbedParameter_descriptor_,
      EmbedParameter::default_instance_,
      EmbedParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmbedParameter));
  ExpParameter_descriptor_ = file->message_type(28);
  static const int ExpParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, shift_),
  };
  ExpParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpParameter_descriptor_,
      ExpParameter::default_instance_,
      ExpParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpParameter));
  FlattenParameter_descriptor_ = file->message_type(29);
  static const int FlattenParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, end_axis_),
  };
  FlattenParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlattenParameter_descriptor_,
      FlattenParameter::default_instance_,
      FlattenParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlattenParameter));
  HDF5DataParameter_descriptor_ = file->message_type(30);
  static const int HDF5DataParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, shuffle_),
  };
  HDF5DataParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HDF5DataParameter_descriptor_,
      HDF5DataParameter::default_instance_,
      HDF5DataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HDF5DataParameter));
  HDF5OutputParameter_descriptor_ = file->message_type(31);
  static const int HDF5OutputParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, file_name_),
  };
  HDF5OutputParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HDF5OutputParameter_descriptor_,
      HDF5OutputParameter::default_instance_,
      HDF5OutputParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HDF5OutputParameter));
  HingeLossParameter_descriptor_ = file->message_type(32);
  static const int HingeLossParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, norm_),
  };
  HingeLossParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HingeLossParameter_descriptor_,
      HingeLossParameter::default_instance_,
      HingeLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HingeLossParameter));
  HingeLossParameter_Norm_descriptor_ = HingeLossParameter_descriptor_->enum_type(0);
  ImageDataParameter_descriptor_ = file->message_type(33);
  static const int ImageDataParameter_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, rand_skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, shuffle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, new_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, new_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, is_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, crop_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, root_folder_),
  };
  ImageDataParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageDataParameter_descriptor_,
      ImageDataParameter::default_instance_,
      ImageDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageDataParameter));
  InfogainLossParameter_descriptor_ = file->message_type(34);
  static const int InfogainLossParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, source_),
  };
  InfogainLossParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfogainLossParameter_descriptor_,
      InfogainLossParameter::default_instance_,
      InfogainLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfogainLossParameter));
  InnerProductParameter_descriptor_ = file->message_type(35);
  static const int InnerProductParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, transpose_),
  };
  InnerProductParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InnerProductParameter_descriptor_,
      InnerProductParameter::default_instance_,
      InnerProductParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InnerProductParameter));
  InputParameter_descriptor_ = file->message_type(36);
  static const int InputParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, shape_),
  };
  InputParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InputParameter_descriptor_,
      InputParameter::default_instance_,
      InputParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InputParameter));
  LogParameter_descriptor_ = file->message_type(37);
  static const int LogParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, shift_),
  };
  LogParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogParameter_descriptor_,
      LogParameter::default_instance_,
      LogParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogParameter));
  LRNParameter_descriptor_ = file->message_type(38);
  static const int LRNParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, local_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, norm_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, engine_),
  };
  LRNParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LRNParameter_descriptor_,
      LRNParameter::default_instance_,
      LRNParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LRNParameter));
  LRNParameter_NormRegion_descriptor_ = LRNParameter_descriptor_->enum_type(0);
  LRNParameter_Engine_descriptor_ = LRNParameter_descriptor_->enum_type(1);
  MemoryDataParameter_descriptor_ = file->message_type(39);
  static const int MemoryDataParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, width_),
  };
  MemoryDataParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemoryDataParameter_descriptor_,
      MemoryDataParameter::default_instance_,
      MemoryDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemoryDataParameter));
  MVNParameter_descriptor_ = file->message_type(40);
  static const int MVNParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, normalize_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, across_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, eps_),
  };
  MVNParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MVNParameter_descriptor_,
      MVNParameter::default_instance_,
      MVNParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MVNParameter));
  ParameterParameter_descriptor_ = file->message_type(41);
  static const int ParameterParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterParameter, shape_),
  };
  ParameterParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParameterParameter_descriptor_,
      ParameterParameter::default_instance_,
      ParameterParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParameterParameter));
  PoolingParameter_descriptor_ = file->message_type(42);
  static const int PoolingParameter_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, global_pooling_),
  };
  PoolingParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PoolingParameter_descriptor_,
      PoolingParameter::default_instance_,
      PoolingParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PoolingParameter));
  PoolingParameter_PoolMethod_descriptor_ = PoolingParameter_descriptor_->enum_type(0);
  PoolingParameter_Engine_descriptor_ = PoolingParameter_descriptor_->enum_type(1);
  PowerParameter_descriptor_ = file->message_type(43);
  static const int PowerParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, shift_),
  };
  PowerParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PowerParameter_descriptor_,
      PowerParameter::default_instance_,
      PowerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PowerParameter));
  PythonParameter_descriptor_ = file->message_type(44);
  static const int PythonParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, param_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, share_in_parallel_),
  };
  PythonParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PythonParameter_descriptor_,
      PythonParameter::default_instance_,
      PythonParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PythonParameter));
  RecurrentParameter_descriptor_ = file->message_type(45);
  static const int RecurrentParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, debug_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, expose_hidden_),
  };
  RecurrentParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecurrentParameter_descriptor_,
      RecurrentParameter::default_instance_,
      RecurrentParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecurrentParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecurrentParameter));
  ReductionParameter_descriptor_ = file->message_type(46);
  static const int ReductionParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, coeff_),
  };
  ReductionParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReductionParameter_descriptor_,
      ReductionParameter::default_instance_,
      ReductionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReductionParameter));
  ReductionParameter_ReductionOp_descriptor_ = ReductionParameter_descriptor_->enum_type(0);
  ReLUParameter_descriptor_ = file->message_type(47);
  static const int ReLUParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, negative_slope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, engine_),
  };
  ReLUParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReLUParameter_descriptor_,
      ReLUParameter::default_instance_,
      ReLUParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReLUParameter));
  ReLUParameter_Engine_descriptor_ = ReLUParameter_descriptor_->enum_type(0);
  ReshapeParameter_descriptor_ = file->message_type(48);
  static const int ReshapeParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, num_axes_),
  };
  ReshapeParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReshapeParameter_descriptor_,
      ReshapeParameter::default_instance_,
      ReshapeParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReshapeParameter));
  ScaleParameter_descriptor_ = file->message_type(49);
  static const int ScaleParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, num_axes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, bias_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, bias_filler_),
  };
  ScaleParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScaleParameter_descriptor_,
      ScaleParameter::default_instance_,
      ScaleParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScaleParameter));
  SigmoidParameter_descriptor_ = file->message_type(50);
  static const int SigmoidParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, engine_),
  };
  SigmoidParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SigmoidParameter_descriptor_,
      SigmoidParameter::default_instance_,
      SigmoidParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SigmoidParameter));
  SigmoidParameter_Engine_descriptor_ = SigmoidParameter_descriptor_->enum_type(0);
  SliceParameter_descriptor_ = file->message_type(51);
  static const int SliceParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, slice_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, slice_dim_),
  };
  SliceParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SliceParameter_descriptor_,
      SliceParameter::default_instance_,
      SliceParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SliceParameter));
  SoftmaxParameter_descriptor_ = file->message_type(52);
  static const int SoftmaxParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, axis_),
  };
  SoftmaxParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoftmaxParameter_descriptor_,
      SoftmaxParameter::default_instance_,
      SoftmaxParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoftmaxParameter));
  SoftmaxParameter_Engine_descriptor_ = SoftmaxParameter_descriptor_->enum_type(0);
  TanHParameter_descriptor_ = file->message_type(53);
  static const int TanHParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, engine_),
  };
  TanHParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TanHParameter_descriptor_,
      TanHParameter::default_instance_,
      TanHParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TanHParameter));
  TanHParameter_Engine_descriptor_ = TanHParameter_descriptor_->enum_type(0);
  TileParameter_descriptor_ = file->message_type(54);
  static const int TileParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, tiles_),
  };
  TileParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TileParameter_descriptor_,
      TileParameter::default_instance_,
      TileParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TileParameter));
  ThresholdParameter_descriptor_ = file->message_type(55);
  static const int ThresholdParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, threshold_),
  };
  ThresholdParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThresholdParameter_descriptor_,
      ThresholdParameter::default_instance_,
      ThresholdParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThresholdParameter));
  WindowDataParameter_descriptor_ = file->message_type(56);
  static const int WindowDataParameter_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, crop_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, fg_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, bg_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, fg_fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, context_pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, crop_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, cache_images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, root_folder_),
  };
  WindowDataParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WindowDataParameter_descriptor_,
      WindowDataParameter::default_instance_,
      WindowDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WindowDataParameter));
  SPPParameter_descriptor_ = file->message_type(57);
  static const int SPPParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, pyramid_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, engine_),
  };
  SPPParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPPParameter_descriptor_,
      SPPParameter::default_instance_,
      SPPParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPPParameter));
  SPPParameter_PoolMethod_descriptor_ = SPPParameter_descriptor_->enum_type(0);
  SPPParameter_Engine_descriptor_ = SPPParameter_descriptor_->enum_type(1);
  Input3DParameter_descriptor_ = file->message_type(58);
  static const int Input3DParameter_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, data_list_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, groundtruth_list_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, preload_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, row_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, num_classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, customized_crop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, freespace_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, ceiling_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, wall_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, floor_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, ignore_label_),
  };
  Input3DParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Input3DParameter_descriptor_,
      Input3DParameter::default_instance_,
      Input3DParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input3DParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Input3DParameter));
  TestInput3DParameter_descriptor_ = file->message_type(59);
  static const int TestInput3DParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInput3DParameter, data_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInput3DParameter, row_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInput3DParameter, num_classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInput3DParameter, num_levels_),
  };
  TestInput3DParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestInput3DParameter_descriptor_,
      TestInput3DParameter::default_instance_,
      TestInput3DParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInput3DParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInput3DParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestInput3DParameter));
  InputPrimalDualParameter_descriptor_ = file->message_type(60);
  static const int InputPrimalDualParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputPrimalDualParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputPrimalDualParameter, num_classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputPrimalDualParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputPrimalDualParameter, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputPrimalDualParameter, depth_),
  };
  InputPrimalDualParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InputPrimalDualParameter_descriptor_,
      InputPrimalDualParameter::default_instance_,
      InputPrimalDualParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputPrimalDualParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputPrimalDualParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InputPrimalDualParameter));
  ClipByValueParameter_descriptor_ = file->message_type(61);
  static const int ClipByValueParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipByValueParameter, min_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipByValueParameter, max_val_),
  };
  ClipByValueParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClipByValueParameter_descriptor_,
      ClipByValueParameter::default_instance_,
      ClipByValueParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipByValueParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipByValueParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClipByValueParameter));
  Pooling3DParameter_descriptor_ = file->message_type(62);
  static const int Pooling3DParameter_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, pad_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, pad_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, pad_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, kernel_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, kernel_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, kernel_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, stride_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, stride_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, stride_s_),
  };
  Pooling3DParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pooling3DParameter_descriptor_,
      Pooling3DParameter::default_instance_,
      Pooling3DParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling3DParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pooling3DParameter));
  Pooling3DParameter_PoolMethod_descriptor_ = Pooling3DParameter_descriptor_->enum_type(0);
  UpSampling3DParameter_descriptor_ = file->message_type(63);
  static const int UpSampling3DParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSampling3DParameter, h_rep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSampling3DParameter, w_rep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSampling3DParameter, s_rep_),
  };
  UpSampling3DParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpSampling3DParameter_descriptor_,
      UpSampling3DParameter::default_instance_,
      UpSampling3DParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSampling3DParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpSampling3DParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpSampling3DParameter));
  DualUpdateParameter_descriptor_ = file->message_type(64);
  static const int DualUpdateParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualUpdateParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualUpdateParameter, start_pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualUpdateParameter, end_pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualUpdateParameter, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualUpdateParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualUpdateParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualUpdateParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualUpdateParameter, sigma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualUpdateParameter, engine_),
  };
  DualUpdateParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DualUpdateParameter_descriptor_,
      DualUpdateParameter::default_instance_,
      DualUpdateParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualUpdateParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualUpdateParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DualUpdateParameter));
  DualUpdateParameter_Engine_descriptor_ = DualUpdateParameter_descriptor_->enum_type(0);
  PrimalUpdateParameter_descriptor_ = file->message_type(65);
  static const int PrimalUpdateParameter_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalUpdateParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalUpdateParameter, start_pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalUpdateParameter, end_pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalUpdateParameter, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalUpdateParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalUpdateParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalUpdateParameter, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalUpdateParameter, tau_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalUpdateParameter, engine_),
  };
  PrimalUpdateParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrimalUpdateParameter_descriptor_,
      PrimalUpdateParameter::default_instance_,
      PrimalUpdateParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalUpdateParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalUpdateParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrimalUpdateParameter));
  PrimalUpdateParameter_Engine_descriptor_ = PrimalUpdateParameter_descriptor_->enum_type(0);
  LagrangianUpdateParameter_descriptor_ = file->message_type(66);
  static const int LagrangianUpdateParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LagrangianUpdateParameter, sigma_),
  };
  LagrangianUpdateParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LagrangianUpdateParameter_descriptor_,
      LagrangianUpdateParameter::default_instance_,
      LagrangianUpdateParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LagrangianUpdateParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LagrangianUpdateParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LagrangianUpdateParameter));
  PrimalDualCrossEntropyLossParameter_descriptor_ = file->message_type(67);
  static const int PrimalDualCrossEntropyLossParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalDualCrossEntropyLossParameter, softmax_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalDualCrossEntropyLossParameter, freespace_weighted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalDualCrossEntropyLossParameter, unknown_weighted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalDualCrossEntropyLossParameter, clip_epsilon_),
  };
  PrimalDualCrossEntropyLossParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrimalDualCrossEntropyLossParameter_descriptor_,
      PrimalDualCrossEntropyLossParameter::default_instance_,
      PrimalDualCrossEntropyLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalDualCrossEntropyLossParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalDualCrossEntropyLossParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrimalDualCrossEntropyLossParameter));
  PrimalDualWeightedCrossEntropyLossParameter_descriptor_ = file->message_type(68);
  static const int PrimalDualWeightedCrossEntropyLossParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalDualWeightedCrossEntropyLossParameter, softmax_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalDualWeightedCrossEntropyLossParameter, clip_epsilon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalDualWeightedCrossEntropyLossParameter, unknown_label_),
  };
  PrimalDualWeightedCrossEntropyLossParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrimalDualWeightedCrossEntropyLossParameter_descriptor_,
      PrimalDualWeightedCrossEntropyLossParameter::default_instance_,
      PrimalDualWeightedCrossEntropyLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalDualWeightedCrossEntropyLossParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimalDualWeightedCrossEntropyLossParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrimalDualWeightedCrossEntropyLossParameter));
  DenseGridDataWriteParameter_descriptor_ = file->message_type(69);
  static const int DenseGridDataWriteParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseGridDataWriteParameter, input_source_),
  };
  DenseGridDataWriteParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DenseGridDataWriteParameter_descriptor_,
      DenseGridDataWriteParameter::default_instance_,
      DenseGridDataWriteParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseGridDataWriteParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseGridDataWriteParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DenseGridDataWriteParameter));
  Accuracy3DReconstructionParameter_descriptor_ = file->message_type(70);
  static const int Accuracy3DReconstructionParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accuracy3DReconstructionParameter, freespace_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accuracy3DReconstructionParameter, unknown_label_),
  };
  Accuracy3DReconstructionParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Accuracy3DReconstructionParameter_descriptor_,
      Accuracy3DReconstructionParameter::default_instance_,
      Accuracy3DReconstructionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accuracy3DReconstructionParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accuracy3DReconstructionParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Accuracy3DReconstructionParameter));
  ScalingParameter_descriptor_ = file->message_type(71);
  static const int ScalingParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalingParameter, scale_),
  };
  ScalingParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScalingParameter_descriptor_,
      ScalingParameter::default_instance_,
      ScalingParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalingParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalingParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScalingParameter));
  OctDualUpdateParameter_descriptor_ = file->message_type(72);
  static const int OctDualUpdateParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctDualUpdateParameter, filter_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctDualUpdateParameter, output_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctDualUpdateParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctDualUpdateParameter, sigma_),
  };
  OctDualUpdateParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OctDualUpdateParameter_descriptor_,
      OctDualUpdateParameter::default_instance_,
      OctDualUpdateParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctDualUpdateParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctDualUpdateParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OctDualUpdateParameter));
  OctPrimalUpdateParameter_descriptor_ = file->message_type(73);
  static const int OctPrimalUpdateParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPrimalUpdateParameter, filter_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPrimalUpdateParameter, output_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPrimalUpdateParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPrimalUpdateParameter, tau_),
  };
  OctPrimalUpdateParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OctPrimalUpdateParameter_descriptor_,
      OctPrimalUpdateParameter::default_instance_,
      OctPrimalUpdateParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPrimalUpdateParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPrimalUpdateParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OctPrimalUpdateParameter));
  OctPropParameter_descriptor_ = file->message_type(74);
  static const int OctPropParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPropParameter, key_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPropParameter, prop_mode_),
  };
  OctPropParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OctPropParameter_descriptor_,
      OctPropParameter::default_instance_,
      OctPropParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPropParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPropParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OctPropParameter));
  OctPropParameter_PropagationMode_descriptor_ = OctPropParameter_descriptor_->enum_type(0);
  OctPropLossPrepParameter_descriptor_ = file->message_type(75);
  static const int OctPropLossPrepParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPropLossPrepParameter, gt_key_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPropLossPrepParameter, pr_key_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPropLossPrepParameter, use_voxel_grid_),
  };
  OctPropLossPrepParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OctPropLossPrepParameter_descriptor_,
      OctPropLossPrepParameter::default_instance_,
      OctPropLossPrepParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPropLossPrepParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctPropLossPrepParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OctPropLossPrepParameter));
  OctLevelSamplingParameter_descriptor_ = file->message_type(76);
  static const int OctLevelSamplingParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctLevelSamplingParameter, input_key_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctLevelSamplingParameter, ref_key_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctLevelSamplingParameter, input_max_level_),
  };
  OctLevelSamplingParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OctLevelSamplingParameter_descriptor_,
      OctLevelSamplingParameter::default_instance_,
      OctLevelSamplingParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctLevelSamplingParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctLevelSamplingParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OctLevelSamplingParameter));
  OctUpSamplingParameter_descriptor_ = file->message_type(77);
  static const int OctUpSamplingParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctUpSamplingParameter, key_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctUpSamplingParameter, nbh_size_),
  };
  OctUpSamplingParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OctUpSamplingParameter_descriptor_,
      OctUpSamplingParameter::default_instance_,
      OctUpSamplingParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctUpSamplingParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctUpSamplingParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OctUpSamplingParameter));
  OctConvParameter_descriptor_ = file->message_type(78);
  static const int OctConvParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctConvParameter, filter_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctConvParameter, output_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctConvParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctConvParameter, bias_filler_),
  };
  OctConvParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OctConvParameter_descriptor_,
      OctConvParameter::default_instance_,
      OctConvParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctConvParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctConvParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OctConvParameter));
  OctInputParameter_descriptor_ = file->message_type(79);
  static const int OctInputParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctInputParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctInputParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctInputParameter, num_classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctInputParameter, preload_data_),
  };
  OctInputParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OctInputParameter_descriptor_,
      OctInputParameter::default_instance_,
      OctInputParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctInputParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctInputParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OctInputParameter));
  OctConvertParameter_descriptor_ = file->message_type(80);
  static const int OctConvertParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctConvertParameter, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctConvertParameter, use_max_ind_),
  };
  OctConvertParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OctConvertParameter_descriptor_,
      OctConvertParameter::default_instance_,
      OctConvertParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctConvertParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctConvertParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OctConvertParameter));
  OctInputPrimalDualParameter_descriptor_ = file->message_type(81);
  static const int OctInputPrimalDualParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctInputPrimalDualParameter, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctInputPrimalDualParameter, num_classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctInputPrimalDualParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctInputPrimalDualParameter, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctInputPrimalDualParameter, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctInputPrimalDualParameter, nbh_size_),
  };
  OctInputPrimalDualParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OctInputPrimalDualParameter_descriptor_,
      OctInputPrimalDualParameter::default_instance_,
      OctInputPrimalDualParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctInputPrimalDualParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctInputPrimalDualParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OctInputPrimalDualParameter));
  OctAccuracy3DReconstructionParameter_descriptor_ = file->message_type(82);
  static const int OctAccuracy3DReconstructionParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctAccuracy3DReconstructionParameter, freespace_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctAccuracy3DReconstructionParameter, unknown_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctAccuracy3DReconstructionParameter, gt_key_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctAccuracy3DReconstructionParameter, pr_key_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctAccuracy3DReconstructionParameter, max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctAccuracy3DReconstructionParameter, ignore_label_),
  };
  OctAccuracy3DReconstructionParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OctAccuracy3DReconstructionParameter_descriptor_,
      OctAccuracy3DReconstructionParameter::default_instance_,
      OctAccuracy3DReconstructionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctAccuracy3DReconstructionParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctAccuracy3DReconstructionParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OctAccuracy3DReconstructionParameter));
  OctOutputParameter_descriptor_ = file->message_type(83);
  static const int OctOutputParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctOutputParameter, key_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctOutputParameter, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctOutputParameter, prop_mode_),
  };
  OctOutputParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OctOutputParameter_descriptor_,
      OctOutputParameter::default_instance_,
      OctOutputParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctOutputParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctOutputParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OctOutputParameter));
  OctOutputParameter_PropagationMode_descriptor_ = OctOutputParameter_descriptor_->enum_type(0);
  DenseConvertParameter_descriptor_ = file->message_type(84);
  static const int DenseConvertParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseConvertParameter, key_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseConvertParameter, max_level_),
  };
  DenseConvertParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DenseConvertParameter_descriptor_,
      DenseConvertParameter::default_instance_,
      DenseConvertParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseConvertParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseConvertParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DenseConvertParameter));
  OctSegLossPrepParameter_descriptor_ = file->message_type(85);
  static const int OctSegLossPrepParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctSegLossPrepParameter, input_key_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctSegLossPrepParameter, ref_key_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctSegLossPrepParameter, ignore_label_),
  };
  OctSegLossPrepParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OctSegLossPrepParameter_descriptor_,
      OctSegLossPrepParameter::default_instance_,
      OctSegLossPrepParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctSegLossPrepParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OctSegLossPrepParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OctSegLossPrepParameter));
  SegCrossEntropyLossParameter_descriptor_ = file->message_type(86);
  static const int SegCrossEntropyLossParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegCrossEntropyLossParameter, unknown_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegCrossEntropyLossParameter, ignore_label_),
  };
  SegCrossEntropyLossParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegCrossEntropyLossParameter_descriptor_,
      SegCrossEntropyLossParameter::default_instance_,
      SegCrossEntropyLossParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegCrossEntropyLossParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegCrossEntropyLossParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegCrossEntropyLossParameter));
  V1LayerParameter_descriptor_ = file->message_type(87);
  static const int V1LayerParameter_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, include_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, exclude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blob_share_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blobs_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, loss_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, accuracy_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, argmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, concat_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, contrastive_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, convolution_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, dropout_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, dummy_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, eltwise_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, exp_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hdf5_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hdf5_output_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hinge_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, image_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, infogain_loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, inner_product_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, lrn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, memory_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, mvn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, pooling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, power_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, relu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, sigmoid_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, softmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, slice_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, tanh_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, threshold_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, window_data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, transform_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, loss_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, layer_),
  };
  V1LayerParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      V1LayerParameter_descriptor_,
      V1LayerParameter::default_instance_,
      V1LayerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(V1LayerParameter));
  V1LayerParameter_LayerType_descriptor_ = V1LayerParameter_descriptor_->enum_type(0);
  V1LayerParameter_DimCheckMode_descriptor_ = V1LayerParameter_descriptor_->enum_type(1);
  V0LayerParameter_descriptor_ = file->message_type(88);
  static const int V0LayerParameter_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, biasterm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, weight_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, bias_filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, kernelsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, dropout_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, local_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, meanfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, batchsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, cropsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, blobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, blobs_lr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, rand_skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_fg_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_bg_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_fg_fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_context_pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_crop_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, shuffle_images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, concat_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, hdf5_output_param_),
  };
  V0LayerParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      V0LayerParameter_descriptor_,
      V0LayerParameter::default_instance_,
      V0LayerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(V0LayerParameter));
  V0LayerParameter_PoolMethod_descriptor_ = V0LayerParameter_descriptor_->enum_type(0);
  PReLUParameter_descriptor_ = file->message_type(89);
  static const int PReLUParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, channel_shared_),
  };
  PReLUParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PReLUParameter_descriptor_,
      PReLUParameter::default_instance_,
      PReLUParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PReLUParameter));
  Phase_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_caffe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobShape_descriptor_, &BlobShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobProto_descriptor_, &BlobProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobProtoVector_descriptor_, &BlobProtoVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Datum_descriptor_, &Datum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FillerParameter_descriptor_, &FillerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetParameter_descriptor_, &NetParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolverParameter_descriptor_, &SolverParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolverState_descriptor_, &SolverState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetState_descriptor_, &NetState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetStateRule_descriptor_, &NetStateRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParamSpec_descriptor_, &ParamSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayerParameter_descriptor_, &LayerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransformationParameter_descriptor_, &TransformationParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LossParameter_descriptor_, &LossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccuracyParameter_descriptor_, &AccuracyParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArgMaxParameter_descriptor_, &ArgMaxParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConcatParameter_descriptor_, &ConcatParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchNormParameter_descriptor_, &BatchNormParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BiasParameter_descriptor_, &BiasParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContrastiveLossParameter_descriptor_, &ContrastiveLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConvolutionParameter_descriptor_, &ConvolutionParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CropParameter_descriptor_, &CropParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataParameter_descriptor_, &DataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropoutParameter_descriptor_, &DropoutParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DummyDataParameter_descriptor_, &DummyDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EltwiseParameter_descriptor_, &EltwiseParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ELUParameter_descriptor_, &ELUParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmbedParameter_descriptor_, &EmbedParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpParameter_descriptor_, &ExpParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlattenParameter_descriptor_, &FlattenParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HDF5DataParameter_descriptor_, &HDF5DataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HDF5OutputParameter_descriptor_, &HDF5OutputParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HingeLossParameter_descriptor_, &HingeLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageDataParameter_descriptor_, &ImageDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfogainLossParameter_descriptor_, &InfogainLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InnerProductParameter_descriptor_, &InnerProductParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InputParameter_descriptor_, &InputParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogParameter_descriptor_, &LogParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LRNParameter_descriptor_, &LRNParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemoryDataParameter_descriptor_, &MemoryDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MVNParameter_descriptor_, &MVNParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParameterParameter_descriptor_, &ParameterParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PoolingParameter_descriptor_, &PoolingParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PowerParameter_descriptor_, &PowerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PythonParameter_descriptor_, &PythonParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecurrentParameter_descriptor_, &RecurrentParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReductionParameter_descriptor_, &ReductionParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReLUParameter_descriptor_, &ReLUParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReshapeParameter_descriptor_, &ReshapeParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScaleParameter_descriptor_, &ScaleParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SigmoidParameter_descriptor_, &SigmoidParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SliceParameter_descriptor_, &SliceParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoftmaxParameter_descriptor_, &SoftmaxParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TanHParameter_descriptor_, &TanHParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TileParameter_descriptor_, &TileParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThresholdParameter_descriptor_, &ThresholdParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WindowDataParameter_descriptor_, &WindowDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPPParameter_descriptor_, &SPPParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Input3DParameter_descriptor_, &Input3DParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestInput3DParameter_descriptor_, &TestInput3DParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InputPrimalDualParameter_descriptor_, &InputPrimalDualParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClipByValueParameter_descriptor_, &ClipByValueParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pooling3DParameter_descriptor_, &Pooling3DParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpSampling3DParameter_descriptor_, &UpSampling3DParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DualUpdateParameter_descriptor_, &DualUpdateParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrimalUpdateParameter_descriptor_, &PrimalUpdateParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LagrangianUpdateParameter_descriptor_, &LagrangianUpdateParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrimalDualCrossEntropyLossParameter_descriptor_, &PrimalDualCrossEntropyLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrimalDualWeightedCrossEntropyLossParameter_descriptor_, &PrimalDualWeightedCrossEntropyLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DenseGridDataWriteParameter_descriptor_, &DenseGridDataWriteParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Accuracy3DReconstructionParameter_descriptor_, &Accuracy3DReconstructionParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScalingParameter_descriptor_, &ScalingParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OctDualUpdateParameter_descriptor_, &OctDualUpdateParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OctPrimalUpdateParameter_descriptor_, &OctPrimalUpdateParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OctPropParameter_descriptor_, &OctPropParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OctPropLossPrepParameter_descriptor_, &OctPropLossPrepParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OctLevelSamplingParameter_descriptor_, &OctLevelSamplingParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OctUpSamplingParameter_descriptor_, &OctUpSamplingParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OctConvParameter_descriptor_, &OctConvParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OctInputParameter_descriptor_, &OctInputParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OctConvertParameter_descriptor_, &OctConvertParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OctInputPrimalDualParameter_descriptor_, &OctInputPrimalDualParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OctAccuracy3DReconstructionParameter_descriptor_, &OctAccuracy3DReconstructionParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OctOutputParameter_descriptor_, &OctOutputParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DenseConvertParameter_descriptor_, &DenseConvertParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OctSegLossPrepParameter_descriptor_, &OctSegLossPrepParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegCrossEntropyLossParameter_descriptor_, &SegCrossEntropyLossParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    V1LayerParameter_descriptor_, &V1LayerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    V0LayerParameter_descriptor_, &V0LayerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PReLUParameter_descriptor_, &PReLUParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_caffe_2eproto() {
  delete BlobShape::default_instance_;
  delete BlobShape_reflection_;
  delete BlobProto::default_instance_;
  delete BlobProto_reflection_;
  delete BlobProtoVector::default_instance_;
  delete BlobProtoVector_reflection_;
  delete Datum::default_instance_;
  delete Datum_reflection_;
  delete FillerParameter::default_instance_;
  delete FillerParameter_reflection_;
  delete FillerParameter::_default_type_;
  delete NetParameter::default_instance_;
  delete NetParameter_reflection_;
  delete SolverParameter::default_instance_;
  delete SolverParameter_reflection_;
  delete SolverParameter::_default_regularization_type_;
  delete SolverParameter::_default_type_;
  delete SolverState::default_instance_;
  delete SolverState_reflection_;
  delete NetState::default_instance_;
  delete NetState_reflection_;
  delete NetStateRule::default_instance_;
  delete NetStateRule_reflection_;
  delete ParamSpec::default_instance_;
  delete ParamSpec_reflection_;
  delete LayerParameter::default_instance_;
  delete LayerParameter_reflection_;
  delete TransformationParameter::default_instance_;
  delete TransformationParameter_reflection_;
  delete LossParameter::default_instance_;
  delete LossParameter_reflection_;
  delete AccuracyParameter::default_instance_;
  delete AccuracyParameter_reflection_;
  delete ArgMaxParameter::default_instance_;
  delete ArgMaxParameter_reflection_;
  delete ConcatParameter::default_instance_;
  delete ConcatParameter_reflection_;
  delete BatchNormParameter::default_instance_;
  delete BatchNormParameter_reflection_;
  delete BiasParameter::default_instance_;
  delete BiasParameter_reflection_;
  delete ContrastiveLossParameter::default_instance_;
  delete ContrastiveLossParameter_reflection_;
  delete ConvolutionParameter::default_instance_;
  delete ConvolutionParameter_reflection_;
  delete CropParameter::default_instance_;
  delete CropParameter_reflection_;
  delete DataParameter::default_instance_;
  delete DataParameter_reflection_;
  delete DropoutParameter::default_instance_;
  delete DropoutParameter_reflection_;
  delete DummyDataParameter::default_instance_;
  delete DummyDataParameter_reflection_;
  delete EltwiseParameter::default_instance_;
  delete EltwiseParameter_reflection_;
  delete ELUParameter::default_instance_;
  delete ELUParameter_reflection_;
  delete EmbedParameter::default_instance_;
  delete EmbedParameter_reflection_;
  delete ExpParameter::default_instance_;
  delete ExpParameter_reflection_;
  delete FlattenParameter::default_instance_;
  delete FlattenParameter_reflection_;
  delete HDF5DataParameter::default_instance_;
  delete HDF5DataParameter_reflection_;
  delete HDF5OutputParameter::default_instance_;
  delete HDF5OutputParameter_reflection_;
  delete HingeLossParameter::default_instance_;
  delete HingeLossParameter_reflection_;
  delete ImageDataParameter::default_instance_;
  delete ImageDataParameter_reflection_;
  delete InfogainLossParameter::default_instance_;
  delete InfogainLossParameter_reflection_;
  delete InnerProductParameter::default_instance_;
  delete InnerProductParameter_reflection_;
  delete InputParameter::default_instance_;
  delete InputParameter_reflection_;
  delete LogParameter::default_instance_;
  delete LogParameter_reflection_;
  delete LRNParameter::default_instance_;
  delete LRNParameter_reflection_;
  delete MemoryDataParameter::default_instance_;
  delete MemoryDataParameter_reflection_;
  delete MVNParameter::default_instance_;
  delete MVNParameter_reflection_;
  delete ParameterParameter::default_instance_;
  delete ParameterParameter_reflection_;
  delete PoolingParameter::default_instance_;
  delete PoolingParameter_reflection_;
  delete PowerParameter::default_instance_;
  delete PowerParameter_reflection_;
  delete PythonParameter::default_instance_;
  delete PythonParameter_reflection_;
  delete RecurrentParameter::default_instance_;
  delete RecurrentParameter_reflection_;
  delete ReductionParameter::default_instance_;
  delete ReductionParameter_reflection_;
  delete ReLUParameter::default_instance_;
  delete ReLUParameter_reflection_;
  delete ReshapeParameter::default_instance_;
  delete ReshapeParameter_reflection_;
  delete ScaleParameter::default_instance_;
  delete ScaleParameter_reflection_;
  delete SigmoidParameter::default_instance_;
  delete SigmoidParameter_reflection_;
  delete SliceParameter::default_instance_;
  delete SliceParameter_reflection_;
  delete SoftmaxParameter::default_instance_;
  delete SoftmaxParameter_reflection_;
  delete TanHParameter::default_instance_;
  delete TanHParameter_reflection_;
  delete TileParameter::default_instance_;
  delete TileParameter_reflection_;
  delete ThresholdParameter::default_instance_;
  delete ThresholdParameter_reflection_;
  delete WindowDataParameter::default_instance_;
  delete WindowDataParameter_reflection_;
  delete WindowDataParameter::_default_crop_mode_;
  delete SPPParameter::default_instance_;
  delete SPPParameter_reflection_;
  delete Input3DParameter::default_instance_;
  delete Input3DParameter_reflection_;
  delete TestInput3DParameter::default_instance_;
  delete TestInput3DParameter_reflection_;
  delete InputPrimalDualParameter::default_instance_;
  delete InputPrimalDualParameter_reflection_;
  delete ClipByValueParameter::default_instance_;
  delete ClipByValueParameter_reflection_;
  delete Pooling3DParameter::default_instance_;
  delete Pooling3DParameter_reflection_;
  delete UpSampling3DParameter::default_instance_;
  delete UpSampling3DParameter_reflection_;
  delete DualUpdateParameter::default_instance_;
  delete DualUpdateParameter_reflection_;
  delete PrimalUpdateParameter::default_instance_;
  delete PrimalUpdateParameter_reflection_;
  delete LagrangianUpdateParameter::default_instance_;
  delete LagrangianUpdateParameter_reflection_;
  delete PrimalDualCrossEntropyLossParameter::default_instance_;
  delete PrimalDualCrossEntropyLossParameter_reflection_;
  delete PrimalDualWeightedCrossEntropyLossParameter::default_instance_;
  delete PrimalDualWeightedCrossEntropyLossParameter_reflection_;
  delete DenseGridDataWriteParameter::default_instance_;
  delete DenseGridDataWriteParameter_reflection_;
  delete Accuracy3DReconstructionParameter::default_instance_;
  delete Accuracy3DReconstructionParameter_reflection_;
  delete ScalingParameter::default_instance_;
  delete ScalingParameter_reflection_;
  delete OctDualUpdateParameter::default_instance_;
  delete OctDualUpdateParameter_reflection_;
  delete OctPrimalUpdateParameter::default_instance_;
  delete OctPrimalUpdateParameter_reflection_;
  delete OctPropParameter::default_instance_;
  delete OctPropParameter_reflection_;
  delete OctPropLossPrepParameter::default_instance_;
  delete OctPropLossPrepParameter_reflection_;
  delete OctLevelSamplingParameter::default_instance_;
  delete OctLevelSamplingParameter_reflection_;
  delete OctUpSamplingParameter::default_instance_;
  delete OctUpSamplingParameter_reflection_;
  delete OctConvParameter::default_instance_;
  delete OctConvParameter_reflection_;
  delete OctInputParameter::default_instance_;
  delete OctInputParameter_reflection_;
  delete OctConvertParameter::default_instance_;
  delete OctConvertParameter_reflection_;
  delete OctInputPrimalDualParameter::default_instance_;
  delete OctInputPrimalDualParameter_reflection_;
  delete OctAccuracy3DReconstructionParameter::default_instance_;
  delete OctAccuracy3DReconstructionParameter_reflection_;
  delete OctOutputParameter::default_instance_;
  delete OctOutputParameter_reflection_;
  delete DenseConvertParameter::default_instance_;
  delete DenseConvertParameter_reflection_;
  delete OctSegLossPrepParameter::default_instance_;
  delete OctSegLossPrepParameter_reflection_;
  delete SegCrossEntropyLossParameter::default_instance_;
  delete SegCrossEntropyLossParameter_reflection_;
  delete V1LayerParameter::default_instance_;
  delete V1LayerParameter_reflection_;
  delete V0LayerParameter::default_instance_;
  delete V0LayerParameter_reflection_;
  delete V0LayerParameter::_default_det_crop_mode_;
  delete PReLUParameter::default_instance_;
  delete PReLUParameter_reflection_;
}

void protobuf_AddDesc_caffe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013caffe.proto\022\005caffe\"\034\n\tBlobShape\022\017\n\003dim"
    "\030\001 \003(\003B\002\020\001\"\314\001\n\tBlobProto\022\037\n\005shape\030\007 \001(\0132"
    "\020.caffe.BlobShape\022\020\n\004data\030\005 \003(\002B\002\020\001\022\020\n\004d"
    "iff\030\006 \003(\002B\002\020\001\022\027\n\013double_data\030\010 \003(\001B\002\020\001\022\027"
    "\n\013double_diff\030\t \003(\001B\002\020\001\022\016\n\003num\030\001 \001(\005:\0010\022"
    "\023\n\010channels\030\002 \001(\005:\0010\022\021\n\006height\030\003 \001(\005:\0010\022"
    "\020\n\005width\030\004 \001(\005:\0010\"2\n\017BlobProtoVector\022\037\n\005"
    "blobs\030\001 \003(\0132\020.caffe.BlobProto\"\201\001\n\005Datum\022"
    "\020\n\010channels\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\r\n\005wid"
    "th\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\r\n\005label\030\005 \001(\005\022\022\n"
    "\nfloat_data\030\006 \003(\002\022\026\n\007encoded\030\007 \001(\010:\005fals"
    "e\"\212\002\n\017FillerParameter\022\026\n\004type\030\001 \001(\t:\010con"
    "stant\022\020\n\005value\030\002 \001(\002:\0010\022\016\n\003min\030\003 \001(\002:\0010\022"
    "\016\n\003max\030\004 \001(\002:\0011\022\017\n\004mean\030\005 \001(\002:\0010\022\016\n\003std\030"
    "\006 \001(\002:\0011\022\022\n\006sparse\030\007 \001(\005:\002-1\022B\n\rvariance"
    "_norm\030\010 \001(\0162#.caffe.FillerParameter.Vari"
    "anceNorm:\006FAN_IN\"4\n\014VarianceNorm\022\n\n\006FAN_"
    "IN\020\000\022\013\n\007FAN_OUT\020\001\022\013\n\007AVERAGE\020\002\"\216\002\n\014NetPa"
    "rameter\022\014\n\004name\030\001 \001(\t\022\r\n\005input\030\003 \003(\t\022%\n\013"
    "input_shape\030\010 \003(\0132\020.caffe.BlobShape\022\021\n\ti"
    "nput_dim\030\004 \003(\005\022\035\n\016force_backward\030\005 \001(\010:\005"
    "false\022\036\n\005state\030\006 \001(\0132\017.caffe.NetState\022\031\n"
    "\ndebug_info\030\007 \001(\010:\005false\022$\n\005layer\030d \003(\0132"
    "\025.caffe.LayerParameter\022\'\n\006layers\030\002 \003(\0132\027"
    ".caffe.V1LayerParameter\"\303\n\n\017SolverParame"
    "ter\022\013\n\003net\030\030 \001(\t\022&\n\tnet_param\030\031 \001(\0132\023.ca"
    "ffe.NetParameter\022\021\n\ttrain_net\030\001 \001(\t\022\020\n\010t"
    "est_net\030\002 \003(\t\022,\n\017train_net_param\030\025 \001(\0132\023"
    ".caffe.NetParameter\022+\n\016test_net_param\030\026 "
    "\003(\0132\023.caffe.NetParameter\022$\n\013train_state\030"
    "\032 \001(\0132\017.caffe.NetState\022#\n\ntest_state\030\033 \003"
    "(\0132\017.caffe.NetState\022\021\n\ttest_iter\030\003 \003(\005\022\030"
    "\n\rtest_interval\030\004 \001(\005:\0010\022 \n\021test_compute"
    "_loss\030\023 \001(\010:\005false\022!\n\023test_initializatio"
    "n\030  \001(\010:\004true\022\017\n\007base_lr\030\005 \001(\002\022\017\n\007displa"
    "y\030\006 \001(\005\022\027\n\014average_loss\030! \001(\005:\0011\022\020\n\010max_"
    "iter\030\007 \001(\005\022\024\n\titer_size\030$ \001(\005:\0011\022\021\n\tlr_p"
    "olicy\030\010 \001(\t\022\r\n\005gamma\030\t \001(\002\022\r\n\005power\030\n \001("
    "\002\022\020\n\010momentum\030\013 \001(\002\022\024\n\014weight_decay\030\014 \001("
    "\002\022\037\n\023regularization_type\030\035 \001(\t:\002L2\022\020\n\010st"
    "epsize\030\r \001(\005\022\021\n\tstepvalue\030\" \003(\005\022\032\n\016clip_"
    "gradients\030# \001(\002:\002-1\022\023\n\010snapshot\030\016 \001(\005:\0010"
    "\022\027\n\017snapshot_prefix\030\017 \001(\t\022\034\n\rsnapshot_di"
    "ff\030\020 \001(\010:\005false\022K\n\017snapshot_format\030% \001(\016"
    "2%.caffe.SolverParameter.SnapshotFormat:"
    "\013BINARYPROTO\022;\n\013solver_mode\030\021 \001(\0162!.caff"
    "e.SolverParameter.SolverMode:\003GPU\022\024\n\tdev"
    "ice_id\030\022 \001(\005:\0010\022\027\n\013random_seed\030\024 \001(\003:\002-1"
    "\022\021\n\004type\030( \001(\t:\003SGD\022\024\n\005delta\030\037 \001(\002:\0051e-0"
    "8\022\030\n\tmomentum2\030\' \001(\002:\0050.999\022\027\n\trms_decay"
    "\030& \001(\002:\0040.99\022\031\n\ndebug_info\030\027 \001(\010:\005false\022"
    "\"\n\024snapshot_after_train\030\034 \001(\010:\004true\022;\n\013s"
    "olver_type\030\036 \001(\0162!.caffe.SolverParameter"
    ".SolverType:\003SGD\022\037\n\021layer_wise_reduce\030) "
    "\001(\010:\004true\"+\n\016SnapshotFormat\022\010\n\004HDF5\020\000\022\017\n"
    "\013BINARYPROTO\020\001\"\036\n\nSolverMode\022\007\n\003CPU\020\000\022\007\n"
    "\003GPU\020\001\"U\n\nSolverType\022\007\n\003SGD\020\000\022\014\n\010NESTERO"
    "V\020\001\022\013\n\007ADAGRAD\020\002\022\013\n\007RMSPROP\020\003\022\014\n\010ADADELT"
    "A\020\004\022\010\n\004ADAM\020\005\"l\n\013SolverState\022\014\n\004iter\030\001 \001"
    "(\005\022\023\n\013learned_net\030\002 \001(\t\022!\n\007history\030\003 \003(\013"
    "2\020.caffe.BlobProto\022\027\n\014current_step\030\004 \001(\005"
    ":\0010\"N\n\010NetState\022!\n\005phase\030\001 \001(\0162\014.caffe.P"
    "hase:\004TEST\022\020\n\005level\030\002 \001(\005:\0010\022\r\n\005stage\030\003 "
    "\003(\t\"s\n\014NetStateRule\022\033\n\005phase\030\001 \001(\0162\014.caf"
    "fe.Phase\022\021\n\tmin_level\030\002 \001(\005\022\021\n\tmax_level"
    "\030\003 \001(\005\022\r\n\005stage\030\004 \003(\t\022\021\n\tnot_stage\030\005 \003(\t"
    "\"\243\001\n\tParamSpec\022\014\n\004name\030\001 \001(\t\0221\n\nshare_mo"
    "de\030\002 \001(\0162\035.caffe.ParamSpec.DimCheckMode\022"
    "\022\n\007lr_mult\030\003 \001(\002:\0011\022\025\n\ndecay_mult\030\004 \001(\002:"
    "\0011\"*\n\014DimCheckMode\022\n\n\006STRICT\020\000\022\016\n\nPERMIS"
    "SIVE\020\001\"\347\"\n\016LayerParameter\022\014\n\004name\030\001 \001(\t\022"
    "\014\n\004type\030\002 \001(\t\022\016\n\006bottom\030\003 \003(\t\022\013\n\003top\030\004 \003"
    "(\t\022\033\n\005phase\030\n \001(\0162\014.caffe.Phase\022\023\n\013loss_"
    "weight\030\005 \003(\002\022\037\n\005param\030\006 \003(\0132\020.caffe.Para"
    "mSpec\022\037\n\005blobs\030\007 \003(\0132\020.caffe.BlobProto\022\026"
    "\n\016propagate_down\030\013 \003(\010\022$\n\007include\030\010 \003(\0132"
    "\023.caffe.NetStateRule\022$\n\007exclude\030\t \003(\0132\023."
    "caffe.NetStateRule\0227\n\017transform_param\030d "
    "\001(\0132\036.caffe.TransformationParameter\022(\n\nl"
    "oss_param\030e \001(\0132\024.caffe.LossParameter\0220\n"
    "\016accuracy_param\030f \001(\0132\030.caffe.AccuracyPa"
    "rameter\022,\n\014argmax_param\030g \001(\0132\026.caffe.Ar"
    "gMaxParameter\0224\n\020batch_norm_param\030\213\001 \001(\013"
    "2\031.caffe.BatchNormParameter\022)\n\nbias_para"
    "m\030\215\001 \001(\0132\024.caffe.BiasParameter\022,\n\014concat"
    "_param\030h \001(\0132\026.caffe.ConcatParameter\022\?\n\026"
    "contrastive_loss_param\030i \001(\0132\037.caffe.Con"
    "trastiveLossParameter\0226\n\021convolution_par"
    "am\030j \001(\0132\033.caffe.ConvolutionParameter\022)\n"
    "\ncrop_param\030\220\001 \001(\0132\024.caffe.CropParameter"
    "\022(\n\ndata_param\030k \001(\0132\024.caffe.DataParamet"
    "er\022.\n\rdropout_param\030l \001(\0132\027.caffe.Dropou"
    "tParameter\0223\n\020dummy_data_param\030m \001(\0132\031.c"
    "affe.DummyDataParameter\022.\n\reltwise_param"
    "\030n \001(\0132\027.caffe.EltwiseParameter\022\'\n\telu_p"
    "aram\030\214\001 \001(\0132\023.caffe.ELUParameter\022+\n\013embe"
    "d_param\030\211\001 \001(\0132\025.caffe.EmbedParameter\022&\n"
    "\texp_param\030o \001(\0132\023.caffe.ExpParameter\022/\n"
    "\rflatten_param\030\207\001 \001(\0132\027.caffe.FlattenPar"
    "ameter\0221\n\017hdf5_data_param\030p \001(\0132\030.caffe."
    "HDF5DataParameter\0225\n\021hdf5_output_param\030q"
    " \001(\0132\032.caffe.HDF5OutputParameter\0223\n\020hing"
    "e_loss_param\030r \001(\0132\031.caffe.HingeLossPara"
    "meter\0223\n\020image_data_param\030s \001(\0132\031.caffe."
    "ImageDataParameter\0229\n\023infogain_loss_para"
    "m\030t \001(\0132\034.caffe.InfogainLossParameter\0229\n"
    "\023inner_product_param\030u \001(\0132\034.caffe.Inner"
    "ProductParameter\022+\n\013input_param\030\217\001 \001(\0132\025"
    ".caffe.InputParameter\022\'\n\tlog_param\030\206\001 \001("
    "\0132\023.caffe.LogParameter\022&\n\tlrn_param\030v \001("
    "\0132\023.caffe.LRNParameter\0225\n\021memory_data_pa"
    "ram\030w \001(\0132\032.caffe.MemoryDataParameter\022&\n"
    "\tmvn_param\030x \001(\0132\023.caffe.MVNParameter\0223\n"
    "\017parameter_param\030\221\001 \001(\0132\031.caffe.Paramete"
    "rParameter\022.\n\rpooling_param\030y \001(\0132\027.caff"
    "e.PoolingParameter\022*\n\013power_param\030z \001(\0132"
    "\025.caffe.PowerParameter\022+\n\013prelu_param\030\203\001"
    " \001(\0132\025.caffe.PReLUParameter\022-\n\014python_pa"
    "ram\030\202\001 \001(\0132\026.caffe.PythonParameter\0223\n\017re"
    "current_param\030\222\001 \001(\0132\031.caffe.RecurrentPa"
    "rameter\0223\n\017reduction_param\030\210\001 \001(\0132\031.caff"
    "e.ReductionParameter\022(\n\nrelu_param\030{ \001(\013"
    "2\024.caffe.ReLUParameter\022/\n\rreshape_param\030"
    "\205\001 \001(\0132\027.caffe.ReshapeParameter\022+\n\013scale"
    "_param\030\216\001 \001(\0132\025.caffe.ScaleParameter\022.\n\r"
    "sigmoid_param\030| \001(\0132\027.caffe.SigmoidParam"
    "eter\022.\n\rsoftmax_param\030} \001(\0132\027.caffe.Soft"
    "maxParameter\022\'\n\tspp_param\030\204\001 \001(\0132\023.caffe"
    ".SPPParameter\022*\n\013slice_param\030~ \001(\0132\025.caf"
    "fe.SliceParameter\022(\n\ntanh_param\030\177 \001(\0132\024."
    "caffe.TanHParameter\0223\n\017threshold_param\030\200"
    "\001 \001(\0132\031.caffe.ThresholdParameter\022)\n\ntile"
    "_param\030\212\001 \001(\0132\024.caffe.TileParameter\0226\n\021w"
    "indow_data_param\030\201\001 \001(\0132\032.caffe.WindowDa"
    "taParameter\022/\n\rinput3d_param\030\355\007 \001(\0132\027.ca"
    "ffe.Input3DParameter\0229\n\023clip_by_value_pa"
    "ram\030\356\007 \001(\0132\033.caffe.ClipByValueParameter\022"
    "3\n\017pooling3d_param\030\357\007 \001(\0132\031.caffe.Poolin"
    "g3DParameter\0229\n\022upsampling3d_param\030\360\007 \001("
    "\0132\034.caffe.UpSampling3DParameter\0226\n\021dual_"
    "update_param\030\361\007 \001(\0132\032.caffe.DualUpdatePa"
    "rameter\022:\n\023primal_update_param\030\362\007 \001(\0132\034."
    "caffe.PrimalUpdateParameter\022B\n\027lagrangia"
    "n_update_param\030\363\007 \001(\0132 .caffe.Lagrangian"
    "UpdateParameter\022Y\n$primal_dual_cross_ent"
    "ropy_loss_param\030\365\007 \001(\0132*.caffe.PrimalDua"
    "lCrossEntropyLossParameter\022H\n\033dense_grid"
    "_data_write_param\030\366\007 \001(\0132\".caffe.DenseGr"
    "idDataWriteParameter\022R\n\037accuracy_3drecon"
    "struction_param\030\367\007 \001(\0132(.caffe.Accuracy3"
    "DReconstructionParameter\022A\n\027input_primal"
    "_dual_param\030\370\007 \001(\0132\037.caffe.InputPrimalDu"
    "alParameter\022/\n\rscaling_param\030\371\007 \001(\0132\027.ca"
    "ffe.ScalingParameter\0228\n\022test_input3d_par"
    "am\030\372\007 \001(\0132\033.caffe.TestInput3DParameter\022j"
    "\n-primal_dual_weighted_cross_entropy_los"
    "s_param\030\373\007 \001(\01322.caffe.PrimalDualWeighte"
    "dCrossEntropyLossParameter\022=\n\025oct_dual_u"
    "pdate_param\030\375\007 \001(\0132\035.caffe.OctDualUpdate"
    "Parameter\022A\n\027oct_primal_update_param\030\376\007 "
    "\001(\0132\037.caffe.OctPrimalUpdateParameter\0220\n\016"
    "oct_prop_param\030\377\007 \001(\0132\027.caffe.OctPropPar"
    "ameter\022B\n\030oct_prop_loss_prep_param\030\200\010 \001("
    "\0132\037.caffe.OctPropLossPrepParameter\022C\n\030oc"
    "t_level_sampling_param\030\201\010 \001(\0132 .caffe.Oc"
    "tLevelSamplingParameter\022<\n\024oct_upsamplin"
    "g_param\030\202\010 \001(\0132\035.caffe.OctUpSamplingPara"
    "meter\0220\n\016oct_conv_param\030\203\010 \001(\0132\027.caffe.O"
    "ctConvParameter\0222\n\017oct_input_param\030\204\010 \001("
    "\0132\030.caffe.OctInputParameter\0226\n\021oct_conve"
    "rt_param\030\205\010 \001(\0132\032.caffe.OctConvertParame"
    "ter\022H\n\033oct_input_primal_dual_param\030\206\010 \001("
    "\0132\".caffe.OctInputPrimalDualParameter\022Y\n"
    "#oct_accuracy_3dreconstruction_param\030\207\010 "
    "\001(\0132+.caffe.OctAccuracy3DReconstructionP"
    "arameter\0224\n\020oct_output_param\030\210\010 \001(\0132\031.ca"
    "ffe.OctOutputParameter\022:\n\023dense_convert_"
    "param\030\211\010 \001(\0132\034.caffe.DenseConvertParamet"
    "er\022@\n\027oct_seg_loss_prep_param\030\212\010 \001(\0132\036.c"
    "affe.OctSegLossPrepParameter\022J\n\034seg_cros"
    "s_entropy_loss_param\030\213\010 \001(\0132#.caffe.SegC"
    "rossEntropyLossParameter\"\266\001\n\027Transformat"
    "ionParameter\022\020\n\005scale\030\001 \001(\002:\0011\022\025\n\006mirror"
    "\030\002 \001(\010:\005false\022\024\n\tcrop_size\030\003 \001(\r:\0010\022\021\n\tm"
    "ean_file\030\004 \001(\t\022\022\n\nmean_value\030\005 \003(\002\022\032\n\013fo"
    "rce_color\030\006 \001(\010:\005false\022\031\n\nforce_gray\030\007 \001"
    "(\010:\005false\"\302\001\n\rLossParameter\022\024\n\014ignore_la"
    "bel\030\001 \001(\005\022D\n\rnormalization\030\003 \001(\0162&.caffe"
    ".LossParameter.NormalizationMode:\005VALID\022"
    "\021\n\tnormalize\030\002 \001(\010\"B\n\021NormalizationMode\022"
    "\010\n\004FULL\020\000\022\t\n\005VALID\020\001\022\016\n\nBATCH_SIZE\020\002\022\010\n\004"
    "NONE\020\003\"L\n\021AccuracyParameter\022\020\n\005top_k\030\001 \001"
    "(\r:\0011\022\017\n\004axis\030\002 \001(\005:\0011\022\024\n\014ignore_label\030\003"
    " \001(\005\"M\n\017ArgMaxParameter\022\032\n\013out_max_val\030\001"
    " \001(\010:\005false\022\020\n\005top_k\030\002 \001(\r:\0011\022\014\n\004axis\030\003 "
    "\001(\005\"9\n\017ConcatParameter\022\017\n\004axis\030\002 \001(\005:\0011\022"
    "\025\n\nconcat_dim\030\001 \001(\r:\0011\"j\n\022BatchNormParam"
    "eter\022\030\n\020use_global_stats\030\001 \001(\010\022&\n\027moving"
    "_average_fraction\030\002 \001(\002:\0050.999\022\022\n\003eps\030\003 "
    "\001(\002:\0051e-05\"]\n\rBiasParameter\022\017\n\004axis\030\001 \001("
    "\005:\0011\022\023\n\010num_axes\030\002 \001(\005:\0011\022&\n\006filler\030\003 \001("
    "\0132\026.caffe.FillerParameter\"L\n\030Contrastive"
    "LossParameter\022\021\n\006margin\030\001 \001(\002:\0011\022\035\n\016lega"
    "cy_version\030\002 \001(\010:\005false\"\374\003\n\024ConvolutionP"
    "arameter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_ter"
    "m\030\002 \001(\010:\004true\022\013\n\003pad\030\003 \003(\r\022\023\n\013kernel_siz"
    "e\030\004 \003(\r\022\016\n\006stride\030\006 \003(\r\022\020\n\010dilation\030\022 \003("
    "\r\022\020\n\005pad_h\030\t \001(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\020\n"
    "\010kernel_h\030\013 \001(\r\022\020\n\010kernel_w\030\014 \001(\r\022\020\n\010str"
    "ide_h\030\r \001(\r\022\020\n\010stride_w\030\016 \001(\r\022\020\n\005group\030\005"
    " \001(\r:\0011\022-\n\rweight_filler\030\007 \001(\0132\026.caffe.F"
    "illerParameter\022+\n\013bias_filler\030\010 \001(\0132\026.ca"
    "ffe.FillerParameter\022;\n\006engine\030\017 \001(\0162\".ca"
    "ffe.ConvolutionParameter.Engine:\007DEFAULT"
    "\022\017\n\004axis\030\020 \001(\005:\0011\022\036\n\017force_nd_im2col\030\021 \001"
    "(\010:\005false\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFF"
    "E\020\001\022\t\n\005CUDNN\020\002\"0\n\rCropParameter\022\017\n\004axis\030"
    "\001 \001(\005:\0012\022\016\n\006offset\030\002 \003(\r\"\244\002\n\rDataParamet"
    "er\022\016\n\006source\030\001 \001(\t\022\022\n\nbatch_size\030\004 \001(\r\022\024"
    "\n\trand_skip\030\007 \001(\r:\0010\0221\n\007backend\030\010 \001(\0162\027."
    "caffe.DataParameter.DB:\007LEVELDB\022\020\n\005scale"
    "\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\024\n\tcrop_siz"
    "e\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022\"\n\023for"
    "ce_encoded_color\030\t \001(\010:\005false\022\023\n\010prefetc"
    "h\030\n \001(\r:\0014\"\033\n\002DB\022\013\n\007LEVELDB\020\000\022\010\n\004LMDB\020\001\""
    ".\n\020DropoutParameter\022\032\n\rdropout_ratio\030\001 \001"
    "(\002:\0030.5\"\240\001\n\022DummyDataParameter\022+\n\013data_f"
    "iller\030\001 \003(\0132\026.caffe.FillerParameter\022\037\n\005s"
    "hape\030\006 \003(\0132\020.caffe.BlobShape\022\013\n\003num\030\002 \003("
    "\r\022\020\n\010channels\030\003 \003(\r\022\016\n\006height\030\004 \003(\r\022\r\n\005w"
    "idth\030\005 \003(\r\"\245\001\n\020EltwiseParameter\0229\n\topera"
    "tion\030\001 \001(\0162!.caffe.EltwiseParameter.Eltw"
    "iseOp:\003SUM\022\r\n\005coeff\030\002 \003(\002\022\036\n\020stable_prod"
    "_grad\030\003 \001(\010:\004true\"\'\n\tEltwiseOp\022\010\n\004PROD\020\000"
    "\022\007\n\003SUM\020\001\022\007\n\003MAX\020\002\" \n\014ELUParameter\022\020\n\005al"
    "pha\030\001 \001(\002:\0011\"\254\001\n\016EmbedParameter\022\022\n\nnum_o"
    "utput\030\001 \001(\r\022\021\n\tinput_dim\030\002 \001(\r\022\027\n\tbias_t"
    "erm\030\003 \001(\010:\004true\022-\n\rweight_filler\030\004 \001(\0132\026"
    ".caffe.FillerParameter\022+\n\013bias_filler\030\005 "
    "\001(\0132\026.caffe.FillerParameter\"D\n\014ExpParame"
    "ter\022\020\n\004base\030\001 \001(\002:\002-1\022\020\n\005scale\030\002 \001(\002:\0011\022"
    "\020\n\005shift\030\003 \001(\002:\0010\"9\n\020FlattenParameter\022\017\n"
    "\004axis\030\001 \001(\005:\0011\022\024\n\010end_axis\030\002 \001(\005:\002-1\"O\n\021"
    "HDF5DataParameter\022\016\n\006source\030\001 \001(\t\022\022\n\nbat"
    "ch_size\030\002 \001(\r\022\026\n\007shuffle\030\003 \001(\010:\005false\"(\n"
    "\023HDF5OutputParameter\022\021\n\tfile_name\030\001 \001(\t\""
    "^\n\022HingeLossParameter\0220\n\004norm\030\001 \001(\0162\036.ca"
    "ffe.HingeLossParameter.Norm:\002L1\"\026\n\004Norm\022"
    "\006\n\002L1\020\001\022\006\n\002L2\020\002\"\227\002\n\022ImageDataParameter\022\016"
    "\n\006source\030\001 \001(\t\022\025\n\nbatch_size\030\004 \001(\r:\0011\022\024\n"
    "\trand_skip\030\007 \001(\r:\0010\022\026\n\007shuffle\030\010 \001(\010:\005fa"
    "lse\022\025\n\nnew_height\030\t \001(\r:\0010\022\024\n\tnew_width\030"
    "\n \001(\r:\0010\022\026\n\010is_color\030\013 \001(\010:\004true\022\020\n\005scal"
    "e\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\024\n\tcrop_si"
    "ze\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022\025\n\013ro"
    "ot_folder\030\014 \001(\t:\000\"\'\n\025InfogainLossParamet"
    "er\022\016\n\006source\030\001 \001(\t\"\313\001\n\025InnerProductParam"
    "eter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_term\030\002 "
    "\001(\010:\004true\022-\n\rweight_filler\030\003 \001(\0132\026.caffe"
    ".FillerParameter\022+\n\013bias_filler\030\004 \001(\0132\026."
    "caffe.FillerParameter\022\017\n\004axis\030\005 \001(\005:\0011\022\030"
    "\n\ttranspose\030\006 \001(\010:\005false\"1\n\016InputParamet"
    "er\022\037\n\005shape\030\001 \003(\0132\020.caffe.BlobShape\"D\n\014L"
    "ogParameter\022\020\n\004base\030\001 \001(\002:\002-1\022\020\n\005scale\030\002"
    " \001(\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"\270\002\n\014LRNParamet"
    "er\022\025\n\nlocal_size\030\001 \001(\r:\0015\022\020\n\005alpha\030\002 \001(\002"
    ":\0011\022\022\n\004beta\030\003 \001(\002:\0040.75\022D\n\013norm_region\030\004"
    " \001(\0162\036.caffe.LRNParameter.NormRegion:\017AC"
    "ROSS_CHANNELS\022\014\n\001k\030\005 \001(\002:\0011\0223\n\006engine\030\006 "
    "\001(\0162\032.caffe.LRNParameter.Engine:\007DEFAULT"
    "\"5\n\nNormRegion\022\023\n\017ACROSS_CHANNELS\020\000\022\022\n\016W"
    "ITHIN_CHANNEL\020\001\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t"
    "\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"Z\n\023MemoryDataParame"
    "ter\022\022\n\nbatch_size\030\001 \001(\r\022\020\n\010channels\030\002 \001("
    "\r\022\016\n\006height\030\003 \001(\r\022\r\n\005width\030\004 \001(\r\"d\n\014MVNP"
    "arameter\022 \n\022normalize_variance\030\001 \001(\010:\004tr"
    "ue\022\036\n\017across_channels\030\002 \001(\010:\005false\022\022\n\003ep"
    "s\030\003 \001(\002:\0051e-09\"5\n\022ParameterParameter\022\037\n\005"
    "shape\030\001 \001(\0132\020.caffe.BlobShape\"\242\003\n\020Poolin"
    "gParameter\0225\n\004pool\030\001 \001(\0162\".caffe.Pooling"
    "Parameter.PoolMethod:\003MAX\022\016\n\003pad\030\004 \001(\r:\001"
    "0\022\020\n\005pad_h\030\t \001(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\023\n"
    "\013kernel_size\030\002 \001(\r\022\020\n\010kernel_h\030\005 \001(\r\022\020\n\010"
    "kernel_w\030\006 \001(\r\022\021\n\006stride\030\003 \001(\r:\0011\022\020\n\010str"
    "ide_h\030\007 \001(\r\022\020\n\010stride_w\030\010 \001(\r\0227\n\006engine\030"
    "\013 \001(\0162\036.caffe.PoolingParameter.Engine:\007D"
    "EFAULT\022\035\n\016global_pooling\030\014 \001(\010:\005false\".\n"
    "\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHAS"
    "TIC\020\002\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022"
    "\t\n\005CUDNN\020\002\"F\n\016PowerParameter\022\020\n\005power\030\001 "
    "\001(\002:\0011\022\020\n\005scale\030\002 \001(\002:\0011\022\020\n\005shift\030\003 \001(\002:"
    "\0010\"g\n\017PythonParameter\022\016\n\006module\030\001 \001(\t\022\r\n"
    "\005layer\030\002 \001(\t\022\023\n\tparam_str\030\003 \001(\t:\000\022 \n\021sha"
    "re_in_parallel\030\004 \001(\010:\005false\"\300\001\n\022Recurren"
    "tParameter\022\025\n\nnum_output\030\001 \001(\r:\0010\022-\n\rwei"
    "ght_filler\030\002 \001(\0132\026.caffe.FillerParameter"
    "\022+\n\013bias_filler\030\003 \001(\0132\026.caffe.FillerPara"
    "meter\022\031\n\ndebug_info\030\004 \001(\010:\005false\022\034\n\rexpo"
    "se_hidden\030\005 \001(\010:\005false\"\255\001\n\022ReductionPara"
    "meter\022=\n\toperation\030\001 \001(\0162%.caffe.Reducti"
    "onParameter.ReductionOp:\003SUM\022\017\n\004axis\030\002 \001"
    "(\005:\0010\022\020\n\005coeff\030\003 \001(\002:\0011\"5\n\013ReductionOp\022\007"
    "\n\003SUM\020\001\022\010\n\004ASUM\020\002\022\t\n\005SUMSQ\020\003\022\010\n\004MEAN\020\004\"\215"
    "\001\n\rReLUParameter\022\031\n\016negative_slope\030\001 \001(\002"
    ":\0010\0224\n\006engine\030\002 \001(\0162\033.caffe.ReLUParamete"
    "r.Engine:\007DEFAULT\"+\n\006Engine\022\013\n\007DEFAULT\020\000"
    "\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"Z\n\020ReshapeParamet"
    "er\022\037\n\005shape\030\001 \001(\0132\020.caffe.BlobShape\022\017\n\004a"
    "xis\030\002 \001(\005:\0010\022\024\n\010num_axes\030\003 \001(\005:\002-1\"\245\001\n\016S"
    "caleParameter\022\017\n\004axis\030\001 \001(\005:\0011\022\023\n\010num_ax"
    "es\030\002 \001(\005:\0011\022&\n\006filler\030\003 \001(\0132\026.caffe.Fill"
    "erParameter\022\030\n\tbias_term\030\004 \001(\010:\005false\022+\n"
    "\013bias_filler\030\005 \001(\0132\026.caffe.FillerParamet"
    "er\"x\n\020SigmoidParameter\0227\n\006engine\030\001 \001(\0162\036"
    ".caffe.SigmoidParameter.Engine:\007DEFAULT\""
    "+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUD"
    "NN\020\002\"L\n\016SliceParameter\022\017\n\004axis\030\003 \001(\005:\0011\022"
    "\023\n\013slice_point\030\002 \003(\r\022\024\n\tslice_dim\030\001 \001(\r:"
    "\0011\"\211\001\n\020SoftmaxParameter\0227\n\006engine\030\001 \001(\0162"
    "\036.caffe.SoftmaxParameter.Engine:\007DEFAULT"
    "\022\017\n\004axis\030\002 \001(\005:\0011\"+\n\006Engine\022\013\n\007DEFAULT\020\000"
    "\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"r\n\rTanHParameter\022"
    "4\n\006engine\030\001 \001(\0162\033.caffe.TanHParameter.En"
    "gine:\007DEFAULT\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005"
    "CAFFE\020\001\022\t\n\005CUDNN\020\002\"/\n\rTileParameter\022\017\n\004a"
    "xis\030\001 \001(\005:\0011\022\r\n\005tiles\030\002 \001(\005\"*\n\022Threshold"
    "Parameter\022\024\n\tthreshold\030\001 \001(\002:\0010\"\301\002\n\023Wind"
    "owDataParameter\022\016\n\006source\030\001 \001(\t\022\020\n\005scale"
    "\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\022\n\nbatch_si"
    "ze\030\004 \001(\r\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n\006mirror"
    "\030\006 \001(\010:\005false\022\031\n\014fg_threshold\030\007 \001(\002:\0030.5"
    "\022\031\n\014bg_threshold\030\010 \001(\002:\0030.5\022\031\n\013fg_fracti"
    "on\030\t \001(\002:\0040.25\022\026\n\013context_pad\030\n \001(\r:\0010\022\027"
    "\n\tcrop_mode\030\013 \001(\t:\004warp\022\033\n\014cache_images\030"
    "\014 \001(\010:\005false\022\025\n\013root_folder\030\r \001(\t:\000\"\353\001\n\014"
    "SPPParameter\022\026\n\016pyramid_height\030\001 \001(\r\0221\n\004"
    "pool\030\002 \001(\0162\036.caffe.SPPParameter.PoolMeth"
    "od:\003MAX\0223\n\006engine\030\006 \001(\0162\032.caffe.SPPParam"
    "eter.Engine:\007DEFAULT\".\n\nPoolMethod\022\007\n\003MA"
    "X\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC\020\002\"+\n\006Engine\022\013"
    "\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"\343\002\n\020In"
    "put3DParameter\022\022\n\nbatch_size\030\001 \001(\r\022\026\n\016da"
    "ta_list_file\030\002 \001(\t\022\035\n\025groundtruth_list_f"
    "ile\030\003 \001(\t\022\032\n\014preload_data\030\004 \001(\010:\004true\022\027\n"
    "\trow_major\030\t \001(\010:\004true\022\016\n\006height\030\005 \001(\r\022\r"
    "\n\005width\030\006 \001(\r\022\r\n\005depth\030\007 \001(\r\022\023\n\013num_clas"
    "ses\030\010 \001(\r\022\035\n\017customized_crop\030\n \001(\010:\004true"
    "\022\027\n\017freespace_label\030\013 \001(\r\022\025\n\rceiling_lab"
    "el\030\014 \001(\r\022\022\n\nwall_label\030\r \001(\r\022\023\n\013floor_la"
    "bel\030\016 \001(\r\022\024\n\014ignore_label\030\017 \001(\r\"k\n\024TestI"
    "nput3DParameter\022\021\n\tdata_file\030\001 \001(\t\022\027\n\tro"
    "w_major\030\002 \001(\010:\004true\022\023\n\013num_classes\030\003 \001(\r"
    "\022\022\n\nnum_levels\030\004 \001(\r\"q\n\030InputPrimalDualP"
    "arameter\022\022\n\nbatch_size\030\001 \001(\r\022\023\n\013num_clas"
    "ses\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\r\n\005width\030\004 \001(\r"
    "\022\r\n\005depth\030\005 \001(\r\"8\n\024ClipByValueParameter\022"
    "\017\n\007min_val\030\001 \001(\002\022\017\n\007max_val\030\002 \001(\002\"\327\002\n\022Po"
    "oling3DParameter\0227\n\004pool\030\001 \001(\0162$.caffe.P"
    "ooling3DParameter.PoolMethod:\003MAX\022\016\n\003pad"
    "\030\002 \001(\r:\0010\022\020\n\005pad_h\030\003 \001(\r:\0010\022\020\n\005pad_w\030\004 \001"
    "(\r:\0010\022\020\n\005pad_s\030\005 \001(\r:\0010\022\023\n\013kernel_size\030\006"
    " \001(\r\022\020\n\010kernel_h\030\007 \001(\r\022\020\n\010kernel_w\030\010 \001(\r"
    "\022\020\n\010kernel_s\030\t \001(\r\022\021\n\006stride\030\n \001(\r:\0011\022\020\n"
    "\010stride_h\030\013 \001(\r\022\020\n\010stride_w\030\014 \001(\r\022\020\n\010str"
    "ide_s\030\r \001(\r\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003AV"
    "E\020\001\022\016\n\nSTOCHASTIC\020\002\"D\n\025UpSampling3DParam"
    "eter\022\r\n\005h_rep\030\001 \001(\r\022\r\n\005w_rep\030\002 \001(\r\022\r\n\005s_"
    "rep\030\003 \001(\r\"\252\002\n\023DualUpdateParameter\022\022\n\nnum"
    "_output\030\001 \001(\r\022\021\n\tstart_pad\030\002 \003(\r\022\017\n\007end_"
    "pad\030\003 \003(\r\022\023\n\013kernel_size\030\004 \003(\r\022\016\n\006stride"
    "\030\005 \003(\r\022-\n\rweight_filler\030\006 \001(\0132\026.caffe.Fi"
    "llerParameter\022\017\n\004axis\030\007 \001(\005:\0011\022\r\n\005sigma\030"
    "\010 \001(\002\022:\n\006engine\030\t \001(\0162!.caffe.DualUpdate"
    "Parameter.Engine:\007DEFAULT\"+\n\006Engine\022\013\n\007D"
    "EFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"\254\002\n\025Prima"
    "lUpdateParameter\022\022\n\nnum_output\030\001 \001(\r\022\021\n\t"
    "start_pad\030\002 \003(\r\022\017\n\007end_pad\030\003 \003(\r\022\023\n\013kern"
    "el_size\030\004 \003(\r\022\016\n\006stride\030\005 \003(\r\022-\n\rweight_"
    "filler\030\006 \001(\0132\026.caffe.FillerParameter\022\017\n\004"
    "axis\030\007 \001(\005:\0011\022\013\n\003tau\030\010 \001(\002\022<\n\006engine\030\t \001"
    "(\0162#.caffe.PrimalUpdateParameter.Engine:"
    "\007DEFAULT\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE"
    "\020\001\022\t\n\005CUDNN\020\002\"*\n\031LagrangianUpdateParamet"
    "er\022\r\n\005sigma\030\010 \001(\002\"\226\001\n#PrimalDualCrossEnt"
    "ropyLossParameter\022\025\n\rsoftmax_scale\030\001 \001(\002"
    "\022!\n\022freespace_weighted\030\002 \001(\010:\005false\022\037\n\020u"
    "nknown_weighted\030\003 \001(\010:\005false\022\024\n\014clip_eps"
    "ilon\030\004 \001(\002\"q\n+PrimalDualWeightedCrossEnt"
    "ropyLossParameter\022\025\n\rsoftmax_scale\030\001 \001(\002"
    "\022\024\n\014clip_epsilon\030\002 \001(\002\022\025\n\runknown_label\030"
    "\003 \001(\r\"3\n\033DenseGridDataWriteParameter\022\024\n\014"
    "input_source\030\001 \001(\t\"V\n!Accuracy3DReconstr"
    "uctionParameter\022\032\n\017freespace_label\030\001 \001(\r"
    ":\0010\022\025\n\runknown_label\030\002 \001(\r\"!\n\020ScalingPar"
    "ameter\022\r\n\005scale\030\001 \001(\002\"\204\001\n\026OctDualUpdateP"
    "arameter\022\023\n\013filter_size\030\001 \001(\r\022\027\n\017output_"
    "channels\030\002 \001(\r\022-\n\rweight_filler\030\003 \001(\0132\026."
    "caffe.FillerParameter\022\r\n\005sigma\030\004 \001(\002\"\204\001\n"
    "\030OctPrimalUpdateParameter\022\023\n\013filter_size"
    "\030\001 \001(\r\022\027\n\017output_channels\030\002 \001(\r\022-\n\rweigh"
    "t_filler\030\003 \001(\0132\026.caffe.FillerParameter\022\013"
    "\n\003tau\030\004 \001(\002\"\223\001\n\020OctPropParameter\022\021\n\tkey_"
    "layer\030\001 \001(\t\022:\n\tprop_mode\030\002 \001(\0162\'.caffe.O"
    "ctPropParameter.PropagationMode\"0\n\017Propa"
    "gationMode\022\r\n\tPROP_PRED\020\000\022\016\n\nPROP_KNOWN\020"
    "\001\"e\n\030OctPropLossPrepParameter\022\024\n\014gt_key_"
    "layer\030\001 \001(\t\022\024\n\014pr_key_layer\030\002 \001(\t\022\035\n\016use"
    "_voxel_grid\030\003 \001(\010:\005false\"d\n\031OctLevelSamp"
    "lingParameter\022\027\n\017input_key_layer\030\001 \001(\t\022\025"
    "\n\rref_key_layer\030\002 \001(\t\022\027\n\017input_max_level"
    "\030\003 \001(\r\"@\n\026OctUpSamplingParameter\022\021\n\tkey_"
    "layer\030\001 \001(\t\022\023\n\010nbh_size\030\002 \001(\r:\0012\"\234\001\n\020Oct"
    "ConvParameter\022\023\n\013filter_size\030\001 \001(\r\022\027\n\017ou"
    "tput_channels\030\002 \001(\r\022-\n\rweight_filler\030\003 \001"
    "(\0132\026.caffe.FillerParameter\022+\n\013bias_fille"
    "r\030\004 \001(\0132\026.caffe.FillerParameter\"h\n\021OctIn"
    "putParameter\022\022\n\nbatch_size\030\001 \001(\r\022\016\n\006sour"
    "ce\030\002 \001(\t\022\023\n\013num_classes\030\003 \001(\r\022\032\n\014preload"
    "_data\030\004 \001(\010:\004true\"=\n\023OctConvertParameter"
    "\022\021\n\tmin_level\030\001 \001(\r\022\023\n\013use_max_ind\030\002 \001(\010"
    "\"\211\001\n\033OctInputPrimalDualParameter\022\022\n\nbatc"
    "h_size\030\001 \001(\r\022\023\n\013num_classes\030\002 \001(\r\022\016\n\006hei"
    "ght\030\003 \001(\r\022\r\n\005width\030\004 \001(\r\022\r\n\005depth\030\005 \001(\r\022"
    "\023\n\010nbh_size\030\006 \001(\r:\0012\"\256\001\n$OctAccuracy3DRe"
    "constructionParameter\022\032\n\017freespace_label"
    "\030\001 \001(\r:\0010\022\025\n\runknown_label\030\002 \001(\r\022\024\n\014gt_k"
    "ey_layer\030\003 \001(\t\022\024\n\014pr_key_layer\030\004 \001(\t\022\021\n\t"
    "max_level\030\005 \001(\r\022\024\n\014ignore_label\030\006 \001(\r\"\252\001"
    "\n\022OctOutputParameter\022\021\n\tkey_layer\030\001 \003(\t\022"
    "\021\n\tmin_level\030\002 \001(\r\022<\n\tprop_mode\030\003 \001(\0162)."
    "caffe.OctOutputParameter.PropagationMode"
    "\"0\n\017PropagationMode\022\r\n\tPROP_PRED\020\000\022\016\n\nPR"
    "OP_KNOWN\020\001\"=\n\025DenseConvertParameter\022\021\n\tk"
    "ey_layer\030\001 \001(\t\022\021\n\tmax_level\030\002 \001(\r\"_\n\027Oct"
    "SegLossPrepParameter\022\027\n\017input_key_layer\030"
    "\001 \001(\t\022\025\n\rref_key_layer\030\002 \001(\t\022\024\n\014ignore_l"
    "abel\030\003 \001(\r\"K\n\034SegCrossEntropyLossParamet"
    "er\022\025\n\runknown_label\030\001 \001(\r\022\024\n\014ignore_labe"
    "l\030\002 \001(\r\"\340\023\n\020V1LayerParameter\022\016\n\006bottom\030\002"
    " \003(\t\022\013\n\003top\030\003 \003(\t\022\014\n\004name\030\004 \001(\t\022$\n\007inclu"
    "de\030  \003(\0132\023.caffe.NetStateRule\022$\n\007exclude"
    "\030! \003(\0132\023.caffe.NetStateRule\022/\n\004type\030\005 \001("
    "\0162!.caffe.V1LayerParameter.LayerType\022\037\n\005"
    "blobs\030\006 \003(\0132\020.caffe.BlobProto\022\016\n\005param\030\351"
    "\007 \003(\t\022>\n\017blob_share_mode\030\352\007 \003(\0162$.caffe."
    "V1LayerParameter.DimCheckMode\022\020\n\010blobs_l"
    "r\030\007 \003(\002\022\024\n\014weight_decay\030\010 \003(\002\022\023\n\013loss_we"
    "ight\030# \003(\002\0220\n\016accuracy_param\030\033 \001(\0132\030.caf"
    "fe.AccuracyParameter\022,\n\014argmax_param\030\027 \001"
    "(\0132\026.caffe.ArgMaxParameter\022,\n\014concat_par"
    "am\030\t \001(\0132\026.caffe.ConcatParameter\022\?\n\026cont"
    "rastive_loss_param\030( \001(\0132\037.caffe.Contras"
    "tiveLossParameter\0226\n\021convolution_param\030\n"
    " \001(\0132\033.caffe.ConvolutionParameter\022(\n\ndat"
    "a_param\030\013 \001(\0132\024.caffe.DataParameter\022.\n\rd"
    "ropout_param\030\014 \001(\0132\027.caffe.DropoutParame"
    "ter\0223\n\020dummy_data_param\030\032 \001(\0132\031.caffe.Du"
    "mmyDataParameter\022.\n\reltwise_param\030\030 \001(\0132"
    "\027.caffe.EltwiseParameter\022&\n\texp_param\030) "
    "\001(\0132\023.caffe.ExpParameter\0221\n\017hdf5_data_pa"
    "ram\030\r \001(\0132\030.caffe.HDF5DataParameter\0225\n\021h"
    "df5_output_param\030\016 \001(\0132\032.caffe.HDF5Outpu"
    "tParameter\0223\n\020hinge_loss_param\030\035 \001(\0132\031.c"
    "affe.HingeLossParameter\0223\n\020image_data_pa"
    "ram\030\017 \001(\0132\031.caffe.ImageDataParameter\0229\n\023"
    "infogain_loss_param\030\020 \001(\0132\034.caffe.Infoga"
    "inLossParameter\0229\n\023inner_product_param\030\021"
    " \001(\0132\034.caffe.InnerProductParameter\022&\n\tlr"
    "n_param\030\022 \001(\0132\023.caffe.LRNParameter\0225\n\021me"
    "mory_data_param\030\026 \001(\0132\032.caffe.MemoryData"
    "Parameter\022&\n\tmvn_param\030\" \001(\0132\023.caffe.MVN"
    "Parameter\022.\n\rpooling_param\030\023 \001(\0132\027.caffe"
    ".PoolingParameter\022*\n\013power_param\030\025 \001(\0132\025"
    ".caffe.PowerParameter\022(\n\nrelu_param\030\036 \001("
    "\0132\024.caffe.ReLUParameter\022.\n\rsigmoid_param"
    "\030& \001(\0132\027.caffe.SigmoidParameter\022.\n\rsoftm"
    "ax_param\030\' \001(\0132\027.caffe.SoftmaxParameter\022"
    "*\n\013slice_param\030\037 \001(\0132\025.caffe.SliceParame"
    "ter\022(\n\ntanh_param\030% \001(\0132\024.caffe.TanHPara"
    "meter\0222\n\017threshold_param\030\031 \001(\0132\031.caffe.T"
    "hresholdParameter\0225\n\021window_data_param\030\024"
    " \001(\0132\032.caffe.WindowDataParameter\0227\n\017tran"
    "sform_param\030$ \001(\0132\036.caffe.Transformation"
    "Parameter\022(\n\nloss_param\030* \001(\0132\024.caffe.Lo"
    "ssParameter\022&\n\005layer\030\001 \001(\0132\027.caffe.V0Lay"
    "erParameter\"\330\004\n\tLayerType\022\010\n\004NONE\020\000\022\n\n\006A"
    "BSVAL\020#\022\014\n\010ACCURACY\020\001\022\n\n\006ARGMAX\020\036\022\010\n\004BNL"
    "L\020\002\022\n\n\006CONCAT\020\003\022\024\n\020CONTRASTIVE_LOSS\020%\022\017\n"
    "\013CONVOLUTION\020\004\022\010\n\004DATA\020\005\022\021\n\rDECONVOLUTIO"
    "N\020\'\022\013\n\007DROPOUT\020\006\022\016\n\nDUMMY_DATA\020 \022\022\n\016EUCL"
    "IDEAN_LOSS\020\007\022\013\n\007ELTWISE\020\031\022\007\n\003EXP\020&\022\013\n\007FL"
    "ATTEN\020\010\022\r\n\tHDF5_DATA\020\t\022\017\n\013HDF5_OUTPUT\020\n\022"
    "\016\n\nHINGE_LOSS\020\034\022\n\n\006IM2COL\020\013\022\016\n\nIMAGE_DAT"
    "A\020\014\022\021\n\rINFOGAIN_LOSS\020\r\022\021\n\rINNER_PRODUCT\020"
    "\016\022\007\n\003LRN\020\017\022\017\n\013MEMORY_DATA\020\035\022\035\n\031MULTINOMI"
    "AL_LOGISTIC_LOSS\020\020\022\007\n\003MVN\020\"\022\013\n\007POOLING\020\021"
    "\022\t\n\005POWER\020\032\022\010\n\004RELU\020\022\022\013\n\007SIGMOID\020\023\022\036\n\032SI"
    "GMOID_CROSS_ENTROPY_LOSS\020\033\022\013\n\007SILENCE\020$\022"
    "\013\n\007SOFTMAX\020\024\022\020\n\014SOFTMAX_LOSS\020\025\022\t\n\005SPLIT\020"
    "\026\022\t\n\005SLICE\020!\022\010\n\004TANH\020\027\022\017\n\013WINDOW_DATA\020\030\022"
    "\r\n\tTHRESHOLD\020\037\"*\n\014DimCheckMode\022\n\n\006STRICT"
    "\020\000\022\016\n\nPERMISSIVE\020\001\"\375\007\n\020V0LayerParameter\022"
    "\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\022\n\nnum_outpu"
    "t\030\003 \001(\r\022\026\n\010biasterm\030\004 \001(\010:\004true\022-\n\rweigh"
    "t_filler\030\005 \001(\0132\026.caffe.FillerParameter\022+"
    "\n\013bias_filler\030\006 \001(\0132\026.caffe.FillerParame"
    "ter\022\016\n\003pad\030\007 \001(\r:\0010\022\022\n\nkernelsize\030\010 \001(\r\022"
    "\020\n\005group\030\t \001(\r:\0011\022\021\n\006stride\030\n \001(\r:\0011\0225\n\004"
    "pool\030\013 \001(\0162\".caffe.V0LayerParameter.Pool"
    "Method:\003MAX\022\032\n\rdropout_ratio\030\014 \001(\002:\0030.5\022"
    "\025\n\nlocal_size\030\r \001(\r:\0015\022\020\n\005alpha\030\016 \001(\002:\0011"
    "\022\022\n\004beta\030\017 \001(\002:\0040.75\022\014\n\001k\030\026 \001(\002:\0011\022\016\n\006so"
    "urce\030\020 \001(\t\022\020\n\005scale\030\021 \001(\002:\0011\022\020\n\010meanfile"
    "\030\022 \001(\t\022\021\n\tbatchsize\030\023 \001(\r\022\023\n\010cropsize\030\024 "
    "\001(\r:\0010\022\025\n\006mirror\030\025 \001(\010:\005false\022\037\n\005blobs\0302"
    " \003(\0132\020.caffe.BlobProto\022\020\n\010blobs_lr\0303 \003(\002"
    "\022\024\n\014weight_decay\0304 \003(\002\022\024\n\trand_skip\0305 \001("
    "\r:\0010\022\035\n\020det_fg_threshold\0306 \001(\002:\0030.5\022\035\n\020d"
    "et_bg_threshold\0307 \001(\002:\0030.5\022\035\n\017det_fg_fra"
    "ction\0308 \001(\002:\0040.25\022\032\n\017det_context_pad\030: \001"
    "(\r:\0010\022\033\n\rdet_crop_mode\030; \001(\t:\004warp\022\022\n\007ne"
    "w_num\030< \001(\005:\0010\022\027\n\014new_channels\030= \001(\005:\0010\022"
    "\025\n\nnew_height\030> \001(\005:\0010\022\024\n\tnew_width\030\? \001("
    "\005:\0010\022\035\n\016shuffle_images\030@ \001(\010:\005false\022\025\n\nc"
    "oncat_dim\030A \001(\r:\0011\0226\n\021hdf5_output_param\030"
    "\351\007 \001(\0132\032.caffe.HDF5OutputParameter\".\n\nPo"
    "olMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC"
    "\020\002\"W\n\016PReLUParameter\022&\n\006filler\030\001 \001(\0132\026.c"
    "affe.FillerParameter\022\035\n\016channel_shared\030\002"
    " \001(\010:\005false*\034\n\005Phase\022\t\n\005TRAIN\020\000\022\010\n\004TEST\020"
    "\001", 21201);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe.proto", &protobuf_RegisterTypes);
  BlobShape::default_instance_ = new BlobShape();
  BlobProto::default_instance_ = new BlobProto();
  BlobProtoVector::default_instance_ = new BlobProtoVector();
  Datum::default_instance_ = new Datum();
  FillerParameter::_default_type_ =
      new ::std::string("constant", 8);
  FillerParameter::default_instance_ = new FillerParameter();
  NetParameter::default_instance_ = new NetParameter();
  SolverParameter::_default_regularization_type_ =
      new ::std::string("L2", 2);
  SolverParameter::_default_type_ =
      new ::std::string("SGD", 3);
  SolverParameter::default_instance_ = new SolverParameter();
  SolverState::default_instance_ = new SolverState();
  NetState::default_instance_ = new NetState();
  NetStateRule::default_instance_ = new NetStateRule();
  ParamSpec::default_instance_ = new ParamSpec();
  LayerParameter::default_instance_ = new LayerParameter();
  TransformationParameter::default_instance_ = new TransformationParameter();
  LossParameter::default_instance_ = new LossParameter();
  AccuracyParameter::default_instance_ = new AccuracyParameter();
  ArgMaxParameter::default_instance_ = new ArgMaxParameter();
  ConcatParameter::default_instance_ = new ConcatParameter();
  BatchNormParameter::default_instance_ = new BatchNormParameter();
  BiasParameter::default_instance_ = new BiasParameter();
  ContrastiveLossParameter::default_instance_ = new ContrastiveLossParameter();
  ConvolutionParameter::default_instance_ = new ConvolutionParameter();
  CropParameter::default_instance_ = new CropParameter();
  DataParameter::default_instance_ = new DataParameter();
  DropoutParameter::default_instance_ = new DropoutParameter();
  DummyDataParameter::default_instance_ = new DummyDataParameter();
  EltwiseParameter::default_instance_ = new EltwiseParameter();
  ELUParameter::default_instance_ = new ELUParameter();
  EmbedParameter::default_instance_ = new EmbedParameter();
  ExpParameter::default_instance_ = new ExpParameter();
  FlattenParameter::default_instance_ = new FlattenParameter();
  HDF5DataParameter::default_instance_ = new HDF5DataParameter();
  HDF5OutputParameter::default_instance_ = new HDF5OutputParameter();
  HingeLossParameter::default_instance_ = new HingeLossParameter();
  ImageDataParameter::default_instance_ = new ImageDataParameter();
  InfogainLossParameter::default_instance_ = new InfogainLossParameter();
  InnerProductParameter::default_instance_ = new InnerProductParameter();
  InputParameter::default_instance_ = new InputParameter();
  LogParameter::default_instance_ = new LogParameter();
  LRNParameter::default_instance_ = new LRNParameter();
  MemoryDataParameter::default_instance_ = new MemoryDataParameter();
  MVNParameter::default_instance_ = new MVNParameter();
  ParameterParameter::default_instance_ = new ParameterParameter();
  PoolingParameter::default_instance_ = new PoolingParameter();
  PowerParameter::default_instance_ = new PowerParameter();
  PythonParameter::default_instance_ = new PythonParameter();
  RecurrentParameter::default_instance_ = new RecurrentParameter();
  ReductionParameter::default_instance_ = new ReductionParameter();
  ReLUParameter::default_instance_ = new ReLUParameter();
  ReshapeParameter::default_instance_ = new ReshapeParameter();
  ScaleParameter::default_instance_ = new ScaleParameter();
  SigmoidParameter::default_instance_ = new SigmoidParameter();
  SliceParameter::default_instance_ = new SliceParameter();
  SoftmaxParameter::default_instance_ = new SoftmaxParameter();
  TanHParameter::default_instance_ = new TanHParameter();
  TileParameter::default_instance_ = new TileParameter();
  ThresholdParameter::default_instance_ = new ThresholdParameter();
  WindowDataParameter::_default_crop_mode_ =
      new ::std::string("warp", 4);
  WindowDataParameter::default_instance_ = new WindowDataParameter();
  SPPParameter::default_instance_ = new SPPParameter();
  Input3DParameter::default_instance_ = new Input3DParameter();
  TestInput3DParameter::default_instance_ = new TestInput3DParameter();
  InputPrimalDualParameter::default_instance_ = new InputPrimalDualParameter();
  ClipByValueParameter::default_instance_ = new ClipByValueParameter();
  Pooling3DParameter::default_instance_ = new Pooling3DParameter();
  UpSampling3DParameter::default_instance_ = new UpSampling3DParameter();
  DualUpdateParameter::default_instance_ = new DualUpdateParameter();
  PrimalUpdateParameter::default_instance_ = new PrimalUpdateParameter();
  LagrangianUpdateParameter::default_instance_ = new LagrangianUpdateParameter();
  PrimalDualCrossEntropyLossParameter::default_instance_ = new PrimalDualCrossEntropyLossParameter();
  PrimalDualWeightedCrossEntropyLossParameter::default_instance_ = new PrimalDualWeightedCrossEntropyLossParameter();
  DenseGridDataWriteParameter::default_instance_ = new DenseGridDataWriteParameter();
  Accuracy3DReconstructionParameter::default_instance_ = new Accuracy3DReconstructionParameter();
  ScalingParameter::default_instance_ = new ScalingParameter();
  OctDualUpdateParameter::default_instance_ = new OctDualUpdateParameter();
  OctPrimalUpdateParameter::default_instance_ = new OctPrimalUpdateParameter();
  OctPropParameter::default_instance_ = new OctPropParameter();
  OctPropLossPrepParameter::default_instance_ = new OctPropLossPrepParameter();
  OctLevelSamplingParameter::default_instance_ = new OctLevelSamplingParameter();
  OctUpSamplingParameter::default_instance_ = new OctUpSamplingParameter();
  OctConvParameter::default_instance_ = new OctConvParameter();
  OctInputParameter::default_instance_ = new OctInputParameter();
  OctConvertParameter::default_instance_ = new OctConvertParameter();
  OctInputPrimalDualParameter::default_instance_ = new OctInputPrimalDualParameter();
  OctAccuracy3DReconstructionParameter::default_instance_ = new OctAccuracy3DReconstructionParameter();
  OctOutputParameter::default_instance_ = new OctOutputParameter();
  DenseConvertParameter::default_instance_ = new DenseConvertParameter();
  OctSegLossPrepParameter::default_instance_ = new OctSegLossPrepParameter();
  SegCrossEntropyLossParameter::default_instance_ = new SegCrossEntropyLossParameter();
  V1LayerParameter::default_instance_ = new V1LayerParameter();
  V0LayerParameter::_default_det_crop_mode_ =
      new ::std::string("warp", 4);
  V0LayerParameter::default_instance_ = new V0LayerParameter();
  PReLUParameter::default_instance_ = new PReLUParameter();
  BlobShape::default_instance_->InitAsDefaultInstance();
  BlobProto::default_instance_->InitAsDefaultInstance();
  BlobProtoVector::default_instance_->InitAsDefaultInstance();
  Datum::default_instance_->InitAsDefaultInstance();
  FillerParameter::default_instance_->InitAsDefaultInstance();
  NetParameter::default_instance_->InitAsDefaultInstance();
  SolverParameter::default_instance_->InitAsDefaultInstance();
  SolverState::default_instance_->InitAsDefaultInstance();
  NetState::default_instance_->InitAsDefaultInstance();
  NetStateRule::default_instance_->InitAsDefaultInstance();
  ParamSpec::default_instance_->InitAsDefaultInstance();
  LayerParameter::default_instance_->InitAsDefaultInstance();
  TransformationParameter::default_instance_->InitAsDefaultInstance();
  LossParameter::default_instance_->InitAsDefaultInstance();
  AccuracyParameter::default_instance_->InitAsDefaultInstance();
  ArgMaxParameter::default_instance_->InitAsDefaultInstance();
  ConcatParameter::default_instance_->InitAsDefaultInstance();
  BatchNormParameter::default_instance_->InitAsDefaultInstance();
  BiasParameter::default_instance_->InitAsDefaultInstance();
  ContrastiveLossParameter::default_instance_->InitAsDefaultInstance();
  ConvolutionParameter::default_instance_->InitAsDefaultInstance();
  CropParameter::default_instance_->InitAsDefaultInstance();
  DataParameter::default_instance_->InitAsDefaultInstance();
  DropoutParameter::default_instance_->InitAsDefaultInstance();
  DummyDataParameter::default_instance_->InitAsDefaultInstance();
  EltwiseParameter::default_instance_->InitAsDefaultInstance();
  ELUParameter::default_instance_->InitAsDefaultInstance();
  EmbedParameter::default_instance_->InitAsDefaultInstance();
  ExpParameter::default_instance_->InitAsDefaultInstance();
  FlattenParameter::default_instance_->InitAsDefaultInstance();
  HDF5DataParameter::default_instance_->InitAsDefaultInstance();
  HDF5OutputParameter::default_instance_->InitAsDefaultInstance();
  HingeLossParameter::default_instance_->InitAsDefaultInstance();
  ImageDataParameter::default_instance_->InitAsDefaultInstance();
  InfogainLossParameter::default_instance_->InitAsDefaultInstance();
  InnerProductParameter::default_instance_->InitAsDefaultInstance();
  InputParameter::default_instance_->InitAsDefaultInstance();
  LogParameter::default_instance_->InitAsDefaultInstance();
  LRNParameter::default_instance_->InitAsDefaultInstance();
  MemoryDataParameter::default_instance_->InitAsDefaultInstance();
  MVNParameter::default_instance_->InitAsDefaultInstance();
  ParameterParameter::default_instance_->InitAsDefaultInstance();
  PoolingParameter::default_instance_->InitAsDefaultInstance();
  PowerParameter::default_instance_->InitAsDefaultInstance();
  PythonParameter::default_instance_->InitAsDefaultInstance();
  RecurrentParameter::default_instance_->InitAsDefaultInstance();
  ReductionParameter::default_instance_->InitAsDefaultInstance();
  ReLUParameter::default_instance_->InitAsDefaultInstance();
  ReshapeParameter::default_instance_->InitAsDefaultInstance();
  ScaleParameter::default_instance_->InitAsDefaultInstance();
  SigmoidParameter::default_instance_->InitAsDefaultInstance();
  SliceParameter::default_instance_->InitAsDefaultInstance();
  SoftmaxParameter::default_instance_->InitAsDefaultInstance();
  TanHParameter::default_instance_->InitAsDefaultInstance();
  TileParameter::default_instance_->InitAsDefaultInstance();
  ThresholdParameter::default_instance_->InitAsDefaultInstance();
  WindowDataParameter::default_instance_->InitAsDefaultInstance();
  SPPParameter::default_instance_->InitAsDefaultInstance();
  Input3DParameter::default_instance_->InitAsDefaultInstance();
  TestInput3DParameter::default_instance_->InitAsDefaultInstance();
  InputPrimalDualParameter::default_instance_->InitAsDefaultInstance();
  ClipByValueParameter::default_instance_->InitAsDefaultInstance();
  Pooling3DParameter::default_instance_->InitAsDefaultInstance();
  UpSampling3DParameter::default_instance_->InitAsDefaultInstance();
  DualUpdateParameter::default_instance_->InitAsDefaultInstance();
  PrimalUpdateParameter::default_instance_->InitAsDefaultInstance();
  LagrangianUpdateParameter::default_instance_->InitAsDefaultInstance();
  PrimalDualCrossEntropyLossParameter::default_instance_->InitAsDefaultInstance();
  PrimalDualWeightedCrossEntropyLossParameter::default_instance_->InitAsDefaultInstance();
  DenseGridDataWriteParameter::default_instance_->InitAsDefaultInstance();
  Accuracy3DReconstructionParameter::default_instance_->InitAsDefaultInstance();
  ScalingParameter::default_instance_->InitAsDefaultInstance();
  OctDualUpdateParameter::default_instance_->InitAsDefaultInstance();
  OctPrimalUpdateParameter::default_instance_->InitAsDefaultInstance();
  OctPropParameter::default_instance_->InitAsDefaultInstance();
  OctPropLossPrepParameter::default_instance_->InitAsDefaultInstance();
  OctLevelSamplingParameter::default_instance_->InitAsDefaultInstance();
  OctUpSamplingParameter::default_instance_->InitAsDefaultInstance();
  OctConvParameter::default_instance_->InitAsDefaultInstance();
  OctInputParameter::default_instance_->InitAsDefaultInstance();
  OctConvertParameter::default_instance_->InitAsDefaultInstance();
  OctInputPrimalDualParameter::default_instance_->InitAsDefaultInstance();
  OctAccuracy3DReconstructionParameter::default_instance_->InitAsDefaultInstance();
  OctOutputParameter::default_instance_->InitAsDefaultInstance();
  DenseConvertParameter::default_instance_->InitAsDefaultInstance();
  OctSegLossPrepParameter::default_instance_->InitAsDefaultInstance();
  SegCrossEntropyLossParameter::default_instance_->InitAsDefaultInstance();
  V1LayerParameter::default_instance_->InitAsDefaultInstance();
  V0LayerParameter::default_instance_->InitAsDefaultInstance();
  PReLUParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_caffe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_caffe_2eproto {
  StaticDescriptorInitializer_caffe_2eproto() {
    protobuf_AddDesc_caffe_2eproto();
  }
} static_descriptor_initializer_caffe_2eproto_;
const ::google::protobuf::EnumDescriptor* Phase_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Phase_descriptor_;
}
bool Phase_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BlobShape::kDimFieldNumber;
#endif  // !_MSC_VER

BlobShape::BlobShape()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobShape)
}

void BlobShape::InitAsDefaultInstance() {
}

BlobShape::BlobShape(const BlobShape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BlobShape)
}

void BlobShape::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobShape::~BlobShape() {
  // @@protoc_insertion_point(destructor:caffe.BlobShape)
  SharedDtor();
}

void BlobShape::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobShape_descriptor_;
}

const BlobShape& BlobShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

BlobShape* BlobShape::default_instance_ = NULL;

BlobShape* BlobShape::New() const {
  return new BlobShape;
}

void BlobShape::Clear() {
  dim_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dim = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dim())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_dim())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobShape)
  return false;
#undef DO_
}

void BlobShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobShape)
  // repeated int64 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dim_cached_byte_size_);
  }
  for (int i = 0; i < this->dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dim(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobShape)
}

::google::protobuf::uint8* BlobShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobShape)
  // repeated int64 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dim_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dim(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobShape)
  return target;
}

int BlobShape::ByteSize() const {
  int total_size = 0;

  // repeated int64 dim = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->dim_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dim(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dim_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobShape::MergeFrom(const BlobShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  dim_.MergeFrom(from.dim_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobShape::CopyFrom(const BlobShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobShape::IsInitialized() const {

  return true;
}

void BlobShape::Swap(BlobShape* other) {
  if (other != this) {
    dim_.Swap(&other->dim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobShape_descriptor_;
  metadata.reflection = BlobShape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobProto::kShapeFieldNumber;
const int BlobProto::kDataFieldNumber;
const int BlobProto::kDiffFieldNumber;
const int BlobProto::kDoubleDataFieldNumber;
const int BlobProto::kDoubleDiffFieldNumber;
const int BlobProto::kNumFieldNumber;
const int BlobProto::kChannelsFieldNumber;
const int BlobProto::kHeightFieldNumber;
const int BlobProto::kWidthFieldNumber;
#endif  // !_MSC_VER

BlobProto::BlobProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobProto)
}

void BlobProto::InitAsDefaultInstance() {
  shape_ = const_cast< ::caffe::BlobShape*>(&::caffe::BlobShape::default_instance());
}

BlobProto::BlobProto(const BlobProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BlobProto)
}

void BlobProto::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
  num_ = 0;
  channels_ = 0;
  height_ = 0;
  width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobProto::~BlobProto() {
  // @@protoc_insertion_point(destructor:caffe.BlobProto)
  SharedDtor();
}

void BlobProto::SharedDtor() {
  if (this != default_instance_) {
    delete shape_;
  }
}

void BlobProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobProto_descriptor_;
}

const BlobProto& BlobProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

BlobProto* BlobProto::default_instance_ = NULL;

BlobProto* BlobProto::New() const {
  return new BlobProto;
}

void BlobProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 225) {
    ZR_(num_, height_);
    if (has_shape()) {
      if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
    }
  }
  width_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  diff_.Clear();
  double_data_.Clear();
  double_diff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // optional int32 channels = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated float data = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (tag == 45) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_diff;
        break;
      }

      // repeated float diff = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_diff())));
        } else if (tag == 53) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_diff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_shape;
        break;
      }

      // optional .caffe.BlobShape shape = 7;
      case 7: {
        if (tag == 58) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_double_data;
        break;
      }

      // repeated double double_data = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_double_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_data())));
        } else if (tag == 65) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 66, input, this->mutable_double_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_double_diff;
        break;
      }

      // repeated double double_diff = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_double_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_diff())));
        } else if (tag == 73) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 74, input, this->mutable_double_diff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobProto)
  return false;
#undef DO_
}

void BlobProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobProto)
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_diff_cached_byte_size_);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->diff(i), output);
  }

  // optional .caffe.BlobShape shape = 7;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->shape(), output);
  }

  // repeated double double_data = 8 [packed = true];
  if (this->double_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_data_cached_byte_size_);
  }
  for (int i = 0; i < this->double_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_data(i), output);
  }

  // repeated double double_diff = 9 [packed = true];
  if (this->double_diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_diff_cached_byte_size_);
  }
  for (int i = 0; i < this->double_diff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_diff(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobProto)
}

::google::protobuf::uint8* BlobProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobProto)
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }

  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _diff_cached_byte_size_, target);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->diff(i), target);
  }

  // optional .caffe.BlobShape shape = 7;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->shape(), target);
  }

  // repeated double double_data = 8 [packed = true];
  if (this->double_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->double_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_data(i), target);
  }

  // repeated double double_diff = 9 [packed = true];
  if (this->double_diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_diff_cached_byte_size_, target);
  }
  for (int i = 0; i < this->double_diff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_diff(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobProto)
  return target;
}

int BlobProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe.BlobShape shape = 7;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape());
    }

    // optional int32 num = 1 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 channels = 2 [default = 0];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 width = 4 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  // repeated float data = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float diff = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->diff_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _diff_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double double_data = 8 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->double_data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double double_diff = 9 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->double_diff_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_diff_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobProto::MergeFrom(const BlobProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  diff_.MergeFrom(from.diff_);
  double_data_.MergeFrom(from.double_data_);
  double_diff_.MergeFrom(from.double_diff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProto::CopyFrom(const BlobProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProto::IsInitialized() const {

  return true;
}

void BlobProto::Swap(BlobProto* other) {
  if (other != this) {
    std::swap(shape_, other->shape_);
    data_.Swap(&other->data_);
    diff_.Swap(&other->diff_);
    double_data_.Swap(&other->double_data_);
    double_diff_.Swap(&other->double_diff_);
    std::swap(num_, other->num_);
    std::swap(channels_, other->channels_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobProto_descriptor_;
  metadata.reflection = BlobProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobProtoVector::kBlobsFieldNumber;
#endif  // !_MSC_VER

BlobProtoVector::BlobProtoVector()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobProtoVector)
}

void BlobProtoVector::InitAsDefaultInstance() {
}

BlobProtoVector::BlobProtoVector(const BlobProtoVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BlobProtoVector)
}

void BlobProtoVector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobProtoVector::~BlobProtoVector() {
  // @@protoc_insertion_point(destructor:caffe.BlobProtoVector)
  SharedDtor();
}

void BlobProtoVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobProtoVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProtoVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobProtoVector_descriptor_;
}

const BlobProtoVector& BlobProtoVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

BlobProtoVector* BlobProtoVector::default_instance_ = NULL;

BlobProtoVector* BlobProtoVector::New() const {
  return new BlobProtoVector;
}

void BlobProtoVector::Clear() {
  blobs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobProtoVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobProtoVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.BlobProto blobs = 1;
      case 1: {
        if (tag == 10) {
         parse_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_blobs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobProtoVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobProtoVector)
  return false;
#undef DO_
}

void BlobProtoVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobProtoVector)
  // repeated .caffe.BlobProto blobs = 1;
  for (int i = 0; i < this->blobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blobs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobProtoVector)
}

::google::protobuf::uint8* BlobProtoVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobProtoVector)
  // repeated .caffe.BlobProto blobs = 1;
  for (int i = 0; i < this->blobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blobs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobProtoVector)
  return target;
}

int BlobProtoVector::ByteSize() const {
  int total_size = 0;

  // repeated .caffe.BlobProto blobs = 1;
  total_size += 1 * this->blobs_size();
  for (int i = 0; i < this->blobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blobs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProtoVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobProtoVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobProtoVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobProtoVector::MergeFrom(const BlobProtoVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  blobs_.MergeFrom(from.blobs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobProtoVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProtoVector::CopyFrom(const BlobProtoVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProtoVector::IsInitialized() const {

  return true;
}

void BlobProtoVector::Swap(BlobProtoVector* other) {
  if (other != this) {
    blobs_.Swap(&other->blobs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobProtoVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobProtoVector_descriptor_;
  metadata.reflection = BlobProtoVector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Datum::kChannelsFieldNumber;
const int Datum::kHeightFieldNumber;
const int Datum::kWidthFieldNumber;
const int Datum::kDataFieldNumber;
const int Datum::kLabelFieldNumber;
const int Datum::kFloatDataFieldNumber;
const int Datum::kEncodedFieldNumber;
#endif  // !_MSC_VER

Datum::Datum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Datum)
}

void Datum::InitAsDefaultInstance() {
}

Datum::Datum(const Datum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.Datum)
}

void Datum::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channels_ = 0;
  height_ = 0;
  width_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_ = 0;
  encoded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Datum::~Datum() {
  // @@protoc_insertion_point(destructor:caffe.Datum)
  SharedDtor();
}

void Datum::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Datum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Datum_descriptor_;
}

const Datum& Datum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

Datum* Datum::default_instance_ = NULL;

Datum* Datum::New() const {
  return new Datum;
}

void Datum::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Datum*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(channels_, height_);
    ZR_(width_, label_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    encoded_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  float_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Datum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Datum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channels = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_label;
        break;
      }

      // optional int32 label = 5;
      case 5: {
        if (tag == 40) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_float_data;
        break;
      }

      // repeated float float_data = 6;
      case 6: {
        if (tag == 53) {
         parse_float_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_float_data())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_float_data;
        if (input->ExpectTag(56)) goto parse_encoded;
        break;
      }

      // optional bool encoded = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_encoded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encoded_)));
          set_has_encoded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Datum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Datum)
  return false;
#undef DO_
}

void Datum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Datum)
  // optional int32 channels = 1;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
  }

  // optional int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional int32 label = 5;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
  }

  // repeated float float_data = 6;
  for (int i = 0; i < this->float_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->float_data(i), output);
  }

  // optional bool encoded = 7 [default = false];
  if (has_encoded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->encoded(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Datum)
}

::google::protobuf::uint8* Datum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Datum)
  // optional int32 channels = 1;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
  }

  // optional int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional int32 label = 5;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
  }

  // repeated float float_data = 6;
  for (int i = 0; i < this->float_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->float_data(i), target);
  }

  // optional bool encoded = 7 [default = false];
  if (has_encoded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->encoded(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Datum)
  return target;
}

int Datum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channels = 1;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional bool encoded = 7 [default = false];
    if (has_encoded()) {
      total_size += 1 + 1;
    }

  }
  // repeated float float_data = 6;
  {
    int data_size = 0;
    data_size = 4 * this->float_data_size();
    total_size += 1 * this->float_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Datum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Datum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Datum::MergeFrom(const Datum& from) {
  GOOGLE_CHECK_NE(&from, this);
  float_data_.MergeFrom(from.float_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_encoded()) {
      set_encoded(from.encoded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Datum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datum::CopyFrom(const Datum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum::IsInitialized() const {

  return true;
}

void Datum::Swap(Datum* other) {
  if (other != this) {
    std::swap(channels_, other->channels_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(data_, other->data_);
    std::swap(label_, other->label_);
    float_data_.Swap(&other->float_data_);
    std::swap(encoded_, other->encoded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Datum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Datum_descriptor_;
  metadata.reflection = Datum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FillerParameter_VarianceNorm_descriptor_;
}
bool FillerParameter_VarianceNorm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FillerParameter_VarianceNorm FillerParameter::FAN_IN;
const FillerParameter_VarianceNorm FillerParameter::FAN_OUT;
const FillerParameter_VarianceNorm FillerParameter::AVERAGE;
const FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MIN;
const FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MAX;
const int FillerParameter::VarianceNorm_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* FillerParameter::_default_type_ = NULL;
#ifndef _MSC_VER
const int FillerParameter::kTypeFieldNumber;
const int FillerParameter::kValueFieldNumber;
const int FillerParameter::kMinFieldNumber;
const int FillerParameter::kMaxFieldNumber;
const int FillerParameter::kMeanFieldNumber;
const int FillerParameter::kStdFieldNumber;
const int FillerParameter::kSparseFieldNumber;
const int FillerParameter::kVarianceNormFieldNumber;
#endif  // !_MSC_VER

FillerParameter::FillerParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FillerParameter)
}

void FillerParameter::InitAsDefaultInstance() {
}

FillerParameter::FillerParameter(const FillerParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.FillerParameter)
}

void FillerParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(_default_type_);
  value_ = 0;
  min_ = 0;
  max_ = 1;
  mean_ = 0;
  std_ = 1;
  sparse_ = -1;
  variance_norm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FillerParameter::~FillerParameter() {
  // @@protoc_insertion_point(destructor:caffe.FillerParameter)
  SharedDtor();
}

void FillerParameter::SharedDtor() {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void FillerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FillerParameter_descriptor_;
}

const FillerParameter& FillerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

FillerParameter* FillerParameter::default_instance_ = NULL;

FillerParameter* FillerParameter::New() const {
  return new FillerParameter;
}

void FillerParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FillerParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(value_, min_);
    if (has_type()) {
      if (type_ != _default_type_) {
        type_->assign(*_default_type_);
      }
    }
    max_ = 1;
    mean_ = 0;
    std_ = 1;
    sparse_ = -1;
    variance_norm_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FillerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FillerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "constant"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // optional float value = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_min;
        break;
      }

      // optional float min = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_max;
        break;
      }

      // optional float max = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_mean;
        break;
      }

      // optional float mean = 5 [default = 0];
      case 5: {
        if (tag == 45) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_std;
        break;
      }

      // optional float std = 6 [default = 1];
      case 6: {
        if (tag == 53) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_)));
          set_has_std();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sparse;
        break;
      }

      // optional int32 sparse = 7 [default = -1];
      case 7: {
        if (tag == 56) {
         parse_sparse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sparse_)));
          set_has_sparse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_variance_norm;
        break;
      }

      // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
      case 8: {
        if (tag == 64) {
         parse_variance_norm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::FillerParameter_VarianceNorm_IsValid(value)) {
            set_variance_norm(static_cast< ::caffe::FillerParameter_VarianceNorm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FillerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FillerParameter)
  return false;
#undef DO_
}

void FillerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FillerParameter)
  // optional string type = 1 [default = "constant"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional float value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // optional float min = 3 [default = 0];
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min(), output);
  }

  // optional float max = 4 [default = 1];
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max(), output);
  }

  // optional float mean = 5 [default = 0];
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mean(), output);
  }

  // optional float std = 6 [default = 1];
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->std(), output);
  }

  // optional int32 sparse = 7 [default = -1];
  if (has_sparse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sparse(), output);
  }

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  if (has_variance_norm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->variance_norm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FillerParameter)
}

::google::protobuf::uint8* FillerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FillerParameter)
  // optional string type = 1 [default = "constant"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional float value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // optional float min = 3 [default = 0];
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min(), target);
  }

  // optional float max = 4 [default = 1];
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max(), target);
  }

  // optional float mean = 5 [default = 0];
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mean(), target);
  }

  // optional float std = 6 [default = 1];
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->std(), target);
  }

  // optional int32 sparse = 7 [default = -1];
  if (has_sparse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sparse(), target);
  }

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  if (has_variance_norm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->variance_norm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FillerParameter)
  return target;
}

int FillerParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1 [default = "constant"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional float min = 3 [default = 0];
    if (has_min()) {
      total_size += 1 + 4;
    }

    // optional float max = 4 [default = 1];
    if (has_max()) {
      total_size += 1 + 4;
    }

    // optional float mean = 5 [default = 0];
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional float std = 6 [default = 1];
    if (has_std()) {
      total_size += 1 + 4;
    }

    // optional int32 sparse = 7 [default = -1];
    if (has_sparse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sparse());
    }

    // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
    if (has_variance_norm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->variance_norm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillerParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FillerParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FillerParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FillerParameter::MergeFrom(const FillerParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
    if (from.has_sparse()) {
      set_sparse(from.sparse());
    }
    if (from.has_variance_norm()) {
      set_variance_norm(from.variance_norm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FillerParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillerParameter::CopyFrom(const FillerParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillerParameter::IsInitialized() const {

  return true;
}

void FillerParameter::Swap(FillerParameter* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(mean_, other->mean_);
    std::swap(std_, other->std_);
    std::swap(sparse_, other->sparse_);
    std::swap(variance_norm_, other->variance_norm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FillerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FillerParameter_descriptor_;
  metadata.reflection = FillerParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetParameter::kNameFieldNumber;
const int NetParameter::kInputFieldNumber;
const int NetParameter::kInputShapeFieldNumber;
const int NetParameter::kInputDimFieldNumber;
const int NetParameter::kForceBackwardFieldNumber;
const int NetParameter::kStateFieldNumber;
const int NetParameter::kDebugInfoFieldNumber;
const int NetParameter::kLayerFieldNumber;
const int NetParameter::kLayersFieldNumber;
#endif  // !_MSC_VER

NetParameter::NetParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetParameter)
}

void NetParameter::InitAsDefaultInstance() {
  state_ = const_cast< ::caffe::NetState*>(&::caffe::NetState::default_instance());
}

NetParameter::NetParameter(const NetParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.NetParameter)
}

void NetParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  force_backward_ = false;
  state_ = NULL;
  debug_info_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetParameter::~NetParameter() {
  // @@protoc_insertion_point(destructor:caffe.NetParameter)
  SharedDtor();
}

void NetParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete state_;
  }
}

void NetParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParameter_descriptor_;
}

const NetParameter& NetParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

NetParameter* NetParameter::default_instance_ = NULL;

NetParameter* NetParameter::New() const {
  return new NetParameter;
}

void NetParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NetParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 113) {
    ZR_(force_backward_, debug_info_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_state()) {
      if (state_ != NULL) state_->::caffe::NetState::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  input_.Clear();
  input_shape_.Clear();
  input_dim_.Clear();
  layer_.Clear();
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        break;
      }

      // repeated .caffe.V1LayerParameter layers = 2;
      case 2: {
        if (tag == 18) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        if (input->ExpectTag(26)) goto parse_input;
        break;
      }

      // repeated string input = 3;
      case 3: {
        if (tag == 26) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input(this->input_size() - 1).data(),
            this->input(this->input_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input;
        if (input->ExpectTag(32)) goto parse_input_dim;
        break;
      }

      // repeated int32 input_dim = 4;
      case 4: {
        if (tag == 32) {
         parse_input_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_input_dim())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_dim())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_input_dim;
        if (input->ExpectTag(40)) goto parse_force_backward;
        break;
      }

      // optional bool force_backward = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_force_backward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_backward_)));
          set_has_force_backward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_state;
        break;
      }

      // optional .caffe.NetState state = 6;
      case 6: {
        if (tag == 50) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_debug_info;
        break;
      }

      // optional bool debug_info = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_debug_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
          set_has_debug_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_input_shape;
        break;
      }

      // repeated .caffe.BlobShape input_shape = 8;
      case 8: {
        if (tag == 66) {
         parse_input_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_input_shape;
        if (input->ExpectTag(802)) goto parse_layer;
        break;
      }

      // repeated .caffe.LayerParameter layer = 100;
      case 100: {
        if (tag == 802) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_layer;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetParameter)
  return false;
#undef DO_
}

void NetParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .caffe.V1LayerParameter layers = 2;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layers(i), output);
  }

  // repeated string input = 3;
  for (int i = 0; i < this->input_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->input(i).data(), this->input(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input(i), output);
  }

  // repeated int32 input_dim = 4;
  for (int i = 0; i < this->input_dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->input_dim(i), output);
  }

  // optional bool force_backward = 5 [default = false];
  if (has_force_backward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->force_backward(), output);
  }

  // optional .caffe.NetState state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->state(), output);
  }

  // optional bool debug_info = 7 [default = false];
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->debug_info(), output);
  }

  // repeated .caffe.BlobShape input_shape = 8;
  for (int i = 0; i < this->input_shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->input_shape(i), output);
  }

  // repeated .caffe.LayerParameter layer = 100;
  for (int i = 0; i < this->layer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->layer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetParameter)
}

::google::protobuf::uint8* NetParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .caffe.V1LayerParameter layers = 2;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->layers(i), target);
  }

  // repeated string input = 3;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->input(i), target);
  }

  // repeated int32 input_dim = 4;
  for (int i = 0; i < this->input_dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->input_dim(i), target);
  }

  // optional bool force_backward = 5 [default = false];
  if (has_force_backward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->force_backward(), target);
  }

  // optional .caffe.NetState state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->state(), target);
  }

  // optional bool debug_info = 7 [default = false];
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->debug_info(), target);
  }

  // repeated .caffe.BlobShape input_shape = 8;
  for (int i = 0; i < this->input_shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->input_shape(i), target);
  }

  // repeated .caffe.LayerParameter layer = 100;
  for (int i = 0; i < this->layer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->layer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetParameter)
  return target;
}

int NetParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool force_backward = 5 [default = false];
    if (has_force_backward()) {
      total_size += 1 + 1;
    }

    // optional .caffe.NetState state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional bool debug_info = 7 [default = false];
    if (has_debug_info()) {
      total_size += 1 + 1;
    }

  }
  // repeated string input = 3;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated .caffe.BlobShape input_shape = 8;
  total_size += 1 * this->input_shape_size();
  for (int i = 0; i < this->input_shape_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input_shape(i));
  }

  // repeated int32 input_dim = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->input_dim_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->input_dim(i));
    }
    total_size += 1 * this->input_dim_size() + data_size;
  }

  // repeated .caffe.LayerParameter layer = 100;
  total_size += 2 * this->layer_size();
  for (int i = 0; i < this->layer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layer(i));
  }

  // repeated .caffe.V1LayerParameter layers = 2;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetParameter::MergeFrom(const NetParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_.MergeFrom(from.input_);
  input_shape_.MergeFrom(from.input_shape_);
  input_dim_.MergeFrom(from.input_dim_);
  layer_.MergeFrom(from.layer_);
  layers_.MergeFrom(from.layers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_force_backward()) {
      set_force_backward(from.force_backward());
    }
    if (from.has_state()) {
      mutable_state()->::caffe::NetState::MergeFrom(from.state());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParameter::CopyFrom(const NetParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParameter::IsInitialized() const {

  return true;
}

void NetParameter::Swap(NetParameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    input_.Swap(&other->input_);
    input_shape_.Swap(&other->input_shape_);
    input_dim_.Swap(&other->input_dim_);
    std::swap(force_backward_, other->force_backward_);
    std::swap(state_, other->state_);
    std::swap(debug_info_, other->debug_info_);
    layer_.Swap(&other->layer_);
    layers_.Swap(&other->layers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParameter_descriptor_;
  metadata.reflection = NetParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_SnapshotFormat_descriptor_;
}
bool SolverParameter_SnapshotFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SolverParameter_SnapshotFormat SolverParameter::HDF5;
const SolverParameter_SnapshotFormat SolverParameter::BINARYPROTO;
const SolverParameter_SnapshotFormat SolverParameter::SnapshotFormat_MIN;
const SolverParameter_SnapshotFormat SolverParameter::SnapshotFormat_MAX;
const int SolverParameter::SnapshotFormat_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_SolverMode_descriptor_;
}
bool SolverParameter_SolverMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SolverParameter_SolverMode SolverParameter::CPU;
const SolverParameter_SolverMode SolverParameter::GPU;
const SolverParameter_SolverMode SolverParameter::SolverMode_MIN;
const SolverParameter_SolverMode SolverParameter::SolverMode_MAX;
const int SolverParameter::SolverMode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_SolverType_descriptor_;
}
bool SolverParameter_SolverType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SolverParameter_SolverType SolverParameter::SGD;
const SolverParameter_SolverType SolverParameter::NESTEROV;
const SolverParameter_SolverType SolverParameter::ADAGRAD;
const SolverParameter_SolverType SolverParameter::RMSPROP;
const SolverParameter_SolverType SolverParameter::ADADELTA;
const SolverParameter_SolverType SolverParameter::ADAM;
const SolverParameter_SolverType SolverParameter::SolverType_MIN;
const SolverParameter_SolverType SolverParameter::SolverType_MAX;
const int SolverParameter::SolverType_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* SolverParameter::_default_regularization_type_ = NULL;
::std::string* SolverParameter::_default_type_ = NULL;
#ifndef _MSC_VER
const int SolverParameter::kNetFieldNumber;
const int SolverParameter::kNetParamFieldNumber;
const int SolverParameter::kTrainNetFieldNumber;
const int SolverParameter::kTestNetFieldNumber;
const int SolverParameter::kTrainNetParamFieldNumber;
const int SolverParameter::kTestNetParamFieldNumber;
const int SolverParameter::kTrainStateFieldNumber;
const int SolverParameter::kTestStateFieldNumber;
const int SolverParameter::kTestIterFieldNumber;
const int SolverParameter::kTestIntervalFieldNumber;
const int SolverParameter::kTestComputeLossFieldNumber;
const int SolverParameter::kTestInitializationFieldNumber;
const int SolverParameter::kBaseLrFieldNumber;
const int SolverParameter::kDisplayFieldNumber;
const int SolverParameter::kAverageLossFieldNumber;
const int SolverParameter::kMaxIterFieldNumber;
const int SolverParameter::kIterSizeFieldNumber;
const int SolverParameter::kLrPolicyFieldNumber;
const int SolverParameter::kGammaFieldNumber;
const int SolverParameter::kPowerFieldNumber;
const int SolverParameter::kMomentumFieldNumber;
const int SolverParameter::kWeightDecayFieldNumber;
const int SolverParameter::kRegularizationTypeFieldNumber;
const int SolverParameter::kStepsizeFieldNumber;
const int SolverParameter::kStepvalueFieldNumber;
const int SolverParameter::kClipGradientsFieldNumber;
const int SolverParameter::kSnapshotFieldNumber;
const int SolverParameter::kSnapshotPrefixFieldNumber;
const int SolverParameter::kSnapshotDiffFieldNumber;
const int SolverParameter::kSnapshotFormatFieldNumber;
const int SolverParameter::kSolverModeFieldNumber;
const int SolverParameter::kDeviceIdFieldNumber;
const int SolverParameter::kRandomSeedFieldNumber;
const int SolverParameter::kTypeFieldNumber;
const int SolverParameter::kDeltaFieldNumber;
const int SolverParameter::kMomentum2FieldNumber;
const int SolverParameter::kRmsDecayFieldNumber;
const int SolverParameter::kDebugInfoFieldNumber;
const int SolverParameter::kSnapshotAfterTrainFieldNumber;
const int SolverParameter::kSolverTypeFieldNumber;
const int SolverParameter::kLayerWiseReduceFieldNumber;
#endif  // !_MSC_VER

SolverParameter::SolverParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SolverParameter)
}

void SolverParameter::InitAsDefaultInstance() {
  net_param_ = const_cast< ::caffe::NetParameter*>(&::caffe::NetParameter::default_instance());
  train_net_param_ = const_cast< ::caffe::NetParameter*>(&::caffe::NetParameter::default_instance());
  train_state_ = const_cast< ::caffe::NetState*>(&::caffe::NetState::default_instance());
}

SolverParameter::SolverParameter(const SolverParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SolverParameter)
}

void SolverParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  net_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_param_ = NULL;
  train_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  train_net_param_ = NULL;
  train_state_ = NULL;
  test_interval_ = 0;
  test_compute_loss_ = false;
  test_initialization_ = true;
  base_lr_ = 0;
  display_ = 0;
  average_loss_ = 1;
  max_iter_ = 0;
  iter_size_ = 1;
  lr_policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamma_ = 0;
  power_ = 0;
  momentum_ = 0;
  weight_decay_ = 0;
  regularization_type_ = const_cast< ::std::string*>(_default_regularization_type_);
  stepsize_ = 0;
  clip_gradients_ = -1;
  snapshot_ = 0;
  snapshot_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snapshot_diff_ = false;
  snapshot_format_ = 1;
  solver_mode_ = 1;
  device_id_ = 0;
  random_seed_ = GOOGLE_LONGLONG(-1);
  type_ = const_cast< ::std::string*>(_default_type_);
  delta_ = 1e-08f;
  momentum2_ = 0.999f;
  rms_decay_ = 0.99f;
  debug_info_ = false;
  snapshot_after_train_ = true;
  solver_type_ = 0;
  layer_wise_reduce_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverParameter::~SolverParameter() {
  // @@protoc_insertion_point(destructor:caffe.SolverParameter)
  SharedDtor();
}

void SolverParameter::SharedDtor() {
  if (net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete net_;
  }
  if (train_net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete train_net_;
  }
  if (lr_policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lr_policy_;
  }
  if (regularization_type_ != _default_regularization_type_) {
    delete regularization_type_;
  }
  if (snapshot_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete snapshot_prefix_;
  }
  if (type_ != _default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
    delete net_param_;
    delete train_net_param_;
    delete train_state_;
  }
}

void SolverParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_descriptor_;
}

const SolverParameter& SolverParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SolverParameter* SolverParameter::default_instance_ = NULL;

SolverParameter* SolverParameter::New() const {
  return new SolverParameter;
}

void SolverParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SolverParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 87) {
    if (has_net()) {
      if (net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        net_->clear();
      }
    }
    if (has_net_param()) {
      if (net_param_ != NULL) net_param_->::caffe::NetParameter::Clear();
    }
    if (has_train_net()) {
      if (train_net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        train_net_->clear();
      }
    }
    if (has_train_net_param()) {
      if (train_net_param_ != NULL) train_net_param_->::caffe::NetParameter::Clear();
    }
    if (has_train_state()) {
      if (train_state_ != NULL) train_state_->::caffe::NetState::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65024) {
    ZR_(test_interval_, display_);
    test_compute_loss_ = false;
    test_initialization_ = true;
    average_loss_ = 1;
    max_iter_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(gamma_, weight_decay_);
    iter_size_ = 1;
    if (has_lr_policy()) {
      if (lr_policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lr_policy_->clear();
      }
    }
    if (has_regularization_type()) {
      if (regularization_type_ != _default_regularization_type_) {
        regularization_type_->assign(*_default_regularization_type_);
      }
    }
    stepsize_ = 0;
  }
  if (_has_bits_[24 / 32] & 4261412864) {
    clip_gradients_ = -1;
    snapshot_ = 0;
    if (has_snapshot_prefix()) {
      if (snapshot_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        snapshot_prefix_->clear();
      }
    }
    snapshot_diff_ = false;
    snapshot_format_ = 1;
    solver_mode_ = 1;
    device_id_ = 0;
  }
  if (_has_bits_[32 / 32] & 255) {
    random_seed_ = GOOGLE_LONGLONG(-1);
    if (has_type()) {
      if (type_ != _default_type_) {
        type_->assign(*_default_type_);
      }
    }
    delta_ = 1e-08f;
    momentum2_ = 0.999f;
    rms_decay_ = 0.99f;
    debug_info_ = false;
    snapshot_after_train_ = true;
    solver_type_ = 0;
  }
  layer_wise_reduce_ = true;

#undef OFFSET_OF_FIELD_
#undef ZR_

  test_net_.Clear();
  test_net_param_.Clear();
  test_state_.Clear();
  test_iter_.Clear();
  stepvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolverParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SolverParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string train_net = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_net().data(), this->train_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "train_net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_test_net;
        break;
      }

      // repeated string test_net = 2;
      case 2: {
        if (tag == 18) {
         parse_test_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_test_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test_net(this->test_net_size() - 1).data(),
            this->test_net(this->test_net_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "test_net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_test_net;
        if (input->ExpectTag(24)) goto parse_test_iter;
        break;
      }

      // repeated int32 test_iter = 3;
      case 3: {
        if (tag == 24) {
         parse_test_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_test_iter())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_test_iter())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_test_iter;
        if (input->ExpectTag(32)) goto parse_test_interval;
        break;
      }

      // optional int32 test_interval = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_test_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_interval_)));
          set_has_test_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_base_lr;
        break;
      }

      // optional float base_lr = 5;
      case 5: {
        if (tag == 45) {
         parse_base_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_lr_)));
          set_has_base_lr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_display;
        break;
      }

      // optional int32 display = 6;
      case 6: {
        if (tag == 48) {
         parse_display:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_)));
          set_has_display();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_iter;
        break;
      }

      // optional int32 max_iter = 7;
      case 7: {
        if (tag == 56) {
         parse_max_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
          set_has_max_iter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_lr_policy;
        break;
      }

      // optional string lr_policy = 8;
      case 8: {
        if (tag == 66) {
         parse_lr_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lr_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lr_policy().data(), this->lr_policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lr_policy");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_gamma;
        break;
      }

      // optional float gamma = 9;
      case 9: {
        if (tag == 77) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_power;
        break;
      }

      // optional float power = 10;
      case 10: {
        if (tag == 85) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_momentum;
        break;
      }

      // optional float momentum = 11;
      case 11: {
        if (tag == 93) {
         parse_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
          set_has_momentum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_weight_decay;
        break;
      }

      // optional float weight_decay = 12;
      case 12: {
        if (tag == 101) {
         parse_weight_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_)));
          set_has_weight_decay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_stepsize;
        break;
      }

      // optional int32 stepsize = 13;
      case 13: {
        if (tag == 104) {
         parse_stepsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stepsize_)));
          set_has_stepsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_snapshot;
        break;
      }

      // optional int32 snapshot = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_snapshot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapshot_)));
          set_has_snapshot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_snapshot_prefix;
        break;
      }

      // optional string snapshot_prefix = 15;
      case 15: {
        if (tag == 122) {
         parse_snapshot_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snapshot_prefix().data(), this->snapshot_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "snapshot_prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_snapshot_diff;
        break;
      }

      // optional bool snapshot_diff = 16 [default = false];
      case 16: {
        if (tag == 128) {
         parse_snapshot_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshot_diff_)));
          set_has_snapshot_diff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_solver_mode;
        break;
      }

      // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
      case 17: {
        if (tag == 136) {
         parse_solver_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SolverMode_IsValid(value)) {
            set_solver_mode(static_cast< ::caffe::SolverParameter_SolverMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_device_id;
        break;
      }

      // optional int32 device_id = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_test_compute_loss;
        break;
      }

      // optional bool test_compute_loss = 19 [default = false];
      case 19: {
        if (tag == 152) {
         parse_test_compute_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_compute_loss_)));
          set_has_test_compute_loss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_random_seed;
        break;
      }

      // optional int64 random_seed = 20 [default = -1];
      case 20: {
        if (tag == 160) {
         parse_random_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &random_seed_)));
          set_has_random_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_train_net_param;
        break;
      }

      // optional .caffe.NetParameter train_net_param = 21;
      case 21: {
        if (tag == 170) {
         parse_train_net_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_net_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_test_net_param;
        break;
      }

      // repeated .caffe.NetParameter test_net_param = 22;
      case 22: {
        if (tag == 178) {
         parse_test_net_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_test_net_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_test_net_param;
        if (input->ExpectTag(184)) goto parse_debug_info;
        break;
      }

      // optional bool debug_info = 23 [default = false];
      case 23: {
        if (tag == 184) {
         parse_debug_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
          set_has_debug_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_net;
        break;
      }

      // optional string net = 24;
      case 24: {
        if (tag == 194) {
         parse_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net().data(), this->net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_net_param;
        break;
      }

      // optional .caffe.NetParameter net_param = 25;
      case 25: {
        if (tag == 202) {
         parse_net_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_train_state;
        break;
      }

      // optional .caffe.NetState train_state = 26;
      case 26: {
        if (tag == 210) {
         parse_train_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_test_state;
        break;
      }

      // repeated .caffe.NetState test_state = 27;
      case 27: {
        if (tag == 218) {
         parse_test_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_test_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_test_state;
        if (input->ExpectTag(224)) goto parse_snapshot_after_train;
        break;
      }

      // optional bool snapshot_after_train = 28 [default = true];
      case 28: {
        if (tag == 224) {
         parse_snapshot_after_train:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshot_after_train_)));
          set_has_snapshot_after_train();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_regularization_type;
        break;
      }

      // optional string regularization_type = 29 [default = "L2"];
      case 29: {
        if (tag == 234) {
         parse_regularization_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regularization_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regularization_type().data(), this->regularization_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "regularization_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_solver_type;
        break;
      }

      // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
      case 30: {
        if (tag == 240) {
         parse_solver_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SolverType_IsValid(value)) {
            set_solver_type(static_cast< ::caffe::SolverParameter_SolverType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_delta;
        break;
      }

      // optional float delta = 31 [default = 1e-08];
      case 31: {
        if (tag == 253) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_test_initialization;
        break;
      }

      // optional bool test_initialization = 32 [default = true];
      case 32: {
        if (tag == 256) {
         parse_test_initialization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_initialization_)));
          set_has_test_initialization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_average_loss;
        break;
      }

      // optional int32 average_loss = 33 [default = 1];
      case 33: {
        if (tag == 264) {
         parse_average_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &average_loss_)));
          set_has_average_loss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_stepvalue;
        break;
      }

      // repeated int32 stepvalue = 34;
      case 34: {
        if (tag == 272) {
         parse_stepvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 272, input, this->mutable_stepvalue())));
        } else if (tag == 274) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stepvalue())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_stepvalue;
        if (input->ExpectTag(285)) goto parse_clip_gradients;
        break;
      }

      // optional float clip_gradients = 35 [default = -1];
      case 35: {
        if (tag == 285) {
         parse_clip_gradients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clip_gradients_)));
          set_has_clip_gradients();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_iter_size;
        break;
      }

      // optional int32 iter_size = 36 [default = 1];
      case 36: {
        if (tag == 288) {
         parse_iter_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_size_)));
          set_has_iter_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_snapshot_format;
        break;
      }

      // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
      case 37: {
        if (tag == 296) {
         parse_snapshot_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SnapshotFormat_IsValid(value)) {
            set_snapshot_format(static_cast< ::caffe::SolverParameter_SnapshotFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(37, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(309)) goto parse_rms_decay;
        break;
      }

      // optional float rms_decay = 38 [default = 0.99];
      case 38: {
        if (tag == 309) {
         parse_rms_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rms_decay_)));
          set_has_rms_decay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(317)) goto parse_momentum2;
        break;
      }

      // optional float momentum2 = 39 [default = 0.999];
      case 39: {
        if (tag == 317) {
         parse_momentum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum2_)));
          set_has_momentum2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_type;
        break;
      }

      // optional string type = 40 [default = "SGD"];
      case 40: {
        if (tag == 322) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_layer_wise_reduce;
        break;
      }

      // optional bool layer_wise_reduce = 41 [default = true];
      case 41: {
        if (tag == 328) {
         parse_layer_wise_reduce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layer_wise_reduce_)));
          set_has_layer_wise_reduce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SolverParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SolverParameter)
  return false;
#undef DO_
}

void SolverParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SolverParameter)
  // optional string train_net = 1;
  if (has_train_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_net().data(), this->train_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "train_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->train_net(), output);
  }

  // repeated string test_net = 2;
  for (int i = 0; i < this->test_net_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->test_net(i).data(), this->test_net(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "test_net");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->test_net(i), output);
  }

  // repeated int32 test_iter = 3;
  for (int i = 0; i < this->test_iter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->test_iter(i), output);
  }

  // optional int32 test_interval = 4 [default = 0];
  if (has_test_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->test_interval(), output);
  }

  // optional float base_lr = 5;
  if (has_base_lr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->base_lr(), output);
  }

  // optional int32 display = 6;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->display(), output);
  }

  // optional int32 max_iter = 7;
  if (has_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_iter(), output);
  }

  // optional string lr_policy = 8;
  if (has_lr_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lr_policy().data(), this->lr_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lr_policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->lr_policy(), output);
  }

  // optional float gamma = 9;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->gamma(), output);
  }

  // optional float power = 10;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->power(), output);
  }

  // optional float momentum = 11;
  if (has_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->momentum(), output);
  }

  // optional float weight_decay = 12;
  if (has_weight_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->weight_decay(), output);
  }

  // optional int32 stepsize = 13;
  if (has_stepsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->stepsize(), output);
  }

  // optional int32 snapshot = 14 [default = 0];
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->snapshot(), output);
  }

  // optional string snapshot_prefix = 15;
  if (has_snapshot_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snapshot_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->snapshot_prefix(), output);
  }

  // optional bool snapshot_diff = 16 [default = false];
  if (has_snapshot_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->snapshot_diff(), output);
  }

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  if (has_solver_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->solver_mode(), output);
  }

  // optional int32 device_id = 18 [default = 0];
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->device_id(), output);
  }

  // optional bool test_compute_loss = 19 [default = false];
  if (has_test_compute_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->test_compute_loss(), output);
  }

  // optional int64 random_seed = 20 [default = -1];
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->random_seed(), output);
  }

  // optional .caffe.NetParameter train_net_param = 21;
  if (has_train_net_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->train_net_param(), output);
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  for (int i = 0; i < this->test_net_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->test_net_param(i), output);
  }

  // optional bool debug_info = 23 [default = false];
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->debug_info(), output);
  }

  // optional string net = 24;
  if (has_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net().data(), this->net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->net(), output);
  }

  // optional .caffe.NetParameter net_param = 25;
  if (has_net_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->net_param(), output);
  }

  // optional .caffe.NetState train_state = 26;
  if (has_train_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->train_state(), output);
  }

  // repeated .caffe.NetState test_state = 27;
  for (int i = 0; i < this->test_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->test_state(i), output);
  }

  // optional bool snapshot_after_train = 28 [default = true];
  if (has_snapshot_after_train()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->snapshot_after_train(), output);
  }

  // optional string regularization_type = 29 [default = "L2"];
  if (has_regularization_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regularization_type().data(), this->regularization_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regularization_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->regularization_type(), output);
  }

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  if (has_solver_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->solver_type(), output);
  }

  // optional float delta = 31 [default = 1e-08];
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->delta(), output);
  }

  // optional bool test_initialization = 32 [default = true];
  if (has_test_initialization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->test_initialization(), output);
  }

  // optional int32 average_loss = 33 [default = 1];
  if (has_average_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->average_loss(), output);
  }

  // repeated int32 stepvalue = 34;
  for (int i = 0; i < this->stepvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      34, this->stepvalue(i), output);
  }

  // optional float clip_gradients = 35 [default = -1];
  if (has_clip_gradients()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->clip_gradients(), output);
  }

  // optional int32 iter_size = 36 [default = 1];
  if (has_iter_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->iter_size(), output);
  }

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  if (has_snapshot_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->snapshot_format(), output);
  }

  // optional float rms_decay = 38 [default = 0.99];
  if (has_rms_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->rms_decay(), output);
  }

  // optional float momentum2 = 39 [default = 0.999];
  if (has_momentum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->momentum2(), output);
  }

  // optional string type = 40 [default = "SGD"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->type(), output);
  }

  // optional bool layer_wise_reduce = 41 [default = true];
  if (has_layer_wise_reduce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->layer_wise_reduce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SolverParameter)
}

::google::protobuf::uint8* SolverParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SolverParameter)
  // optional string train_net = 1;
  if (has_train_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_net().data(), this->train_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "train_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->train_net(), target);
  }

  // repeated string test_net = 2;
  for (int i = 0; i < this->test_net_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_net(i).data(), this->test_net(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test_net");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->test_net(i), target);
  }

  // repeated int32 test_iter = 3;
  for (int i = 0; i < this->test_iter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->test_iter(i), target);
  }

  // optional int32 test_interval = 4 [default = 0];
  if (has_test_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->test_interval(), target);
  }

  // optional float base_lr = 5;
  if (has_base_lr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->base_lr(), target);
  }

  // optional int32 display = 6;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->display(), target);
  }

  // optional int32 max_iter = 7;
  if (has_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_iter(), target);
  }

  // optional string lr_policy = 8;
  if (has_lr_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lr_policy().data(), this->lr_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lr_policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lr_policy(), target);
  }

  // optional float gamma = 9;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->gamma(), target);
  }

  // optional float power = 10;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->power(), target);
  }

  // optional float momentum = 11;
  if (has_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->momentum(), target);
  }

  // optional float weight_decay = 12;
  if (has_weight_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->weight_decay(), target);
  }

  // optional int32 stepsize = 13;
  if (has_stepsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->stepsize(), target);
  }

  // optional int32 snapshot = 14 [default = 0];
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->snapshot(), target);
  }

  // optional string snapshot_prefix = 15;
  if (has_snapshot_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snapshot_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->snapshot_prefix(), target);
  }

  // optional bool snapshot_diff = 16 [default = false];
  if (has_snapshot_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->snapshot_diff(), target);
  }

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  if (has_solver_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->solver_mode(), target);
  }

  // optional int32 device_id = 18 [default = 0];
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->device_id(), target);
  }

  // optional bool test_compute_loss = 19 [default = false];
  if (has_test_compute_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->test_compute_loss(), target);
  }

  // optional int64 random_seed = 20 [default = -1];
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->random_seed(), target);
  }

  // optional .caffe.NetParameter train_net_param = 21;
  if (has_train_net_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->train_net_param(), target);
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  for (int i = 0; i < this->test_net_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->test_net_param(i), target);
  }

  // optional bool debug_info = 23 [default = false];
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->debug_info(), target);
  }

  // optional string net = 24;
  if (has_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net().data(), this->net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->net(), target);
  }

  // optional .caffe.NetParameter net_param = 25;
  if (has_net_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->net_param(), target);
  }

  // optional .caffe.NetState train_state = 26;
  if (has_train_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->train_state(), target);
  }

  // repeated .caffe.NetState test_state = 27;
  for (int i = 0; i < this->test_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->test_state(i), target);
  }

  // optional bool snapshot_after_train = 28 [default = true];
  if (has_snapshot_after_train()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->snapshot_after_train(), target);
  }

  // optional string regularization_type = 29 [default = "L2"];
  if (has_regularization_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regularization_type().data(), this->regularization_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regularization_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->regularization_type(), target);
  }

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  if (has_solver_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->solver_type(), target);
  }

  // optional float delta = 31 [default = 1e-08];
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->delta(), target);
  }

  // optional bool test_initialization = 32 [default = true];
  if (has_test_initialization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->test_initialization(), target);
  }

  // optional int32 average_loss = 33 [default = 1];
  if (has_average_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->average_loss(), target);
  }

  // repeated int32 stepvalue = 34;
  for (int i = 0; i < this->stepvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(34, this->stepvalue(i), target);
  }

  // optional float clip_gradients = 35 [default = -1];
  if (has_clip_gradients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->clip_gradients(), target);
  }

  // optional int32 iter_size = 36 [default = 1];
  if (has_iter_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->iter_size(), target);
  }

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  if (has_snapshot_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->snapshot_format(), target);
  }

  // optional float rms_decay = 38 [default = 0.99];
  if (has_rms_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->rms_decay(), target);
  }

  // optional float momentum2 = 39 [default = 0.999];
  if (has_momentum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->momentum2(), target);
  }

  // optional string type = 40 [default = "SGD"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->type(), target);
  }

  // optional bool layer_wise_reduce = 41 [default = true];
  if (has_layer_wise_reduce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->layer_wise_reduce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SolverParameter)
  return target;
}

int SolverParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string net = 24;
    if (has_net()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net());
    }

    // optional .caffe.NetParameter net_param = 25;
    if (has_net_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->net_param());
    }

    // optional string train_net = 1;
    if (has_train_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_net());
    }

    // optional .caffe.NetParameter train_net_param = 21;
    if (has_train_net_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->train_net_param());
    }

    // optional .caffe.NetState train_state = 26;
    if (has_train_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->train_state());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 test_interval = 4 [default = 0];
    if (has_test_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_interval());
    }

    // optional bool test_compute_loss = 19 [default = false];
    if (has_test_compute_loss()) {
      total_size += 2 + 1;
    }

    // optional bool test_initialization = 32 [default = true];
    if (has_test_initialization()) {
      total_size += 2 + 1;
    }

    // optional float base_lr = 5;
    if (has_base_lr()) {
      total_size += 1 + 4;
    }

    // optional int32 display = 6;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display());
    }

    // optional int32 average_loss = 33 [default = 1];
    if (has_average_loss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->average_loss());
    }

    // optional int32 max_iter = 7;
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 iter_size = 36 [default = 1];
    if (has_iter_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iter_size());
    }

    // optional string lr_policy = 8;
    if (has_lr_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lr_policy());
    }

    // optional float gamma = 9;
    if (has_gamma()) {
      total_size += 1 + 4;
    }

    // optional float power = 10;
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional float momentum = 11;
    if (has_momentum()) {
      total_size += 1 + 4;
    }

    // optional float weight_decay = 12;
    if (has_weight_decay()) {
      total_size += 1 + 4;
    }

    // optional string regularization_type = 29 [default = "L2"];
    if (has_regularization_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regularization_type());
    }

    // optional int32 stepsize = 13;
    if (has_stepsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stepsize());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional float clip_gradients = 35 [default = -1];
    if (has_clip_gradients()) {
      total_size += 2 + 4;
    }

    // optional int32 snapshot = 14 [default = 0];
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snapshot());
    }

    // optional string snapshot_prefix = 15;
    if (has_snapshot_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot_prefix());
    }

    // optional bool snapshot_diff = 16 [default = false];
    if (has_snapshot_diff()) {
      total_size += 2 + 1;
    }

    // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
    if (has_snapshot_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->snapshot_format());
    }

    // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
    if (has_solver_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_mode());
    }

    // optional int32 device_id = 18 [default = 0];
    if (has_device_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_id());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int64 random_seed = 20 [default = -1];
    if (has_random_seed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->random_seed());
    }

    // optional string type = 40 [default = "SGD"];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float delta = 31 [default = 1e-08];
    if (has_delta()) {
      total_size += 2 + 4;
    }

    // optional float momentum2 = 39 [default = 0.999];
    if (has_momentum2()) {
      total_size += 2 + 4;
    }

    // optional float rms_decay = 38 [default = 0.99];
    if (has_rms_decay()) {
      total_size += 2 + 4;
    }

    // optional bool debug_info = 23 [default = false];
    if (has_debug_info()) {
      total_size += 2 + 1;
    }

    // optional bool snapshot_after_train = 28 [default = true];
    if (has_snapshot_after_train()) {
      total_size += 2 + 1;
    }

    // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
    if (has_solver_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_type());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bool layer_wise_reduce = 41 [default = true];
    if (has_layer_wise_reduce()) {
      total_size += 2 + 1;
    }

  }
  // repeated string test_net = 2;
  total_size += 1 * this->test_net_size();
  for (int i = 0; i < this->test_net_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->test_net(i));
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  total_size += 2 * this->test_net_param_size();
  for (int i = 0; i < this->test_net_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->test_net_param(i));
  }

  // repeated .caffe.NetState test_state = 27;
  total_size += 2 * this->test_state_size();
  for (int i = 0; i < this->test_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->test_state(i));
  }

  // repeated int32 test_iter = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->test_iter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->test_iter(i));
    }
    total_size += 1 * this->test_iter_size() + data_size;
  }

  // repeated int32 stepvalue = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->stepvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stepvalue(i));
    }
    total_size += 2 * this->stepvalue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolverParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolverParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolverParameter::MergeFrom(const SolverParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  test_net_.MergeFrom(from.test_net_);
  test_net_param_.MergeFrom(from.test_net_param_);
  test_state_.MergeFrom(from.test_state_);
  test_iter_.MergeFrom(from.test_iter_);
  stepvalue_.MergeFrom(from.stepvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_net()) {
      set_net(from.net());
    }
    if (from.has_net_param()) {
      mutable_net_param()->::caffe::NetParameter::MergeFrom(from.net_param());
    }
    if (from.has_train_net()) {
      set_train_net(from.train_net());
    }
    if (from.has_train_net_param()) {
      mutable_train_net_param()->::caffe::NetParameter::MergeFrom(from.train_net_param());
    }
    if (from.has_train_state()) {
      mutable_train_state()->::caffe::NetState::MergeFrom(from.train_state());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_test_interval()) {
      set_test_interval(from.test_interval());
    }
    if (from.has_test_compute_loss()) {
      set_test_compute_loss(from.test_compute_loss());
    }
    if (from.has_test_initialization()) {
      set_test_initialization(from.test_initialization());
    }
    if (from.has_base_lr()) {
      set_base_lr(from.base_lr());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_average_loss()) {
      set_average_loss(from.average_loss());
    }
    if (from.has_max_iter()) {
      set_max_iter(from.max_iter());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_iter_size()) {
      set_iter_size(from.iter_size());
    }
    if (from.has_lr_policy()) {
      set_lr_policy(from.lr_policy());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_momentum()) {
      set_momentum(from.momentum());
    }
    if (from.has_weight_decay()) {
      set_weight_decay(from.weight_decay());
    }
    if (from.has_regularization_type()) {
      set_regularization_type(from.regularization_type());
    }
    if (from.has_stepsize()) {
      set_stepsize(from.stepsize());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_clip_gradients()) {
      set_clip_gradients(from.clip_gradients());
    }
    if (from.has_snapshot()) {
      set_snapshot(from.snapshot());
    }
    if (from.has_snapshot_prefix()) {
      set_snapshot_prefix(from.snapshot_prefix());
    }
    if (from.has_snapshot_diff()) {
      set_snapshot_diff(from.snapshot_diff());
    }
    if (from.has_snapshot_format()) {
      set_snapshot_format(from.snapshot_format());
    }
    if (from.has_solver_mode()) {
      set_solver_mode(from.solver_mode());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_momentum2()) {
      set_momentum2(from.momentum2());
    }
    if (from.has_rms_decay()) {
      set_rms_decay(from.rms_decay());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
    if (from.has_snapshot_after_train()) {
      set_snapshot_after_train(from.snapshot_after_train());
    }
    if (from.has_solver_type()) {
      set_solver_type(from.solver_type());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_layer_wise_reduce()) {
      set_layer_wise_reduce(from.layer_wise_reduce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolverParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParameter::CopyFrom(const SolverParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParameter::IsInitialized() const {

  return true;
}

void SolverParameter::Swap(SolverParameter* other) {
  if (other != this) {
    std::swap(net_, other->net_);
    std::swap(net_param_, other->net_param_);
    std::swap(train_net_, other->train_net_);
    test_net_.Swap(&other->test_net_);
    std::swap(train_net_param_, other->train_net_param_);
    test_net_param_.Swap(&other->test_net_param_);
    std::swap(train_state_, other->train_state_);
    test_state_.Swap(&other->test_state_);
    test_iter_.Swap(&other->test_iter_);
    std::swap(test_interval_, other->test_interval_);
    std::swap(test_compute_loss_, other->test_compute_loss_);
    std::swap(test_initialization_, other->test_initialization_);
    std::swap(base_lr_, other->base_lr_);
    std::swap(display_, other->display_);
    std::swap(average_loss_, other->average_loss_);
    std::swap(max_iter_, other->max_iter_);
    std::swap(iter_size_, other->iter_size_);
    std::swap(lr_policy_, other->lr_policy_);
    std::swap(gamma_, other->gamma_);
    std::swap(power_, other->power_);
    std::swap(momentum_, other->momentum_);
    std::swap(weight_decay_, other->weight_decay_);
    std::swap(regularization_type_, other->regularization_type_);
    std::swap(stepsize_, other->stepsize_);
    stepvalue_.Swap(&other->stepvalue_);
    std::swap(clip_gradients_, other->clip_gradients_);
    std::swap(snapshot_, other->snapshot_);
    std::swap(snapshot_prefix_, other->snapshot_prefix_);
    std::swap(snapshot_diff_, other->snapshot_diff_);
    std::swap(snapshot_format_, other->snapshot_format_);
    std::swap(solver_mode_, other->solver_mode_);
    std::swap(device_id_, other->device_id_);
    std::swap(random_seed_, other->random_seed_);
    std::swap(type_, other->type_);
    std::swap(delta_, other->delta_);
    std::swap(momentum2_, other->momentum2_);
    std::swap(rms_decay_, other->rms_decay_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(snapshot_after_train_, other->snapshot_after_train_);
    std::swap(solver_type_, other->solver_type_);
    std::swap(layer_wise_reduce_, other->layer_wise_reduce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolverParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverParameter_descriptor_;
  metadata.reflection = SolverParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SolverState::kIterFieldNumber;
const int SolverState::kLearnedNetFieldNumber;
const int SolverState::kHistoryFieldNumber;
const int SolverState::kCurrentStepFieldNumber;
#endif  // !_MSC_VER

SolverState::SolverState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SolverState)
}

void SolverState::InitAsDefaultInstance() {
}

SolverState::SolverState(const SolverState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SolverState)
}

void SolverState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iter_ = 0;
  learned_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverState::~SolverState() {
  // @@protoc_insertion_point(destructor:caffe.SolverState)
  SharedDtor();
}

void SolverState::SharedDtor() {
  if (learned_net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete learned_net_;
  }
  if (this != default_instance_) {
  }
}

void SolverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverState_descriptor_;
}

const SolverState& SolverState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SolverState* SolverState::default_instance_ = NULL;

SolverState* SolverState::New() const {
  return new SolverState;
}

void SolverState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SolverState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(iter_, current_step_);
    if (has_learned_net()) {
      if (learned_net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        learned_net_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SolverState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iter = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_)));
          set_has_iter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_learned_net;
        break;
      }

      // optional string learned_net = 2;
      case 2: {
        if (tag == 18) {
         parse_learned_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_learned_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->learned_net().data(), this->learned_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "learned_net");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_history;
        break;
      }

      // repeated .caffe.BlobProto history = 3;
      case 3: {
        if (tag == 26) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_history;
        if (input->ExpectTag(32)) goto parse_current_step;
        break;
      }

      // optional int32 current_step = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_current_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_step_)));
          set_has_current_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SolverState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SolverState)
  return false;
#undef DO_
}

void SolverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SolverState)
  // optional int32 iter = 1;
  if (has_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iter(), output);
  }

  // optional string learned_net = 2;
  if (has_learned_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->learned_net().data(), this->learned_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "learned_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->learned_net(), output);
  }

  // repeated .caffe.BlobProto history = 3;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->history(i), output);
  }

  // optional int32 current_step = 4 [default = 0];
  if (has_current_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SolverState)
}

::google::protobuf::uint8* SolverState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SolverState)
  // optional int32 iter = 1;
  if (has_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iter(), target);
  }

  // optional string learned_net = 2;
  if (has_learned_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->learned_net().data(), this->learned_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "learned_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->learned_net(), target);
  }

  // repeated .caffe.BlobProto history = 3;
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->history(i), target);
  }

  // optional int32 current_step = 4 [default = 0];
  if (has_current_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current_step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SolverState)
  return target;
}

int SolverState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iter = 1;
    if (has_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iter());
    }

    // optional string learned_net = 2;
    if (has_learned_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->learned_net());
    }

    // optional int32 current_step = 4 [default = 0];
    if (has_current_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_step());
    }

  }
  // repeated .caffe.BlobProto history = 3;
  total_size += 1 * this->history_size();
  for (int i = 0; i < this->history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolverState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolverState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolverState::MergeFrom(const SolverState& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_.MergeFrom(from.history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iter()) {
      set_iter(from.iter());
    }
    if (from.has_learned_net()) {
      set_learned_net(from.learned_net());
    }
    if (from.has_current_step()) {
      set_current_step(from.current_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolverState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverState::CopyFrom(const SolverState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverState::IsInitialized() const {

  return true;
}

void SolverState::Swap(SolverState* other) {
  if (other != this) {
    std::swap(iter_, other->iter_);
    std::swap(learned_net_, other->learned_net_);
    history_.Swap(&other->history_);
    std::swap(current_step_, other->current_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolverState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverState_descriptor_;
  metadata.reflection = SolverState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetState::kPhaseFieldNumber;
const int NetState::kLevelFieldNumber;
const int NetState::kStageFieldNumber;
#endif  // !_MSC_VER

NetState::NetState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetState)
}

void NetState::InitAsDefaultInstance() {
}

NetState::NetState(const NetState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.NetState)
}

void NetState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  phase_ = 1;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetState::~NetState() {
  // @@protoc_insertion_point(destructor:caffe.NetState)
  SharedDtor();
}

void NetState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetState_descriptor_;
}

const NetState& NetState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

NetState* NetState::default_instance_ = NULL;

NetState* NetState::New() const {
  return new NetState;
}

void NetState::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    phase_ = 1;
    level_ = 0;
  }
  stage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.Phase phase = 1 [default = TEST];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stage;
        break;
      }

      // repeated string stage = 3;
      case 3: {
        if (tag == 26) {
         parse_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage(this->stage_size() - 1).data(),
            this->stage(this->stage_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stage;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetState)
  return false;
#undef DO_
}

void NetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetState)
  // optional .caffe.Phase phase = 1 [default = TEST];
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phase(), output);
  }

  // optional int32 level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // repeated string stage = 3;
  for (int i = 0; i < this->stage_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->stage(i).data(), this->stage(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stage(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetState)
}

::google::protobuf::uint8* NetState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetState)
  // optional .caffe.Phase phase = 1 [default = TEST];
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phase(), target);
  }

  // optional int32 level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // repeated string stage = 3;
  for (int i = 0; i < this->stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->stage(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetState)
  return target;
}

int NetState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe.Phase phase = 1 [default = TEST];
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

    // optional int32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated string stage = 3;
  total_size += 1 * this->stage_size();
  for (int i = 0; i < this->stage_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetState::MergeFrom(const NetState& from) {
  GOOGLE_CHECK_NE(&from, this);
  stage_.MergeFrom(from.stage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phase()) {
      set_phase(from.phase());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetState::CopyFrom(const NetState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetState::IsInitialized() const {

  return true;
}

void NetState::Swap(NetState* other) {
  if (other != this) {
    std::swap(phase_, other->phase_);
    std::swap(level_, other->level_);
    stage_.Swap(&other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetState_descriptor_;
  metadata.reflection = NetState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetStateRule::kPhaseFieldNumber;
const int NetStateRule::kMinLevelFieldNumber;
const int NetStateRule::kMaxLevelFieldNumber;
const int NetStateRule::kStageFieldNumber;
const int NetStateRule::kNotStageFieldNumber;
#endif  // !_MSC_VER

NetStateRule::NetStateRule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetStateRule)
}

void NetStateRule::InitAsDefaultInstance() {
}

NetStateRule::NetStateRule(const NetStateRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.NetStateRule)
}

void NetStateRule::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  phase_ = 0;
  min_level_ = 0;
  max_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetStateRule::~NetStateRule() {
  // @@protoc_insertion_point(destructor:caffe.NetStateRule)
  SharedDtor();
}

void NetStateRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetStateRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetStateRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetStateRule_descriptor_;
}

const NetStateRule& NetStateRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

NetStateRule* NetStateRule::default_instance_ = NULL;

NetStateRule* NetStateRule::New() const {
  return new NetStateRule;
}

void NetStateRule::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NetStateRule*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(phase_, min_level_);
    max_level_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  stage_.Clear();
  not_stage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetStateRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetStateRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.Phase phase = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_level;
        break;
      }

      // optional int32 min_level = 2;
      case 2: {
        if (tag == 16) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_level;
        break;
      }

      // optional int32 max_level = 3;
      case 3: {
        if (tag == 24) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stage;
        break;
      }

      // repeated string stage = 4;
      case 4: {
        if (tag == 34) {
         parse_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage(this->stage_size() - 1).data(),
            this->stage(this->stage_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stage;
        if (input->ExpectTag(42)) goto parse_not_stage;
        break;
      }

      // repeated string not_stage = 5;
      case 5: {
        if (tag == 42) {
         parse_not_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_not_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->not_stage(this->not_stage_size() - 1).data(),
            this->not_stage(this->not_stage_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "not_stage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_not_stage;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetStateRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetStateRule)
  return false;
#undef DO_
}

void NetStateRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetStateRule)
  // optional .caffe.Phase phase = 1;
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phase(), output);
  }

  // optional int32 min_level = 2;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_level(), output);
  }

  // optional int32 max_level = 3;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_level(), output);
  }

  // repeated string stage = 4;
  for (int i = 0; i < this->stage_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->stage(i).data(), this->stage(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stage(i), output);
  }

  // repeated string not_stage = 5;
  for (int i = 0; i < this->not_stage_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->not_stage(i).data(), this->not_stage(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "not_stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->not_stage(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetStateRule)
}

::google::protobuf::uint8* NetStateRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetStateRule)
  // optional .caffe.Phase phase = 1;
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phase(), target);
  }

  // optional int32 min_level = 2;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_level(), target);
  }

  // optional int32 max_level = 3;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_level(), target);
  }

  // repeated string stage = 4;
  for (int i = 0; i < this->stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), this->stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->stage(i), target);
  }

  // repeated string not_stage = 5;
  for (int i = 0; i < this->not_stage_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_stage(i).data(), this->not_stage(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "not_stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->not_stage(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetStateRule)
  return target;
}

int NetStateRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe.Phase phase = 1;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

    // optional int32 min_level = 2;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // optional int32 max_level = 3;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

  }
  // repeated string stage = 4;
  total_size += 1 * this->stage_size();
  for (int i = 0; i < this->stage_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stage(i));
  }

  // repeated string not_stage = 5;
  total_size += 1 * this->not_stage_size();
  for (int i = 0; i < this->not_stage_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->not_stage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetStateRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetStateRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetStateRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetStateRule::MergeFrom(const NetStateRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  stage_.MergeFrom(from.stage_);
  not_stage_.MergeFrom(from.not_stage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phase()) {
      set_phase(from.phase());
    }
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetStateRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetStateRule::CopyFrom(const NetStateRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetStateRule::IsInitialized() const {

  return true;
}

void NetStateRule::Swap(NetStateRule* other) {
  if (other != this) {
    std::swap(phase_, other->phase_);
    std::swap(min_level_, other->min_level_);
    std::swap(max_level_, other->max_level_);
    stage_.Swap(&other->stage_);
    not_stage_.Swap(&other->not_stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetStateRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetStateRule_descriptor_;
  metadata.reflection = NetStateRule_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamSpec_DimCheckMode_descriptor_;
}
bool ParamSpec_DimCheckMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ParamSpec_DimCheckMode ParamSpec::STRICT;
const ParamSpec_DimCheckMode ParamSpec::PERMISSIVE;
const ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MIN;
const ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MAX;
const int ParamSpec::DimCheckMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ParamSpec::kNameFieldNumber;
const int ParamSpec::kShareModeFieldNumber;
const int ParamSpec::kLrMultFieldNumber;
const int ParamSpec::kDecayMultFieldNumber;
#endif  // !_MSC_VER

ParamSpec::ParamSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ParamSpec)
}

void ParamSpec::InitAsDefaultInstance() {
}

ParamSpec::ParamSpec(const ParamSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ParamSpec)
}

void ParamSpec::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_mode_ = 0;
  lr_mult_ = 1;
  decay_mult_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParamSpec::~ParamSpec() {
  // @@protoc_insertion_point(destructor:caffe.ParamSpec)
  SharedDtor();
}

void ParamSpec::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ParamSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamSpec_descriptor_;
}

const ParamSpec& ParamSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ParamSpec* ParamSpec::default_instance_ = NULL;

ParamSpec* ParamSpec::New() const {
  return new ParamSpec;
}

void ParamSpec::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    share_mode_ = 0;
    lr_mult_ = 1;
    decay_mult_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParamSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ParamSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_share_mode;
        break;
      }

      // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
      case 2: {
        if (tag == 16) {
         parse_share_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ParamSpec_DimCheckMode_IsValid(value)) {
            set_share_mode(static_cast< ::caffe::ParamSpec_DimCheckMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_lr_mult;
        break;
      }

      // optional float lr_mult = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_lr_mult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lr_mult_)));
          set_has_lr_mult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_decay_mult;
        break;
      }

      // optional float decay_mult = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_decay_mult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_mult_)));
          set_has_decay_mult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ParamSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ParamSpec)
  return false;
#undef DO_
}

void ParamSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ParamSpec)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  if (has_share_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->share_mode(), output);
  }

  // optional float lr_mult = 3 [default = 1];
  if (has_lr_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lr_mult(), output);
  }

  // optional float decay_mult = 4 [default = 1];
  if (has_decay_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->decay_mult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ParamSpec)
}

::google::protobuf::uint8* ParamSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ParamSpec)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  if (has_share_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->share_mode(), target);
  }

  // optional float lr_mult = 3 [default = 1];
  if (has_lr_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lr_mult(), target);
  }

  // optional float decay_mult = 4 [default = 1];
  if (has_decay_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->decay_mult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ParamSpec)
  return target;
}

int ParamSpec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
    if (has_share_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->share_mode());
    }

    // optional float lr_mult = 3 [default = 1];
    if (has_lr_mult()) {
      total_size += 1 + 4;
    }

    // optional float decay_mult = 4 [default = 1];
    if (has_decay_mult()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParamSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParamSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParamSpec::MergeFrom(const ParamSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_share_mode()) {
      set_share_mode(from.share_mode());
    }
    if (from.has_lr_mult()) {
      set_lr_mult(from.lr_mult());
    }
    if (from.has_decay_mult()) {
      set_decay_mult(from.decay_mult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParamSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamSpec::CopyFrom(const ParamSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamSpec::IsInitialized() const {

  return true;
}

void ParamSpec::Swap(ParamSpec* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(share_mode_, other->share_mode_);
    std::swap(lr_mult_, other->lr_mult_);
    std::swap(decay_mult_, other->decay_mult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParamSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParamSpec_descriptor_;
  metadata.reflection = ParamSpec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LayerParameter::kNameFieldNumber;
const int LayerParameter::kTypeFieldNumber;
const int LayerParameter::kBottomFieldNumber;
const int LayerParameter::kTopFieldNumber;
const int LayerParameter::kPhaseFieldNumber;
const int LayerParameter::kLossWeightFieldNumber;
const int LayerParameter::kParamFieldNumber;
const int LayerParameter::kBlobsFieldNumber;
const int LayerParameter::kPropagateDownFieldNumber;
const int LayerParameter::kIncludeFieldNumber;
const int LayerParameter::kExcludeFieldNumber;
const int LayerParameter::kTransformParamFieldNumber;
const int LayerParameter::kLossParamFieldNumber;
const int LayerParameter::kAccuracyParamFieldNumber;
const int LayerParameter::kArgmaxParamFieldNumber;
const int LayerParameter::kBatchNormParamFieldNumber;
const int LayerParameter::kBiasParamFieldNumber;
const int LayerParameter::kConcatParamFieldNumber;
const int LayerParameter::kContrastiveLossParamFieldNumber;
const int LayerParameter::kConvolutionParamFieldNumber;
const int LayerParameter::kCropParamFieldNumber;
const int LayerParameter::kDataParamFieldNumber;
const int LayerParameter::kDropoutParamFieldNumber;
const int LayerParameter::kDummyDataParamFieldNumber;
const int LayerParameter::kEltwiseParamFieldNumber;
const int LayerParameter::kEluParamFieldNumber;
const int LayerParameter::kEmbedParamFieldNumber;
const int LayerParameter::kExpParamFieldNumber;
const int LayerParameter::kFlattenParamFieldNumber;
const int LayerParameter::kHdf5DataParamFieldNumber;
const int LayerParameter::kHdf5OutputParamFieldNumber;
const int LayerParameter::kHingeLossParamFieldNumber;
const int LayerParameter::kImageDataParamFieldNumber;
const int LayerParameter::kInfogainLossParamFieldNumber;
const int LayerParameter::kInnerProductParamFieldNumber;
const int LayerParameter::kInputParamFieldNumber;
const int LayerParameter::kLogParamFieldNumber;
const int LayerParameter::kLrnParamFieldNumber;
const int LayerParameter::kMemoryDataParamFieldNumber;
const int LayerParameter::kMvnParamFieldNumber;
const int LayerParameter::kParameterParamFieldNumber;
const int LayerParameter::kPoolingParamFieldNumber;
const int LayerParameter::kPowerParamFieldNumber;
const int LayerParameter::kPreluParamFieldNumber;
const int LayerParameter::kPythonParamFieldNumber;
const int LayerParameter::kRecurrentParamFieldNumber;
const int LayerParameter::kReductionParamFieldNumber;
const int LayerParameter::kReluParamFieldNumber;
const int LayerParameter::kReshapeParamFieldNumber;
const int LayerParameter::kScaleParamFieldNumber;
const int LayerParameter::kSigmoidParamFieldNumber;
const int LayerParameter::kSoftmaxParamFieldNumber;
const int LayerParameter::kSppParamFieldNumber;
const int LayerParameter::kSliceParamFieldNumber;
const int LayerParameter::kTanhParamFieldNumber;
const int LayerParameter::kThresholdParamFieldNumber;
const int LayerParameter::kTileParamFieldNumber;
const int LayerParameter::kWindowDataParamFieldNumber;
const int LayerParameter::kInput3DParamFieldNumber;
const int LayerParameter::kClipByValueParamFieldNumber;
const int LayerParameter::kPooling3DParamFieldNumber;
const int LayerParameter::kUpsampling3DParamFieldNumber;
const int LayerParameter::kDualUpdateParamFieldNumber;
const int LayerParameter::kPrimalUpdateParamFieldNumber;
const int LayerParameter::kLagrangianUpdateParamFieldNumber;
const int LayerParameter::kPrimalDualCrossEntropyLossParamFieldNumber;
const int LayerParameter::kDenseGridDataWriteParamFieldNumber;
const int LayerParameter::kAccuracy3DreconstructionParamFieldNumber;
const int LayerParameter::kInputPrimalDualParamFieldNumber;
const int LayerParameter::kScalingParamFieldNumber;
const int LayerParameter::kTestInput3DParamFieldNumber;
const int LayerParameter::kPrimalDualWeightedCrossEntropyLossParamFieldNumber;
const int LayerParameter::kOctDualUpdateParamFieldNumber;
const int LayerParameter::kOctPrimalUpdateParamFieldNumber;
const int LayerParameter::kOctPropParamFieldNumber;
const int LayerParameter::kOctPropLossPrepParamFieldNumber;
const int LayerParameter::kOctLevelSamplingParamFieldNumber;
const int LayerParameter::kOctUpsamplingParamFieldNumber;
const int LayerParameter::kOctConvParamFieldNumber;
const int LayerParameter::kOctInputParamFieldNumber;
const int LayerParameter::kOctConvertParamFieldNumber;
const int LayerParameter::kOctInputPrimalDualParamFieldNumber;
const int LayerParameter::kOctAccuracy3DreconstructionParamFieldNumber;
const int LayerParameter::kOctOutputParamFieldNumber;
const int LayerParameter::kDenseConvertParamFieldNumber;
const int LayerParameter::kOctSegLossPrepParamFieldNumber;
const int LayerParameter::kSegCrossEntropyLossParamFieldNumber;
#endif  // !_MSC_VER

LayerParameter::LayerParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LayerParameter)
}

void LayerParameter::InitAsDefaultInstance() {
  transform_param_ = const_cast< ::caffe::TransformationParameter*>(&::caffe::TransformationParameter::default_instance());
  loss_param_ = const_cast< ::caffe::LossParameter*>(&::caffe::LossParameter::default_instance());
  accuracy_param_ = const_cast< ::caffe::AccuracyParameter*>(&::caffe::AccuracyParameter::default_instance());
  argmax_param_ = const_cast< ::caffe::ArgMaxParameter*>(&::caffe::ArgMaxParameter::default_instance());
  batch_norm_param_ = const_cast< ::caffe::BatchNormParameter*>(&::caffe::BatchNormParameter::default_instance());
  bias_param_ = const_cast< ::caffe::BiasParameter*>(&::caffe::BiasParameter::default_instance());
  concat_param_ = const_cast< ::caffe::ConcatParameter*>(&::caffe::ConcatParameter::default_instance());
  contrastive_loss_param_ = const_cast< ::caffe::ContrastiveLossParameter*>(&::caffe::ContrastiveLossParameter::default_instance());
  convolution_param_ = const_cast< ::caffe::ConvolutionParameter*>(&::caffe::ConvolutionParameter::default_instance());
  crop_param_ = const_cast< ::caffe::CropParameter*>(&::caffe::CropParameter::default_instance());
  data_param_ = const_cast< ::caffe::DataParameter*>(&::caffe::DataParameter::default_instance());
  dropout_param_ = const_cast< ::caffe::DropoutParameter*>(&::caffe::DropoutParameter::default_instance());
  dummy_data_param_ = const_cast< ::caffe::DummyDataParameter*>(&::caffe::DummyDataParameter::default_instance());
  eltwise_param_ = const_cast< ::caffe::EltwiseParameter*>(&::caffe::EltwiseParameter::default_instance());
  elu_param_ = const_cast< ::caffe::ELUParameter*>(&::caffe::ELUParameter::default_instance());
  embed_param_ = const_cast< ::caffe::EmbedParameter*>(&::caffe::EmbedParameter::default_instance());
  exp_param_ = const_cast< ::caffe::ExpParameter*>(&::caffe::ExpParameter::default_instance());
  flatten_param_ = const_cast< ::caffe::FlattenParameter*>(&::caffe::FlattenParameter::default_instance());
  hdf5_data_param_ = const_cast< ::caffe::HDF5DataParameter*>(&::caffe::HDF5DataParameter::default_instance());
  hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(&::caffe::HDF5OutputParameter::default_instance());
  hinge_loss_param_ = const_cast< ::caffe::HingeLossParameter*>(&::caffe::HingeLossParameter::default_instance());
  image_data_param_ = const_cast< ::caffe::ImageDataParameter*>(&::caffe::ImageDataParameter::default_instance());
  infogain_loss_param_ = const_cast< ::caffe::InfogainLossParameter*>(&::caffe::InfogainLossParameter::default_instance());
  inner_product_param_ = const_cast< ::caffe::InnerProductParameter*>(&::caffe::InnerProductParameter::default_instance());
  input_param_ = const_cast< ::caffe::InputParameter*>(&::caffe::InputParameter::default_instance());
  log_param_ = const_cast< ::caffe::LogParameter*>(&::caffe::LogParameter::default_instance());
  lrn_param_ = const_cast< ::caffe::LRNParameter*>(&::caffe::LRNParameter::default_instance());
  memory_data_param_ = const_cast< ::caffe::MemoryDataParameter*>(&::caffe::MemoryDataParameter::default_instance());
  mvn_param_ = const_cast< ::caffe::MVNParameter*>(&::caffe::MVNParameter::default_instance());
  parameter_param_ = const_cast< ::caffe::ParameterParameter*>(&::caffe::ParameterParameter::default_instance());
  pooling_param_ = const_cast< ::caffe::PoolingParameter*>(&::caffe::PoolingParameter::default_instance());
  power_param_ = const_cast< ::caffe::PowerParameter*>(&::caffe::PowerParameter::default_instance());
  prelu_param_ = const_cast< ::caffe::PReLUParameter*>(&::caffe::PReLUParameter::default_instance());
  python_param_ = const_cast< ::caffe::PythonParameter*>(&::caffe::PythonParameter::default_instance());
  recurrent_param_ = const_cast< ::caffe::RecurrentParameter*>(&::caffe::RecurrentParameter::default_instance());
  reduction_param_ = const_cast< ::caffe::ReductionParameter*>(&::caffe::ReductionParameter::default_instance());
  relu_param_ = const_cast< ::caffe::ReLUParameter*>(&::caffe::ReLUParameter::default_instance());
  reshape_param_ = const_cast< ::caffe::ReshapeParameter*>(&::caffe::ReshapeParameter::default_instance());
  scale_param_ = const_cast< ::caffe::ScaleParameter*>(&::caffe::ScaleParameter::default_instance());
  sigmoid_param_ = const_cast< ::caffe::SigmoidParameter*>(&::caffe::SigmoidParameter::default_instance());
  softmax_param_ = const_cast< ::caffe::SoftmaxParameter*>(&::caffe::SoftmaxParameter::default_instance());
  spp_param_ = const_cast< ::caffe::SPPParameter*>(&::caffe::SPPParameter::default_instance());
  slice_param_ = const_cast< ::caffe::SliceParameter*>(&::caffe::SliceParameter::default_instance());
  tanh_param_ = const_cast< ::caffe::TanHParameter*>(&::caffe::TanHParameter::default_instance());
  threshold_param_ = const_cast< ::caffe::ThresholdParameter*>(&::caffe::ThresholdParameter::default_instance());
  tile_param_ = const_cast< ::caffe::TileParameter*>(&::caffe::TileParameter::default_instance());
  window_data_param_ = const_cast< ::caffe::WindowDataParameter*>(&::caffe::WindowDataParameter::default_instance());
  input3d_param_ = const_cast< ::caffe::Input3DParameter*>(&::caffe::Input3DParameter::default_instance());
  clip_by_value_param_ = const_cast< ::caffe::ClipByValueParameter*>(&::caffe::ClipByValueParameter::default_instance());
  pooling3d_param_ = const_cast< ::caffe::Pooling3DParameter*>(&::caffe::Pooling3DParameter::default_instance());
  upsampling3d_param_ = const_cast< ::caffe::UpSampling3DParameter*>(&::caffe::UpSampling3DParameter::default_instance());
  dual_update_param_ = const_cast< ::caffe::DualUpdateParameter*>(&::caffe::DualUpdateParameter::default_instance());
  primal_update_param_ = const_cast< ::caffe::PrimalUpdateParameter*>(&::caffe::PrimalUpdateParameter::default_instance());
  lagrangian_update_param_ = const_cast< ::caffe::LagrangianUpdateParameter*>(&::caffe::LagrangianUpdateParameter::default_instance());
  primal_dual_cross_entropy_loss_param_ = const_cast< ::caffe::PrimalDualCrossEntropyLossParameter*>(&::caffe::PrimalDualCrossEntropyLossParameter::default_instance());
  dense_grid_data_write_param_ = const_cast< ::caffe::DenseGridDataWriteParameter*>(&::caffe::DenseGridDataWriteParameter::default_instance());
  accuracy_3dreconstruction_param_ = const_cast< ::caffe::Accuracy3DReconstructionParameter*>(&::caffe::Accuracy3DReconstructionParameter::default_instance());
  input_primal_dual_param_ = const_cast< ::caffe::InputPrimalDualParameter*>(&::caffe::InputPrimalDualParameter::default_instance());
  scaling_param_ = const_cast< ::caffe::ScalingParameter*>(&::caffe::ScalingParameter::default_instance());
  test_input3d_param_ = const_cast< ::caffe::TestInput3DParameter*>(&::caffe::TestInput3DParameter::default_instance());
  primal_dual_weighted_cross_entropy_loss_param_ = const_cast< ::caffe::PrimalDualWeightedCrossEntropyLossParameter*>(&::caffe::PrimalDualWeightedCrossEntropyLossParameter::default_instance());
  oct_dual_update_param_ = const_cast< ::caffe::OctDualUpdateParameter*>(&::caffe::OctDualUpdateParameter::default_instance());
  oct_primal_update_param_ = const_cast< ::caffe::OctPrimalUpdateParameter*>(&::caffe::OctPrimalUpdateParameter::default_instance());
  oct_prop_param_ = const_cast< ::caffe::OctPropParameter*>(&::caffe::OctPropParameter::default_instance());
  oct_prop_loss_prep_param_ = const_cast< ::caffe::OctPropLossPrepParameter*>(&::caffe::OctPropLossPrepParameter::default_instance());
  oct_level_sampling_param_ = const_cast< ::caffe::OctLevelSamplingParameter*>(&::caffe::OctLevelSamplingParameter::default_instance());
  oct_upsampling_param_ = const_cast< ::caffe::OctUpSamplingParameter*>(&::caffe::OctUpSamplingParameter::default_instance());
  oct_conv_param_ = const_cast< ::caffe::OctConvParameter*>(&::caffe::OctConvParameter::default_instance());
  oct_input_param_ = const_cast< ::caffe::OctInputParameter*>(&::caffe::OctInputParameter::default_instance());
  oct_convert_param_ = const_cast< ::caffe::OctConvertParameter*>(&::caffe::OctConvertParameter::default_instance());
  oct_input_primal_dual_param_ = const_cast< ::caffe::OctInputPrimalDualParameter*>(&::caffe::OctInputPrimalDualParameter::default_instance());
  oct_accuracy_3dreconstruction_param_ = const_cast< ::caffe::OctAccuracy3DReconstructionParameter*>(&::caffe::OctAccuracy3DReconstructionParameter::default_instance());
  oct_output_param_ = const_cast< ::caffe::OctOutputParameter*>(&::caffe::OctOutputParameter::default_instance());
  dense_convert_param_ = const_cast< ::caffe::DenseConvertParameter*>(&::caffe::DenseConvertParameter::default_instance());
  oct_seg_loss_prep_param_ = const_cast< ::caffe::OctSegLossPrepParameter*>(&::caffe::OctSegLossPrepParameter::default_instance());
  seg_cross_entropy_loss_param_ = const_cast< ::caffe::SegCrossEntropyLossParameter*>(&::caffe::SegCrossEntropyLossParameter::default_instance());
}

LayerParameter::LayerParameter(const LayerParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LayerParameter)
}

void LayerParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phase_ = 0;
  transform_param_ = NULL;
  loss_param_ = NULL;
  accuracy_param_ = NULL;
  argmax_param_ = NULL;
  batch_norm_param_ = NULL;
  bias_param_ = NULL;
  concat_param_ = NULL;
  contrastive_loss_param_ = NULL;
  convolution_param_ = NULL;
  crop_param_ = NULL;
  data_param_ = NULL;
  dropout_param_ = NULL;
  dummy_data_param_ = NULL;
  eltwise_param_ = NULL;
  elu_param_ = NULL;
  embed_param_ = NULL;
  exp_param_ = NULL;
  flatten_param_ = NULL;
  hdf5_data_param_ = NULL;
  hdf5_output_param_ = NULL;
  hinge_loss_param_ = NULL;
  image_data_param_ = NULL;
  infogain_loss_param_ = NULL;
  inner_product_param_ = NULL;
  input_param_ = NULL;
  log_param_ = NULL;
  lrn_param_ = NULL;
  memory_data_param_ = NULL;
  mvn_param_ = NULL;
  parameter_param_ = NULL;
  pooling_param_ = NULL;
  power_param_ = NULL;
  prelu_param_ = NULL;
  python_param_ = NULL;
  recurrent_param_ = NULL;
  reduction_param_ = NULL;
  relu_param_ = NULL;
  reshape_param_ = NULL;
  scale_param_ = NULL;
  sigmoid_param_ = NULL;
  softmax_param_ = NULL;
  spp_param_ = NULL;
  slice_param_ = NULL;
  tanh_param_ = NULL;
  threshold_param_ = NULL;
  tile_param_ = NULL;
  window_data_param_ = NULL;
  input3d_param_ = NULL;
  clip_by_value_param_ = NULL;
  pooling3d_param_ = NULL;
  upsampling3d_param_ = NULL;
  dual_update_param_ = NULL;
  primal_update_param_ = NULL;
  lagrangian_update_param_ = NULL;
  primal_dual_cross_entropy_loss_param_ = NULL;
  dense_grid_data_write_param_ = NULL;
  accuracy_3dreconstruction_param_ = NULL;
  input_primal_dual_param_ = NULL;
  scaling_param_ = NULL;
  test_input3d_param_ = NULL;
  primal_dual_weighted_cross_entropy_loss_param_ = NULL;
  oct_dual_update_param_ = NULL;
  oct_primal_update_param_ = NULL;
  oct_prop_param_ = NULL;
  oct_prop_loss_prep_param_ = NULL;
  oct_level_sampling_param_ = NULL;
  oct_upsampling_param_ = NULL;
  oct_conv_param_ = NULL;
  oct_input_param_ = NULL;
  oct_convert_param_ = NULL;
  oct_input_primal_dual_param_ = NULL;
  oct_accuracy_3dreconstruction_param_ = NULL;
  oct_output_param_ = NULL;
  dense_convert_param_ = NULL;
  oct_seg_loss_prep_param_ = NULL;
  seg_cross_entropy_loss_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerParameter::~LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.LayerParameter)
  SharedDtor();
}

void LayerParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
    delete transform_param_;
    delete loss_param_;
    delete accuracy_param_;
    delete argmax_param_;
    delete batch_norm_param_;
    delete bias_param_;
    delete concat_param_;
    delete contrastive_loss_param_;
    delete convolution_param_;
    delete crop_param_;
    delete data_param_;
    delete dropout_param_;
    delete dummy_data_param_;
    delete eltwise_param_;
    delete elu_param_;
    delete embed_param_;
    delete exp_param_;
    delete flatten_param_;
    delete hdf5_data_param_;
    delete hdf5_output_param_;
    delete hinge_loss_param_;
    delete image_data_param_;
    delete infogain_loss_param_;
    delete inner_product_param_;
    delete input_param_;
    delete log_param_;
    delete lrn_param_;
    delete memory_data_param_;
    delete mvn_param_;
    delete parameter_param_;
    delete pooling_param_;
    delete power_param_;
    delete prelu_param_;
    delete python_param_;
    delete recurrent_param_;
    delete reduction_param_;
    delete relu_param_;
    delete reshape_param_;
    delete scale_param_;
    delete sigmoid_param_;
    delete softmax_param_;
    delete spp_param_;
    delete slice_param_;
    delete tanh_param_;
    delete threshold_param_;
    delete tile_param_;
    delete window_data_param_;
    delete input3d_param_;
    delete clip_by_value_param_;
    delete pooling3d_param_;
    delete upsampling3d_param_;
    delete dual_update_param_;
    delete primal_update_param_;
    delete lagrangian_update_param_;
    delete primal_dual_cross_entropy_loss_param_;
    delete dense_grid_data_write_param_;
    delete accuracy_3dreconstruction_param_;
    delete input_primal_dual_param_;
    delete scaling_param_;
    delete test_input3d_param_;
    delete primal_dual_weighted_cross_entropy_loss_param_;
    delete oct_dual_update_param_;
    delete oct_primal_update_param_;
    delete oct_prop_param_;
    delete oct_prop_loss_prep_param_;
    delete oct_level_sampling_param_;
    delete oct_upsampling_param_;
    delete oct_conv_param_;
    delete oct_input_param_;
    delete oct_convert_param_;
    delete oct_input_primal_dual_param_;
    delete oct_accuracy_3dreconstruction_param_;
    delete oct_output_param_;
    delete dense_convert_param_;
    delete oct_seg_loss_prep_param_;
    delete seg_cross_entropy_loss_param_;
  }
}

void LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerParameter_descriptor_;
}

const LayerParameter& LayerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LayerParameter* LayerParameter::default_instance_ = NULL;

LayerParameter* LayerParameter::New() const {
  return new LayerParameter;
}

void LayerParameter::Clear() {
  if (_has_bits_[0 / 32] & 19) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    phase_ = 0;
  }
  if (_has_bits_[8 / 32] & 63488) {
    if (has_transform_param()) {
      if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
    }
    if (has_loss_param()) {
      if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
    }
    if (has_accuracy_param()) {
      if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
    }
    if (has_argmax_param()) {
      if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
    }
    if (has_batch_norm_param()) {
      if (batch_norm_param_ != NULL) batch_norm_param_->::caffe::BatchNormParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_bias_param()) {
      if (bias_param_ != NULL) bias_param_->::caffe::BiasParameter::Clear();
    }
    if (has_concat_param()) {
      if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
    }
    if (has_contrastive_loss_param()) {
      if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
    }
    if (has_convolution_param()) {
      if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
    }
    if (has_crop_param()) {
      if (crop_param_ != NULL) crop_param_->::caffe::CropParameter::Clear();
    }
    if (has_data_param()) {
      if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
    }
    if (has_dropout_param()) {
      if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
    }
    if (has_dummy_data_param()) {
      if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has_eltwise_param()) {
      if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
    }
    if (has_elu_param()) {
      if (elu_param_ != NULL) elu_param_->::caffe::ELUParameter::Clear();
    }
    if (has_embed_param()) {
      if (embed_param_ != NULL) embed_param_->::caffe::EmbedParameter::Clear();
    }
    if (has_exp_param()) {
      if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
    }
    if (has_flatten_param()) {
      if (flatten_param_ != NULL) flatten_param_->::caffe::FlattenParameter::Clear();
    }
    if (has_hdf5_data_param()) {
      if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
    }
    if (has_hdf5_output_param()) {
      if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
    if (has_hinge_loss_param()) {
      if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_image_data_param()) {
      if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
    }
    if (has_infogain_loss_param()) {
      if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
    }
    if (has_inner_product_param()) {
      if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
    }
    if (has_input_param()) {
      if (input_param_ != NULL) input_param_->::caffe::InputParameter::Clear();
    }
    if (has_log_param()) {
      if (log_param_ != NULL) log_param_->::caffe::LogParameter::Clear();
    }
    if (has_lrn_param()) {
      if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
    }
    if (has_memory_data_param()) {
      if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
    }
    if (has_mvn_param()) {
      if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    if (has_parameter_param()) {
      if (parameter_param_ != NULL) parameter_param_->::caffe::ParameterParameter::Clear();
    }
    if (has_pooling_param()) {
      if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
    }
    if (has_power_param()) {
      if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
    }
    if (has_prelu_param()) {
      if (prelu_param_ != NULL) prelu_param_->::caffe::PReLUParameter::Clear();
    }
    if (has_python_param()) {
      if (python_param_ != NULL) python_param_->::caffe::PythonParameter::Clear();
    }
    if (has_recurrent_param()) {
      if (recurrent_param_ != NULL) recurrent_param_->::caffe::RecurrentParameter::Clear();
    }
    if (has_reduction_param()) {
      if (reduction_param_ != NULL) reduction_param_->::caffe::ReductionParameter::Clear();
    }
    if (has_relu_param()) {
      if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    if (has_reshape_param()) {
      if (reshape_param_ != NULL) reshape_param_->::caffe::ReshapeParameter::Clear();
    }
    if (has_scale_param()) {
      if (scale_param_ != NULL) scale_param_->::caffe::ScaleParameter::Clear();
    }
    if (has_sigmoid_param()) {
      if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
    }
    if (has_softmax_param()) {
      if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
    }
    if (has_spp_param()) {
      if (spp_param_ != NULL) spp_param_->::caffe::SPPParameter::Clear();
    }
    if (has_slice_param()) {
      if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
    }
    if (has_tanh_param()) {
      if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
    }
    if (has_threshold_param()) {
      if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    if (has_tile_param()) {
      if (tile_param_ != NULL) tile_param_->::caffe::TileParameter::Clear();
    }
    if (has_window_data_param()) {
      if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
    }
    if (has_input3d_param()) {
      if (input3d_param_ != NULL) input3d_param_->::caffe::Input3DParameter::Clear();
    }
    if (has_clip_by_value_param()) {
      if (clip_by_value_param_ != NULL) clip_by_value_param_->::caffe::ClipByValueParameter::Clear();
    }
    if (has_pooling3d_param()) {
      if (pooling3d_param_ != NULL) pooling3d_param_->::caffe::Pooling3DParameter::Clear();
    }
    if (has_upsampling3d_param()) {
      if (upsampling3d_param_ != NULL) upsampling3d_param_->::caffe::UpSampling3DParameter::Clear();
    }
    if (has_dual_update_param()) {
      if (dual_update_param_ != NULL) dual_update_param_->::caffe::DualUpdateParameter::Clear();
    }
    if (has_primal_update_param()) {
      if (primal_update_param_ != NULL) primal_update_param_->::caffe::PrimalUpdateParameter::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 255) {
    if (has_lagrangian_update_param()) {
      if (lagrangian_update_param_ != NULL) lagrangian_update_param_->::caffe::LagrangianUpdateParameter::Clear();
    }
    if (has_primal_dual_cross_entropy_loss_param()) {
      if (primal_dual_cross_entropy_loss_param_ != NULL) primal_dual_cross_entropy_loss_param_->::caffe::PrimalDualCrossEntropyLossParameter::Clear();
    }
    if (has_dense_grid_data_write_param()) {
      if (dense_grid_data_write_param_ != NULL) dense_grid_data_write_param_->::caffe::DenseGridDataWriteParameter::Clear();
    }
    if (has_accuracy_3dreconstruction_param()) {
      if (accuracy_3dreconstruction_param_ != NULL) accuracy_3dreconstruction_param_->::caffe::Accuracy3DReconstructionParameter::Clear();
    }
    if (has_input_primal_dual_param()) {
      if (input_primal_dual_param_ != NULL) input_primal_dual_param_->::caffe::InputPrimalDualParameter::Clear();
    }
    if (has_scaling_param()) {
      if (scaling_param_ != NULL) scaling_param_->::caffe::ScalingParameter::Clear();
    }
    if (has_test_input3d_param()) {
      if (test_input3d_param_ != NULL) test_input3d_param_->::caffe::TestInput3DParameter::Clear();
    }
    if (has_primal_dual_weighted_cross_entropy_loss_param()) {
      if (primal_dual_weighted_cross_entropy_loss_param_ != NULL) primal_dual_weighted_cross_entropy_loss_param_->::caffe::PrimalDualWeightedCrossEntropyLossParameter::Clear();
    }
  }
  if (_has_bits_[72 / 32] & 65280) {
    if (has_oct_dual_update_param()) {
      if (oct_dual_update_param_ != NULL) oct_dual_update_param_->::caffe::OctDualUpdateParameter::Clear();
    }
    if (has_oct_primal_update_param()) {
      if (oct_primal_update_param_ != NULL) oct_primal_update_param_->::caffe::OctPrimalUpdateParameter::Clear();
    }
    if (has_oct_prop_param()) {
      if (oct_prop_param_ != NULL) oct_prop_param_->::caffe::OctPropParameter::Clear();
    }
    if (has_oct_prop_loss_prep_param()) {
      if (oct_prop_loss_prep_param_ != NULL) oct_prop_loss_prep_param_->::caffe::OctPropLossPrepParameter::Clear();
    }
    if (has_oct_level_sampling_param()) {
      if (oct_level_sampling_param_ != NULL) oct_level_sampling_param_->::caffe::OctLevelSamplingParameter::Clear();
    }
    if (has_oct_upsampling_param()) {
      if (oct_upsampling_param_ != NULL) oct_upsampling_param_->::caffe::OctUpSamplingParameter::Clear();
    }
    if (has_oct_conv_param()) {
      if (oct_conv_param_ != NULL) oct_conv_param_->::caffe::OctConvParameter::Clear();
    }
    if (has_oct_input_param()) {
      if (oct_input_param_ != NULL) oct_input_param_->::caffe::OctInputParameter::Clear();
    }
  }
  if (_has_bits_[80 / 32] & 8323072) {
    if (has_oct_convert_param()) {
      if (oct_convert_param_ != NULL) oct_convert_param_->::caffe::OctConvertParameter::Clear();
    }
    if (has_oct_input_primal_dual_param()) {
      if (oct_input_primal_dual_param_ != NULL) oct_input_primal_dual_param_->::caffe::OctInputPrimalDualParameter::Clear();
    }
    if (has_oct_accuracy_3dreconstruction_param()) {
      if (oct_accuracy_3dreconstruction_param_ != NULL) oct_accuracy_3dreconstruction_param_->::caffe::OctAccuracy3DReconstructionParameter::Clear();
    }
    if (has_oct_output_param()) {
      if (oct_output_param_ != NULL) oct_output_param_->::caffe::OctOutputParameter::Clear();
    }
    if (has_dense_convert_param()) {
      if (dense_convert_param_ != NULL) dense_convert_param_->::caffe::DenseConvertParameter::Clear();
    }
    if (has_oct_seg_loss_prep_param()) {
      if (oct_seg_loss_prep_param_ != NULL) oct_seg_loss_prep_param_->::caffe::OctSegLossPrepParameter::Clear();
    }
    if (has_seg_cross_entropy_loss_param()) {
      if (seg_cross_entropy_loss_param_ != NULL) seg_cross_entropy_loss_param_->::caffe::SegCrossEntropyLossParameter::Clear();
    }
  }
  bottom_.Clear();
  top_.Clear();
  loss_weight_.Clear();
  param_.Clear();
  blobs_.Clear();
  propagate_down_.Clear();
  include_.Clear();
  exclude_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        break;
      }

      // repeated string bottom = 3;
      case 3: {
        if (tag == 26) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bottom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        if (input->ExpectTag(34)) goto parse_top;
        break;
      }

      // repeated string top = 4;
      case 4: {
        if (tag == 34) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top(this->top_size() - 1).data(),
            this->top(this->top_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "top");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_top;
        if (input->ExpectTag(45)) goto parse_loss_weight;
        break;
      }

      // repeated float loss_weight = 5;
      case 5: {
        if (tag == 45) {
         parse_loss_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_loss_weight())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_loss_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_loss_weight;
        if (input->ExpectTag(50)) goto parse_param;
        break;
      }

      // repeated .caffe.ParamSpec param = 6;
      case 6: {
        if (tag == 50) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_param;
        if (input->ExpectTag(58)) goto parse_blobs;
        break;
      }

      // repeated .caffe.BlobProto blobs = 7;
      case 7: {
        if (tag == 58) {
         parse_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_blobs;
        if (input->ExpectTag(66)) goto parse_include;
        break;
      }

      // repeated .caffe.NetStateRule include = 8;
      case 8: {
        if (tag == 66) {
         parse_include:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_include()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_include;
        if (input->ExpectTag(74)) goto parse_exclude;
        break;
      }

      // repeated .caffe.NetStateRule exclude = 9;
      case 9: {
        if (tag == 74) {
         parse_exclude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exclude()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_exclude;
        if (input->ExpectTag(80)) goto parse_phase;
        break;
      }

      // optional .caffe.Phase phase = 10;
      case 10: {
        if (tag == 80) {
         parse_phase:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_propagate_down;
        break;
      }

      // repeated bool propagate_down = 11;
      case 11: {
        if (tag == 88) {
         parse_propagate_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 88, input, this->mutable_propagate_down())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_propagate_down())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_propagate_down;
        if (input->ExpectTag(802)) goto parse_transform_param;
        break;
      }

      // optional .caffe.TransformationParameter transform_param = 100;
      case 100: {
        if (tag == 802) {
         parse_transform_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_loss_param;
        break;
      }

      // optional .caffe.LossParameter loss_param = 101;
      case 101: {
        if (tag == 810) {
         parse_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_accuracy_param;
        break;
      }

      // optional .caffe.AccuracyParameter accuracy_param = 102;
      case 102: {
        if (tag == 818) {
         parse_accuracy_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accuracy_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_argmax_param;
        break;
      }

      // optional .caffe.ArgMaxParameter argmax_param = 103;
      case 103: {
        if (tag == 826) {
         parse_argmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_concat_param;
        break;
      }

      // optional .caffe.ConcatParameter concat_param = 104;
      case 104: {
        if (tag == 834) {
         parse_concat_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_contrastive_loss_param;
        break;
      }

      // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
      case 105: {
        if (tag == 842) {
         parse_contrastive_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contrastive_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(850)) goto parse_convolution_param;
        break;
      }

      // optional .caffe.ConvolutionParameter convolution_param = 106;
      case 106: {
        if (tag == 850) {
         parse_convolution_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(858)) goto parse_data_param;
        break;
      }

      // optional .caffe.DataParameter data_param = 107;
      case 107: {
        if (tag == 858) {
         parse_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(866)) goto parse_dropout_param;
        break;
      }

      // optional .caffe.DropoutParameter dropout_param = 108;
      case 108: {
        if (tag == 866) {
         parse_dropout_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(874)) goto parse_dummy_data_param;
        break;
      }

      // optional .caffe.DummyDataParameter dummy_data_param = 109;
      case 109: {
        if (tag == 874) {
         parse_dummy_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dummy_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(882)) goto parse_eltwise_param;
        break;
      }

      // optional .caffe.EltwiseParameter eltwise_param = 110;
      case 110: {
        if (tag == 882) {
         parse_eltwise_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(890)) goto parse_exp_param;
        break;
      }

      // optional .caffe.ExpParameter exp_param = 111;
      case 111: {
        if (tag == 890) {
         parse_exp_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(898)) goto parse_hdf5_data_param;
        break;
      }

      // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
      case 112: {
        if (tag == 898) {
         parse_hdf5_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(906)) goto parse_hdf5_output_param;
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
      case 113: {
        if (tag == 906) {
         parse_hdf5_output_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(914)) goto parse_hinge_loss_param;
        break;
      }

      // optional .caffe.HingeLossParameter hinge_loss_param = 114;
      case 114: {
        if (tag == 914) {
         parse_hinge_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hinge_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(922)) goto parse_image_data_param;
        break;
      }

      // optional .caffe.ImageDataParameter image_data_param = 115;
      case 115: {
        if (tag == 922) {
         parse_image_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(930)) goto parse_infogain_loss_param;
        break;
      }

      // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
      case 116: {
        if (tag == 930) {
         parse_infogain_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infogain_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(938)) goto parse_inner_product_param;
        break;
      }

      // optional .caffe.InnerProductParameter inner_product_param = 117;
      case 117: {
        if (tag == 938) {
         parse_inner_product_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(946)) goto parse_lrn_param;
        break;
      }

      // optional .caffe.LRNParameter lrn_param = 118;
      case 118: {
        if (tag == 946) {
         parse_lrn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(954)) goto parse_memory_data_param;
        break;
      }

      // optional .caffe.MemoryDataParameter memory_data_param = 119;
      case 119: {
        if (tag == 954) {
         parse_memory_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(962)) goto parse_mvn_param;
        break;
      }

      // optional .caffe.MVNParameter mvn_param = 120;
      case 120: {
        if (tag == 962) {
         parse_mvn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mvn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(970)) goto parse_pooling_param;
        break;
      }

      // optional .caffe.PoolingParameter pooling_param = 121;
      case 121: {
        if (tag == 970) {
         parse_pooling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(978)) goto parse_power_param;
        break;
      }

      // optional .caffe.PowerParameter power_param = 122;
      case 122: {
        if (tag == 978) {
         parse_power_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(986)) goto parse_relu_param;
        break;
      }

      // optional .caffe.ReLUParameter relu_param = 123;
      case 123: {
        if (tag == 986) {
         parse_relu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(994)) goto parse_sigmoid_param;
        break;
      }

      // optional .caffe.SigmoidParameter sigmoid_param = 124;
      case 124: {
        if (tag == 994) {
         parse_sigmoid_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigmoid_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1002)) goto parse_softmax_param;
        break;
      }

      // optional .caffe.SoftmaxParameter softmax_param = 125;
      case 125: {
        if (tag == 1002) {
         parse_softmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1010)) goto parse_slice_param;
        break;
      }

      // optional .caffe.SliceParameter slice_param = 126;
      case 126: {
        if (tag == 1010) {
         parse_slice_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1018)) goto parse_tanh_param;
        break;
      }

      // optional .caffe.TanHParameter tanh_param = 127;
      case 127: {
        if (tag == 1018) {
         parse_tanh_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tanh_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1026)) goto parse_threshold_param;
        break;
      }

      // optional .caffe.ThresholdParameter threshold_param = 128;
      case 128: {
        if (tag == 1026) {
         parse_threshold_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_threshold_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1034)) goto parse_window_data_param;
        break;
      }

      // optional .caffe.WindowDataParameter window_data_param = 129;
      case 129: {
        if (tag == 1034) {
         parse_window_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1042)) goto parse_python_param;
        break;
      }

      // optional .caffe.PythonParameter python_param = 130;
      case 130: {
        if (tag == 1042) {
         parse_python_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_python_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1050)) goto parse_prelu_param;
        break;
      }

      // optional .caffe.PReLUParameter prelu_param = 131;
      case 131: {
        if (tag == 1050) {
         parse_prelu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prelu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1058)) goto parse_spp_param;
        break;
      }

      // optional .caffe.SPPParameter spp_param = 132;
      case 132: {
        if (tag == 1058) {
         parse_spp_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spp_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1066)) goto parse_reshape_param;
        break;
      }

      // optional .caffe.ReshapeParameter reshape_param = 133;
      case 133: {
        if (tag == 1066) {
         parse_reshape_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reshape_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1074)) goto parse_log_param;
        break;
      }

      // optional .caffe.LogParameter log_param = 134;
      case 134: {
        if (tag == 1074) {
         parse_log_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1082)) goto parse_flatten_param;
        break;
      }

      // optional .caffe.FlattenParameter flatten_param = 135;
      case 135: {
        if (tag == 1082) {
         parse_flatten_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flatten_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1090)) goto parse_reduction_param;
        break;
      }

      // optional .caffe.ReductionParameter reduction_param = 136;
      case 136: {
        if (tag == 1090) {
         parse_reduction_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reduction_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1098)) goto parse_embed_param;
        break;
      }

      // optional .caffe.EmbedParameter embed_param = 137;
      case 137: {
        if (tag == 1098) {
         parse_embed_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_embed_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1106)) goto parse_tile_param;
        break;
      }

      // optional .caffe.TileParameter tile_param = 138;
      case 138: {
        if (tag == 1106) {
         parse_tile_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tile_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1114)) goto parse_batch_norm_param;
        break;
      }

      // optional .caffe.BatchNormParameter batch_norm_param = 139;
      case 139: {
        if (tag == 1114) {
         parse_batch_norm_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_norm_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1122)) goto parse_elu_param;
        break;
      }

      // optional .caffe.ELUParameter elu_param = 140;
      case 140: {
        if (tag == 1122) {
         parse_elu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1130)) goto parse_bias_param;
        break;
      }

      // optional .caffe.BiasParameter bias_param = 141;
      case 141: {
        if (tag == 1130) {
         parse_bias_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1138)) goto parse_scale_param;
        break;
      }

      // optional .caffe.ScaleParameter scale_param = 142;
      case 142: {
        if (tag == 1138) {
         parse_scale_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1146)) goto parse_input_param;
        break;
      }

      // optional .caffe.InputParameter input_param = 143;
      case 143: {
        if (tag == 1146) {
         parse_input_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1154)) goto parse_crop_param;
        break;
      }

      // optional .caffe.CropParameter crop_param = 144;
      case 144: {
        if (tag == 1154) {
         parse_crop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crop_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1162)) goto parse_parameter_param;
        break;
      }

      // optional .caffe.ParameterParameter parameter_param = 145;
      case 145: {
        if (tag == 1162) {
         parse_parameter_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parameter_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1170)) goto parse_recurrent_param;
        break;
      }

      // optional .caffe.RecurrentParameter recurrent_param = 146;
      case 146: {
        if (tag == 1170) {
         parse_recurrent_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recurrent_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8042)) goto parse_input3d_param;
        break;
      }

      // optional .caffe.Input3DParameter input3d_param = 1005;
      case 1005: {
        if (tag == 8042) {
         parse_input3d_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input3d_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8050)) goto parse_clip_by_value_param;
        break;
      }

      // optional .caffe.ClipByValueParameter clip_by_value_param = 1006;
      case 1006: {
        if (tag == 8050) {
         parse_clip_by_value_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip_by_value_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8058)) goto parse_pooling3d_param;
        break;
      }

      // optional .caffe.Pooling3DParameter pooling3d_param = 1007;
      case 1007: {
        if (tag == 8058) {
         parse_pooling3d_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling3d_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8066)) goto parse_upsampling3d_param;
        break;
      }

      // optional .caffe.UpSampling3DParameter upsampling3d_param = 1008;
      case 1008: {
        if (tag == 8066) {
         parse_upsampling3d_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upsampling3d_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8074)) goto parse_dual_update_param;
        break;
      }

      // optional .caffe.DualUpdateParameter dual_update_param = 1009;
      case 1009: {
        if (tag == 8074) {
         parse_dual_update_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dual_update_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8082)) goto parse_primal_update_param;
        break;
      }

      // optional .caffe.PrimalUpdateParameter primal_update_param = 1010;
      case 1010: {
        if (tag == 8082) {
         parse_primal_update_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_primal_update_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8090)) goto parse_lagrangian_update_param;
        break;
      }

      // optional .caffe.LagrangianUpdateParameter lagrangian_update_param = 1011;
      case 1011: {
        if (tag == 8090) {
         parse_lagrangian_update_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lagrangian_update_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8106)) goto parse_primal_dual_cross_entropy_loss_param;
        break;
      }

      // optional .caffe.PrimalDualCrossEntropyLossParameter primal_dual_cross_entropy_loss_param = 1013;
      case 1013: {
        if (tag == 8106) {
         parse_primal_dual_cross_entropy_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_primal_dual_cross_entropy_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8114)) goto parse_dense_grid_data_write_param;
        break;
      }

      // optional .caffe.DenseGridDataWriteParameter dense_grid_data_write_param = 1014;
      case 1014: {
        if (tag == 8114) {
         parse_dense_grid_data_write_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dense_grid_data_write_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8122)) goto parse_accuracy_3dreconstruction_param;
        break;
      }

      // optional .caffe.Accuracy3DReconstructionParameter accuracy_3dreconstruction_param = 1015;
      case 1015: {
        if (tag == 8122) {
         parse_accuracy_3dreconstruction_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accuracy_3dreconstruction_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8130)) goto parse_input_primal_dual_param;
        break;
      }

      // optional .caffe.InputPrimalDualParameter input_primal_dual_param = 1016;
      case 1016: {
        if (tag == 8130) {
         parse_input_primal_dual_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_primal_dual_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8138)) goto parse_scaling_param;
        break;
      }

      // optional .caffe.ScalingParameter scaling_param = 1017;
      case 1017: {
        if (tag == 8138) {
         parse_scaling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scaling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8146)) goto parse_test_input3d_param;
        break;
      }

      // optional .caffe.TestInput3DParameter test_input3d_param = 1018;
      case 1018: {
        if (tag == 8146) {
         parse_test_input3d_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_input3d_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8154)) goto parse_primal_dual_weighted_cross_entropy_loss_param;
        break;
      }

      // optional .caffe.PrimalDualWeightedCrossEntropyLossParameter primal_dual_weighted_cross_entropy_loss_param = 1019;
      case 1019: {
        if (tag == 8154) {
         parse_primal_dual_weighted_cross_entropy_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_primal_dual_weighted_cross_entropy_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8170)) goto parse_oct_dual_update_param;
        break;
      }

      // optional .caffe.OctDualUpdateParameter oct_dual_update_param = 1021;
      case 1021: {
        if (tag == 8170) {
         parse_oct_dual_update_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oct_dual_update_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8178)) goto parse_oct_primal_update_param;
        break;
      }

      // optional .caffe.OctPrimalUpdateParameter oct_primal_update_param = 1022;
      case 1022: {
        if (tag == 8178) {
         parse_oct_primal_update_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oct_primal_update_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8186)) goto parse_oct_prop_param;
        break;
      }

      // optional .caffe.OctPropParameter oct_prop_param = 1023;
      case 1023: {
        if (tag == 8186) {
         parse_oct_prop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oct_prop_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8194)) goto parse_oct_prop_loss_prep_param;
        break;
      }

      // optional .caffe.OctPropLossPrepParameter oct_prop_loss_prep_param = 1024;
      case 1024: {
        if (tag == 8194) {
         parse_oct_prop_loss_prep_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oct_prop_loss_prep_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8202)) goto parse_oct_level_sampling_param;
        break;
      }

      // optional .caffe.OctLevelSamplingParameter oct_level_sampling_param = 1025;
      case 1025: {
        if (tag == 8202) {
         parse_oct_level_sampling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oct_level_sampling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8210)) goto parse_oct_upsampling_param;
        break;
      }

      // optional .caffe.OctUpSamplingParameter oct_upsampling_param = 1026;
      case 1026: {
        if (tag == 8210) {
         parse_oct_upsampling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oct_upsampling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8218)) goto parse_oct_conv_param;
        break;
      }

      // optional .caffe.OctConvParameter oct_conv_param = 1027;
      case 1027: {
        if (tag == 8218) {
         parse_oct_conv_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oct_conv_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8226)) goto parse_oct_input_param;
        break;
      }

      // optional .caffe.OctInputParameter oct_input_param = 1028;
      case 1028: {
        if (tag == 8226) {
         parse_oct_input_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oct_input_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8234)) goto parse_oct_convert_param;
        break;
      }

      // optional .caffe.OctConvertParameter oct_convert_param = 1029;
      case 1029: {
        if (tag == 8234) {
         parse_oct_convert_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oct_convert_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8242)) goto parse_oct_input_primal_dual_param;
        break;
      }

      // optional .caffe.OctInputPrimalDualParameter oct_input_primal_dual_param = 1030;
      case 1030: {
        if (tag == 8242) {
         parse_oct_input_primal_dual_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oct_input_primal_dual_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8250)) goto parse_oct_accuracy_3dreconstruction_param;
        break;
      }

      // optional .caffe.OctAccuracy3DReconstructionParameter oct_accuracy_3dreconstruction_param = 1031;
      case 1031: {
        if (tag == 8250) {
         parse_oct_accuracy_3dreconstruction_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oct_accuracy_3dreconstruction_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8258)) goto parse_oct_output_param;
        break;
      }

      // optional .caffe.OctOutputParameter oct_output_param = 1032;
      case 1032: {
        if (tag == 8258) {
         parse_oct_output_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oct_output_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8266)) goto parse_dense_convert_param;
        break;
      }

      // optional .caffe.DenseConvertParameter dense_convert_param = 1033;
      case 1033: {
        if (tag == 8266) {
         parse_dense_convert_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dense_convert_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8274)) goto parse_oct_seg_loss_prep_param;
        break;
      }

      // optional .caffe.OctSegLossPrepParameter oct_seg_loss_prep_param = 1034;
      case 1034: {
        if (tag == 8274) {
         parse_oct_seg_loss_prep_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oct_seg_loss_prep_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8282)) goto parse_seg_cross_entropy_loss_param;
        break;
      }

      // optional .caffe.SegCrossEntropyLossParameter seg_cross_entropy_loss_param = 1035;
      case 1035: {
        if (tag == 8282) {
         parse_seg_cross_entropy_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seg_cross_entropy_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LayerParameter)
  return false;
#undef DO_
}

void LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->bottom(i).data(), this->bottom(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bottom(i), output);
  }

  // repeated string top = 4;
  for (int i = 0; i < this->top_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->top(i).data(), this->top(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "top");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->top(i), output);
  }

  // repeated float loss_weight = 5;
  for (int i = 0; i < this->loss_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->loss_weight(i), output);
  }

  // repeated .caffe.ParamSpec param = 6;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->param(i), output);
  }

  // repeated .caffe.BlobProto blobs = 7;
  for (int i = 0; i < this->blobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->blobs(i), output);
  }

  // repeated .caffe.NetStateRule include = 8;
  for (int i = 0; i < this->include_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->include(i), output);
  }

  // repeated .caffe.NetStateRule exclude = 9;
  for (int i = 0; i < this->exclude_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->exclude(i), output);
  }

  // optional .caffe.Phase phase = 10;
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->phase(), output);
  }

  // repeated bool propagate_down = 11;
  for (int i = 0; i < this->propagate_down_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      11, this->propagate_down(i), output);
  }

  // optional .caffe.TransformationParameter transform_param = 100;
  if (has_transform_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->transform_param(), output);
  }

  // optional .caffe.LossParameter loss_param = 101;
  if (has_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->loss_param(), output);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  if (has_accuracy_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->accuracy_param(), output);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  if (has_argmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->argmax_param(), output);
  }

  // optional .caffe.ConcatParameter concat_param = 104;
  if (has_concat_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->concat_param(), output);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  if (has_contrastive_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->contrastive_loss_param(), output);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  if (has_convolution_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->convolution_param(), output);
  }

  // optional .caffe.DataParameter data_param = 107;
  if (has_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->data_param(), output);
  }

  // optional .caffe.DropoutParameter dropout_param = 108;
  if (has_dropout_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->dropout_param(), output);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  if (has_dummy_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, this->dummy_data_param(), output);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  if (has_eltwise_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, this->eltwise_param(), output);
  }

  // optional .caffe.ExpParameter exp_param = 111;
  if (has_exp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, this->exp_param(), output);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  if (has_hdf5_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, this->hdf5_data_param(), output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  if (has_hdf5_output_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      113, this->hdf5_output_param(), output);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  if (has_hinge_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      114, this->hinge_loss_param(), output);
  }

  // optional .caffe.ImageDataParameter image_data_param = 115;
  if (has_image_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      115, this->image_data_param(), output);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  if (has_infogain_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116, this->infogain_loss_param(), output);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  if (has_inner_product_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, this->inner_product_param(), output);
  }

  // optional .caffe.LRNParameter lrn_param = 118;
  if (has_lrn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, this->lrn_param(), output);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  if (has_memory_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      119, this->memory_data_param(), output);
  }

  // optional .caffe.MVNParameter mvn_param = 120;
  if (has_mvn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, this->mvn_param(), output);
  }

  // optional .caffe.PoolingParameter pooling_param = 121;
  if (has_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, this->pooling_param(), output);
  }

  // optional .caffe.PowerParameter power_param = 122;
  if (has_power_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      122, this->power_param(), output);
  }

  // optional .caffe.ReLUParameter relu_param = 123;
  if (has_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123, this->relu_param(), output);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  if (has_sigmoid_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      124, this->sigmoid_param(), output);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  if (has_softmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      125, this->softmax_param(), output);
  }

  // optional .caffe.SliceParameter slice_param = 126;
  if (has_slice_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      126, this->slice_param(), output);
  }

  // optional .caffe.TanHParameter tanh_param = 127;
  if (has_tanh_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      127, this->tanh_param(), output);
  }

  // optional .caffe.ThresholdParameter threshold_param = 128;
  if (has_threshold_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      128, this->threshold_param(), output);
  }

  // optional .caffe.WindowDataParameter window_data_param = 129;
  if (has_window_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      129, this->window_data_param(), output);
  }

  // optional .caffe.PythonParameter python_param = 130;
  if (has_python_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      130, this->python_param(), output);
  }

  // optional .caffe.PReLUParameter prelu_param = 131;
  if (has_prelu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      131, this->prelu_param(), output);
  }

  // optional .caffe.SPPParameter spp_param = 132;
  if (has_spp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      132, this->spp_param(), output);
  }

  // optional .caffe.ReshapeParameter reshape_param = 133;
  if (has_reshape_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      133, this->reshape_param(), output);
  }

  // optional .caffe.LogParameter log_param = 134;
  if (has_log_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      134, this->log_param(), output);
  }

  // optional .caffe.FlattenParameter flatten_param = 135;
  if (has_flatten_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      135, this->flatten_param(), output);
  }

  // optional .caffe.ReductionParameter reduction_param = 136;
  if (has_reduction_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      136, this->reduction_param(), output);
  }

  // optional .caffe.EmbedParameter embed_param = 137;
  if (has_embed_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      137, this->embed_param(), output);
  }

  // optional .caffe.TileParameter tile_param = 138;
  if (has_tile_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      138, this->tile_param(), output);
  }

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  if (has_batch_norm_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      139, this->batch_norm_param(), output);
  }

  // optional .caffe.ELUParameter elu_param = 140;
  if (has_elu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      140, this->elu_param(), output);
  }

  // optional .caffe.BiasParameter bias_param = 141;
  if (has_bias_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      141, this->bias_param(), output);
  }

  // optional .caffe.ScaleParameter scale_param = 142;
  if (has_scale_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      142, this->scale_param(), output);
  }

  // optional .caffe.InputParameter input_param = 143;
  if (has_input_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      143, this->input_param(), output);
  }

  // optional .caffe.CropParameter crop_param = 144;
  if (has_crop_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      144, this->crop_param(), output);
  }

  // optional .caffe.ParameterParameter parameter_param = 145;
  if (has_parameter_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      145, this->parameter_param(), output);
  }

  // optional .caffe.RecurrentParameter recurrent_param = 146;
  if (has_recurrent_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      146, this->recurrent_param(), output);
  }

  // optional .caffe.Input3DParameter input3d_param = 1005;
  if (has_input3d_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1005, this->input3d_param(), output);
  }

  // optional .caffe.ClipByValueParameter clip_by_value_param = 1006;
  if (has_clip_by_value_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1006, this->clip_by_value_param(), output);
  }

  // optional .caffe.Pooling3DParameter pooling3d_param = 1007;
  if (has_pooling3d_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1007, this->pooling3d_param(), output);
  }

  // optional .caffe.UpSampling3DParameter upsampling3d_param = 1008;
  if (has_upsampling3d_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1008, this->upsampling3d_param(), output);
  }

  // optional .caffe.DualUpdateParameter dual_update_param = 1009;
  if (has_dual_update_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1009, this->dual_update_param(), output);
  }

  // optional .caffe.PrimalUpdateParameter primal_update_param = 1010;
  if (has_primal_update_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1010, this->primal_update_param(), output);
  }

  // optional .caffe.LagrangianUpdateParameter lagrangian_update_param = 1011;
  if (has_lagrangian_update_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1011, this->lagrangian_update_param(), output);
  }

  // optional .caffe.PrimalDualCrossEntropyLossParameter primal_dual_cross_entropy_loss_param = 1013;
  if (has_primal_dual_cross_entropy_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1013, this->primal_dual_cross_entropy_loss_param(), output);
  }

  // optional .caffe.DenseGridDataWriteParameter dense_grid_data_write_param = 1014;
  if (has_dense_grid_data_write_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1014, this->dense_grid_data_write_param(), output);
  }

  // optional .caffe.Accuracy3DReconstructionParameter accuracy_3dreconstruction_param = 1015;
  if (has_accuracy_3dreconstruction_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1015, this->accuracy_3dreconstruction_param(), output);
  }

  // optional .caffe.InputPrimalDualParameter input_primal_dual_param = 1016;
  if (has_input_primal_dual_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1016, this->input_primal_dual_param(), output);
  }

  // optional .caffe.ScalingParameter scaling_param = 1017;
  if (has_scaling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1017, this->scaling_param(), output);
  }

  // optional .caffe.TestInput3DParameter test_input3d_param = 1018;
  if (has_test_input3d_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1018, this->test_input3d_param(), output);
  }

  // optional .caffe.PrimalDualWeightedCrossEntropyLossParameter primal_dual_weighted_cross_entropy_loss_param = 1019;
  if (has_primal_dual_weighted_cross_entropy_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1019, this->primal_dual_weighted_cross_entropy_loss_param(), output);
  }

  // optional .caffe.OctDualUpdateParameter oct_dual_update_param = 1021;
  if (has_oct_dual_update_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1021, this->oct_dual_update_param(), output);
  }

  // optional .caffe.OctPrimalUpdateParameter oct_primal_update_param = 1022;
  if (has_oct_primal_update_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1022, this->oct_primal_update_param(), output);
  }

  // optional .caffe.OctPropParameter oct_prop_param = 1023;
  if (has_oct_prop_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1023, this->oct_prop_param(), output);
  }

  // optional .caffe.OctPropLossPrepParameter oct_prop_loss_prep_param = 1024;
  if (has_oct_prop_loss_prep_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1024, this->oct_prop_loss_prep_param(), output);
  }

  // optional .caffe.OctLevelSamplingParameter oct_level_sampling_param = 1025;
  if (has_oct_level_sampling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1025, this->oct_level_sampling_param(), output);
  }

  // optional .caffe.OctUpSamplingParameter oct_upsampling_param = 1026;
  if (has_oct_upsampling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1026, this->oct_upsampling_param(), output);
  }

  // optional .caffe.OctConvParameter oct_conv_param = 1027;
  if (has_oct_conv_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1027, this->oct_conv_param(), output);
  }

  // optional .caffe.OctInputParameter oct_input_param = 1028;
  if (has_oct_input_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1028, this->oct_input_param(), output);
  }

  // optional .caffe.OctConvertParameter oct_convert_param = 1029;
  if (has_oct_convert_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1029, this->oct_convert_param(), output);
  }

  // optional .caffe.OctInputPrimalDualParameter oct_input_primal_dual_param = 1030;
  if (has_oct_input_primal_dual_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1030, this->oct_input_primal_dual_param(), output);
  }

  // optional .caffe.OctAccuracy3DReconstructionParameter oct_accuracy_3dreconstruction_param = 1031;
  if (has_oct_accuracy_3dreconstruction_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1031, this->oct_accuracy_3dreconstruction_param(), output);
  }

  // optional .caffe.OctOutputParameter oct_output_param = 1032;
  if (has_oct_output_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1032, this->oct_output_param(), output);
  }

  // optional .caffe.DenseConvertParameter dense_convert_param = 1033;
  if (has_dense_convert_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1033, this->dense_convert_param(), output);
  }

  // optional .caffe.OctSegLossPrepParameter oct_seg_loss_prep_param = 1034;
  if (has_oct_seg_loss_prep_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1034, this->oct_seg_loss_prep_param(), output);
  }

  // optional .caffe.SegCrossEntropyLossParameter seg_cross_entropy_loss_param = 1035;
  if (has_seg_cross_entropy_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1035, this->seg_cross_entropy_loss_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LayerParameter)
}

::google::protobuf::uint8* LayerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->bottom(i), target);
  }

  // repeated string top = 4;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->top(i), target);
  }

  // repeated float loss_weight = 5;
  for (int i = 0; i < this->loss_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->loss_weight(i), target);
  }

  // repeated .caffe.ParamSpec param = 6;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->param(i), target);
  }

  // repeated .caffe.BlobProto blobs = 7;
  for (int i = 0; i < this->blobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->blobs(i), target);
  }

  // repeated .caffe.NetStateRule include = 8;
  for (int i = 0; i < this->include_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->include(i), target);
  }

  // repeated .caffe.NetStateRule exclude = 9;
  for (int i = 0; i < this->exclude_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->exclude(i), target);
  }

  // optional .caffe.Phase phase = 10;
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->phase(), target);
  }

  // repeated bool propagate_down = 11;
  for (int i = 0; i < this->propagate_down_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(11, this->propagate_down(i), target);
  }

  // optional .caffe.TransformationParameter transform_param = 100;
  if (has_transform_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->transform_param(), target);
  }

  // optional .caffe.LossParameter loss_param = 101;
  if (has_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->loss_param(), target);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  if (has_accuracy_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->accuracy_param(), target);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  if (has_argmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->argmax_param(), target);
  }

  // optional .caffe.ConcatParameter concat_param = 104;
  if (has_concat_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->concat_param(), target);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  if (has_contrastive_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->contrastive_loss_param(), target);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  if (has_convolution_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->convolution_param(), target);
  }

  // optional .caffe.DataParameter data_param = 107;
  if (has_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->data_param(), target);
  }

  // optional .caffe.DropoutParameter dropout_param = 108;
  if (has_dropout_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->dropout_param(), target);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  if (has_dummy_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        109, this->dummy_data_param(), target);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  if (has_eltwise_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        110, this->eltwise_param(), target);
  }

  // optional .caffe.ExpParameter exp_param = 111;
  if (has_exp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, this->exp_param(), target);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  if (has_hdf5_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        112, this->hdf5_data_param(), target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  if (has_hdf5_output_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        113, this->hdf5_output_param(), target);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  if (has_hinge_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        114, this->hinge_loss_param(), target);
  }

  // optional .caffe.ImageDataParameter image_data_param = 115;
  if (has_image_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        115, this->image_data_param(), target);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  if (has_infogain_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        116, this->infogain_loss_param(), target);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  if (has_inner_product_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        117, this->inner_product_param(), target);
  }

  // optional .caffe.LRNParameter lrn_param = 118;
  if (has_lrn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        118, this->lrn_param(), target);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  if (has_memory_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        119, this->memory_data_param(), target);
  }

  // optional .caffe.MVNParameter mvn_param = 120;
  if (has_mvn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        120, this->mvn_param(), target);
  }

  // optional .caffe.PoolingParameter pooling_param = 121;
  if (has_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        121, this->pooling_param(), target);
  }

  // optional .caffe.PowerParameter power_param = 122;
  if (has_power_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        122, this->power_param(), target);
  }

  // optional .caffe.ReLUParameter relu_param = 123;
  if (has_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        123, this->relu_param(), target);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  if (has_sigmoid_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        124, this->sigmoid_param(), target);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  if (has_softmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        125, this->softmax_param(), target);
  }

  // optional .caffe.SliceParameter slice_param = 126;
  if (has_slice_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        126, this->slice_param(), target);
  }

  // optional .caffe.TanHParameter tanh_param = 127;
  if (has_tanh_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        127, this->tanh_param(), target);
  }

  // optional .caffe.ThresholdParameter threshold_param = 128;
  if (has_threshold_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        128, this->threshold_param(), target);
  }

  // optional .caffe.WindowDataParameter window_data_param = 129;
  if (has_window_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        129, this->window_data_param(), target);
  }

  // optional .caffe.PythonParameter python_param = 130;
  if (has_python_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        130, this->python_param(), target);
  }

  // optional .caffe.PReLUParameter prelu_param = 131;
  if (has_prelu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        131, this->prelu_param(), target);
  }

  // optional .caffe.SPPParameter spp_param = 132;
  if (has_spp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        132, this->spp_param(), target);
  }

  // optional .caffe.ReshapeParameter reshape_param = 133;
  if (has_reshape_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        133, this->reshape_param(), target);
  }

  // optional .caffe.LogParameter log_param = 134;
  if (has_log_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        134, this->log_param(), target);
  }

  // optional .caffe.FlattenParameter flatten_param = 135;
  if (has_flatten_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        135, this->flatten_param(), target);
  }

  // optional .caffe.ReductionParameter reduction_param = 136;
  if (has_reduction_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        136, this->reduction_param(), target);
  }

  // optional .caffe.EmbedParameter embed_param = 137;
  if (has_embed_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        137, this->embed_param(), target);
  }

  // optional .caffe.TileParameter tile_param = 138;
  if (has_tile_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        138, this->tile_param(), target);
  }

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  if (has_batch_norm_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        139, this->batch_norm_param(), target);
  }

  // optional .caffe.ELUParameter elu_param = 140;
  if (has_elu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        140, this->elu_param(), target);
  }

  // optional .caffe.BiasParameter bias_param = 141;
  if (has_bias_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        141, this->bias_param(), target);
  }

  // optional .caffe.ScaleParameter scale_param = 142;
  if (has_scale_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        142, this->scale_param(), target);
  }

  // optional .caffe.InputParameter input_param = 143;
  if (has_input_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        143, this->input_param(), target);
  }

  // optional .caffe.CropParameter crop_param = 144;
  if (has_crop_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        144, this->crop_param(), target);
  }

  // optional .caffe.ParameterParameter parameter_param = 145;
  if (has_parameter_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        145, this->parameter_param(), target);
  }

  // optional .caffe.RecurrentParameter recurrent_param = 146;
  if (has_recurrent_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        146, this->recurrent_param(), target);
  }

  // optional .caffe.Input3DParameter input3d_param = 1005;
  if (has_input3d_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1005, this->input3d_param(), target);
  }

  // optional .caffe.ClipByValueParameter clip_by_value_param = 1006;
  if (has_clip_by_value_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1006, this->clip_by_value_param(), target);
  }

  // optional .caffe.Pooling3DParameter pooling3d_param = 1007;
  if (has_pooling3d_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1007, this->pooling3d_param(), target);
  }

  // optional .caffe.UpSampling3DParameter upsampling3d_param = 1008;
  if (has_upsampling3d_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1008, this->upsampling3d_param(), target);
  }

  // optional .caffe.DualUpdateParameter dual_update_param = 1009;
  if (has_dual_update_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1009, this->dual_update_param(), target);
  }

  // optional .caffe.PrimalUpdateParameter primal_update_param = 1010;
  if (has_primal_update_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1010, this->primal_update_param(), target);
  }

  // optional .caffe.LagrangianUpdateParameter lagrangian_update_param = 1011;
  if (has_lagrangian_update_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1011, this->lagrangian_update_param(), target);
  }

  // optional .caffe.PrimalDualCrossEntropyLossParameter primal_dual_cross_entropy_loss_param = 1013;
  if (has_primal_dual_cross_entropy_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1013, this->primal_dual_cross_entropy_loss_param(), target);
  }

  // optional .caffe.DenseGridDataWriteParameter dense_grid_data_write_param = 1014;
  if (has_dense_grid_data_write_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1014, this->dense_grid_data_write_param(), target);
  }

  // optional .caffe.Accuracy3DReconstructionParameter accuracy_3dreconstruction_param = 1015;
  if (has_accuracy_3dreconstruction_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1015, this->accuracy_3dreconstruction_param(), target);
  }

  // optional .caffe.InputPrimalDualParameter input_primal_dual_param = 1016;
  if (has_input_primal_dual_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1016, this->input_primal_dual_param(), target);
  }

  // optional .caffe.ScalingParameter scaling_param = 1017;
  if (has_scaling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1017, this->scaling_param(), target);
  }

  // optional .caffe.TestInput3DParameter test_input3d_param = 1018;
  if (has_test_input3d_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1018, this->test_input3d_param(), target);
  }

  // optional .caffe.PrimalDualWeightedCrossEntropyLossParameter primal_dual_weighted_cross_entropy_loss_param = 1019;
  if (has_primal_dual_weighted_cross_entropy_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1019, this->primal_dual_weighted_cross_entropy_loss_param(), target);
  }

  // optional .caffe.OctDualUpdateParameter oct_dual_update_param = 1021;
  if (has_oct_dual_update_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1021, this->oct_dual_update_param(), target);
  }

  // optional .caffe.OctPrimalUpdateParameter oct_primal_update_param = 1022;
  if (has_oct_primal_update_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1022, this->oct_primal_update_param(), target);
  }

  // optional .caffe.OctPropParameter oct_prop_param = 1023;
  if (has_oct_prop_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1023, this->oct_prop_param(), target);
  }

  // optional .caffe.OctPropLossPrepParameter oct_prop_loss_prep_param = 1024;
  if (has_oct_prop_loss_prep_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1024, this->oct_prop_loss_prep_param(), target);
  }

  // optional .caffe.OctLevelSamplingParameter oct_level_sampling_param = 1025;
  if (has_oct_level_sampling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1025, this->oct_level_sampling_param(), target);
  }

  // optional .caffe.OctUpSamplingParameter oct_upsampling_param = 1026;
  if (has_oct_upsampling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1026, this->oct_upsampling_param(), target);
  }

  // optional .caffe.OctConvParameter oct_conv_param = 1027;
  if (has_oct_conv_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1027, this->oct_conv_param(), target);
  }

  // optional .caffe.OctInputParameter oct_input_param = 1028;
  if (has_oct_input_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1028, this->oct_input_param(), target);
  }

  // optional .caffe.OctConvertParameter oct_convert_param = 1029;
  if (has_oct_convert_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1029, this->oct_convert_param(), target);
  }

  // optional .caffe.OctInputPrimalDualParameter oct_input_primal_dual_param = 1030;
  if (has_oct_input_primal_dual_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1030, this->oct_input_primal_dual_param(), target);
  }

  // optional .caffe.OctAccuracy3DReconstructionParameter oct_accuracy_3dreconstruction_param = 1031;
  if (has_oct_accuracy_3dreconstruction_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1031, this->oct_accuracy_3dreconstruction_param(), target);
  }

  // optional .caffe.OctOutputParameter oct_output_param = 1032;
  if (has_oct_output_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1032, this->oct_output_param(), target);
  }

  // optional .caffe.DenseConvertParameter dense_convert_param = 1033;
  if (has_dense_convert_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1033, this->dense_convert_param(), target);
  }

  // optional .caffe.OctSegLossPrepParameter oct_seg_loss_prep_param = 1034;
  if (has_oct_seg_loss_prep_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1034, this->oct_seg_loss_prep_param(), target);
  }

  // optional .caffe.SegCrossEntropyLossParameter seg_cross_entropy_loss_param = 1035;
  if (has_seg_cross_entropy_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1035, this->seg_cross_entropy_loss_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LayerParameter)
  return target;
}

int LayerParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .caffe.Phase phase = 10;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional .caffe.TransformationParameter transform_param = 100;
    if (has_transform_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform_param());
    }

    // optional .caffe.LossParameter loss_param = 101;
    if (has_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loss_param());
    }

    // optional .caffe.AccuracyParameter accuracy_param = 102;
    if (has_accuracy_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accuracy_param());
    }

    // optional .caffe.ArgMaxParameter argmax_param = 103;
    if (has_argmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->argmax_param());
    }

    // optional .caffe.BatchNormParameter batch_norm_param = 139;
    if (has_batch_norm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->batch_norm_param());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .caffe.BiasParameter bias_param = 141;
    if (has_bias_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_param());
    }

    // optional .caffe.ConcatParameter concat_param = 104;
    if (has_concat_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->concat_param());
    }

    // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
    if (has_contrastive_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contrastive_loss_param());
    }

    // optional .caffe.ConvolutionParameter convolution_param = 106;
    if (has_convolution_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->convolution_param());
    }

    // optional .caffe.CropParameter crop_param = 144;
    if (has_crop_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crop_param());
    }

    // optional .caffe.DataParameter data_param = 107;
    if (has_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_param());
    }

    // optional .caffe.DropoutParameter dropout_param = 108;
    if (has_dropout_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dropout_param());
    }

    // optional .caffe.DummyDataParameter dummy_data_param = 109;
    if (has_dummy_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dummy_data_param());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .caffe.EltwiseParameter eltwise_param = 110;
    if (has_eltwise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eltwise_param());
    }

    // optional .caffe.ELUParameter elu_param = 140;
    if (has_elu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elu_param());
    }

    // optional .caffe.EmbedParameter embed_param = 137;
    if (has_embed_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->embed_param());
    }

    // optional .caffe.ExpParameter exp_param = 111;
    if (has_exp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exp_param());
    }

    // optional .caffe.FlattenParameter flatten_param = 135;
    if (has_flatten_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flatten_param());
    }

    // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
    if (has_hdf5_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hdf5_data_param());
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
    if (has_hdf5_output_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hdf5_output_param());
    }

    // optional .caffe.HingeLossParameter hinge_loss_param = 114;
    if (has_hinge_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hinge_loss_param());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .caffe.ImageDataParameter image_data_param = 115;
    if (has_image_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_data_param());
    }

    // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
    if (has_infogain_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infogain_loss_param());
    }

    // optional .caffe.InnerProductParameter inner_product_param = 117;
    if (has_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inner_product_param());
    }

    // optional .caffe.InputParameter input_param = 143;
    if (has_input_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_param());
    }

    // optional .caffe.LogParameter log_param = 134;
    if (has_log_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_param());
    }

    // optional .caffe.LRNParameter lrn_param = 118;
    if (has_lrn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lrn_param());
    }

    // optional .caffe.MemoryDataParameter memory_data_param = 119;
    if (has_memory_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memory_data_param());
    }

    // optional .caffe.MVNParameter mvn_param = 120;
    if (has_mvn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mvn_param());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .caffe.ParameterParameter parameter_param = 145;
    if (has_parameter_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parameter_param());
    }

    // optional .caffe.PoolingParameter pooling_param = 121;
    if (has_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pooling_param());
    }

    // optional .caffe.PowerParameter power_param = 122;
    if (has_power_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->power_param());
    }

    // optional .caffe.PReLUParameter prelu_param = 131;
    if (has_prelu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prelu_param());
    }

    // optional .caffe.PythonParameter python_param = 130;
    if (has_python_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->python_param());
    }

    // optional .caffe.RecurrentParameter recurrent_param = 146;
    if (has_recurrent_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recurrent_param());
    }

    // optional .caffe.ReductionParameter reduction_param = 136;
    if (has_reduction_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reduction_param());
    }

    // optional .caffe.ReLUParameter relu_param = 123;
    if (has_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relu_param());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .caffe.ReshapeParameter reshape_param = 133;
    if (has_reshape_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reshape_param());
    }

    // optional .caffe.ScaleParameter scale_param = 142;
    if (has_scale_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale_param());
    }

    // optional .caffe.SigmoidParameter sigmoid_param = 124;
    if (has_sigmoid_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sigmoid_param());
    }

    // optional .caffe.SoftmaxParameter softmax_param = 125;
    if (has_softmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->softmax_param());
    }

    // optional .caffe.SPPParameter spp_param = 132;
    if (has_spp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spp_param());
    }

    // optional .caffe.SliceParameter slice_param = 126;
    if (has_slice_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slice_param());
    }

    // optional .caffe.TanHParameter tanh_param = 127;
    if (has_tanh_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tanh_param());
    }

    // optional .caffe.ThresholdParameter threshold_param = 128;
    if (has_threshold_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->threshold_param());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .caffe.TileParameter tile_param = 138;
    if (has_tile_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tile_param());
    }

    // optional .caffe.WindowDataParameter window_data_param = 129;
    if (has_window_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->window_data_param());
    }

    // optional .caffe.Input3DParameter input3d_param = 1005;
    if (has_input3d_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input3d_param());
    }

    // optional .caffe.ClipByValueParameter clip_by_value_param = 1006;
    if (has_clip_by_value_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clip_by_value_param());
    }

    // optional .caffe.Pooling3DParameter pooling3d_param = 1007;
    if (has_pooling3d_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pooling3d_param());
    }

    // optional .caffe.UpSampling3DParameter upsampling3d_param = 1008;
    if (has_upsampling3d_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upsampling3d_param());
    }

    // optional .caffe.DualUpdateParameter dual_update_param = 1009;
    if (has_dual_update_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dual_update_param());
    }

    // optional .caffe.PrimalUpdateParameter primal_update_param = 1010;
    if (has_primal_update_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->primal_update_param());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .caffe.LagrangianUpdateParameter lagrangian_update_param = 1011;
    if (has_lagrangian_update_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lagrangian_update_param());
    }

    // optional .caffe.PrimalDualCrossEntropyLossParameter primal_dual_cross_entropy_loss_param = 1013;
    if (has_primal_dual_cross_entropy_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->primal_dual_cross_entropy_loss_param());
    }

    // optional .caffe.DenseGridDataWriteParameter dense_grid_data_write_param = 1014;
    if (has_dense_grid_data_write_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dense_grid_data_write_param());
    }

    // optional .caffe.Accuracy3DReconstructionParameter accuracy_3dreconstruction_param = 1015;
    if (has_accuracy_3dreconstruction_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accuracy_3dreconstruction_param());
    }

    // optional .caffe.InputPrimalDualParameter input_primal_dual_param = 1016;
    if (has_input_primal_dual_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_primal_dual_param());
    }

    // optional .caffe.ScalingParameter scaling_param = 1017;
    if (has_scaling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scaling_param());
    }

    // optional .caffe.TestInput3DParameter test_input3d_param = 1018;
    if (has_test_input3d_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_input3d_param());
    }

    // optional .caffe.PrimalDualWeightedCrossEntropyLossParameter primal_dual_weighted_cross_entropy_loss_param = 1019;
    if (has_primal_dual_weighted_cross_entropy_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->primal_dual_weighted_cross_entropy_loss_param());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .caffe.OctDualUpdateParameter oct_dual_update_param = 1021;
    if (has_oct_dual_update_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oct_dual_update_param());
    }

    // optional .caffe.OctPrimalUpdateParameter oct_primal_update_param = 1022;
    if (has_oct_primal_update_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oct_primal_update_param());
    }

    // optional .caffe.OctPropParameter oct_prop_param = 1023;
    if (has_oct_prop_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oct_prop_param());
    }

    // optional .caffe.OctPropLossPrepParameter oct_prop_loss_prep_param = 1024;
    if (has_oct_prop_loss_prep_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oct_prop_loss_prep_param());
    }

    // optional .caffe.OctLevelSamplingParameter oct_level_sampling_param = 1025;
    if (has_oct_level_sampling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oct_level_sampling_param());
    }

    // optional .caffe.OctUpSamplingParameter oct_upsampling_param = 1026;
    if (has_oct_upsampling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oct_upsampling_param());
    }

    // optional .caffe.OctConvParameter oct_conv_param = 1027;
    if (has_oct_conv_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oct_conv_param());
    }

    // optional .caffe.OctInputParameter oct_input_param = 1028;
    if (has_oct_input_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oct_input_param());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional .caffe.OctConvertParameter oct_convert_param = 1029;
    if (has_oct_convert_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oct_convert_param());
    }

    // optional .caffe.OctInputPrimalDualParameter oct_input_primal_dual_param = 1030;
    if (has_oct_input_primal_dual_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oct_input_primal_dual_param());
    }

    // optional .caffe.OctAccuracy3DReconstructionParameter oct_accuracy_3dreconstruction_param = 1031;
    if (has_oct_accuracy_3dreconstruction_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oct_accuracy_3dreconstruction_param());
    }

    // optional .caffe.OctOutputParameter oct_output_param = 1032;
    if (has_oct_output_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oct_output_param());
    }

    // optional .caffe.DenseConvertParameter dense_convert_param = 1033;
    if (has_dense_convert_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dense_convert_param());
    }

    // optional .caffe.OctSegLossPrepParameter oct_seg_loss_prep_param = 1034;
    if (has_oct_seg_loss_prep_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oct_seg_loss_prep_param());
    }

    // optional .caffe.SegCrossEntropyLossParameter seg_cross_entropy_loss_param = 1035;
    if (has_seg_cross_entropy_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seg_cross_entropy_loss_param());
    }

  }
  // repeated string bottom = 3;
  total_size += 1 * this->bottom_size();
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  // repeated string top = 4;
  total_size += 1 * this->top_size();
  for (int i = 0; i < this->top_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }

  // repeated float loss_weight = 5;
  {
    int data_size = 0;
    data_size = 4 * this->loss_weight_size();
    total_size += 1 * this->loss_weight_size() + data_size;
  }

  // repeated .caffe.ParamSpec param = 6;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  // repeated .caffe.BlobProto blobs = 7;
  total_size += 1 * this->blobs_size();
  for (int i = 0; i < this->blobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blobs(i));
  }

  // repeated bool propagate_down = 11;
  {
    int data_size = 0;
    data_size = 1 * this->propagate_down_size();
    total_size += 1 * this->propagate_down_size() + data_size;
  }

  // repeated .caffe.NetStateRule include = 8;
  total_size += 1 * this->include_size();
  for (int i = 0; i < this->include_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->include(i));
  }

  // repeated .caffe.NetStateRule exclude = 9;
  total_size += 1 * this->exclude_size();
  for (int i = 0; i < this->exclude_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exclude(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayerParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayerParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayerParameter::MergeFrom(const LayerParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  loss_weight_.MergeFrom(from.loss_weight_);
  param_.MergeFrom(from.param_);
  blobs_.MergeFrom(from.blobs_);
  propagate_down_.MergeFrom(from.propagate_down_);
  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_phase()) {
      set_phase(from.phase());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_transform_param()) {
      mutable_transform_param()->::caffe::TransformationParameter::MergeFrom(from.transform_param());
    }
    if (from.has_loss_param()) {
      mutable_loss_param()->::caffe::LossParameter::MergeFrom(from.loss_param());
    }
    if (from.has_accuracy_param()) {
      mutable_accuracy_param()->::caffe::AccuracyParameter::MergeFrom(from.accuracy_param());
    }
    if (from.has_argmax_param()) {
      mutable_argmax_param()->::caffe::ArgMaxParameter::MergeFrom(from.argmax_param());
    }
    if (from.has_batch_norm_param()) {
      mutable_batch_norm_param()->::caffe::BatchNormParameter::MergeFrom(from.batch_norm_param());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bias_param()) {
      mutable_bias_param()->::caffe::BiasParameter::MergeFrom(from.bias_param());
    }
    if (from.has_concat_param()) {
      mutable_concat_param()->::caffe::ConcatParameter::MergeFrom(from.concat_param());
    }
    if (from.has_contrastive_loss_param()) {
      mutable_contrastive_loss_param()->::caffe::ContrastiveLossParameter::MergeFrom(from.contrastive_loss_param());
    }
    if (from.has_convolution_param()) {
      mutable_convolution_param()->::caffe::ConvolutionParameter::MergeFrom(from.convolution_param());
    }
    if (from.has_crop_param()) {
      mutable_crop_param()->::caffe::CropParameter::MergeFrom(from.crop_param());
    }
    if (from.has_data_param()) {
      mutable_data_param()->::caffe::DataParameter::MergeFrom(from.data_param());
    }
    if (from.has_dropout_param()) {
      mutable_dropout_param()->::caffe::DropoutParameter::MergeFrom(from.dropout_param());
    }
    if (from.has_dummy_data_param()) {
      mutable_dummy_data_param()->::caffe::DummyDataParameter::MergeFrom(from.dummy_data_param());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_eltwise_param()) {
      mutable_eltwise_param()->::caffe::EltwiseParameter::MergeFrom(from.eltwise_param());
    }
    if (from.has_elu_param()) {
      mutable_elu_param()->::caffe::ELUParameter::MergeFrom(from.elu_param());
    }
    if (from.has_embed_param()) {
      mutable_embed_param()->::caffe::EmbedParameter::MergeFrom(from.embed_param());
    }
    if (from.has_exp_param()) {
      mutable_exp_param()->::caffe::ExpParameter::MergeFrom(from.exp_param());
    }
    if (from.has_flatten_param()) {
      mutable_flatten_param()->::caffe::FlattenParameter::MergeFrom(from.flatten_param());
    }
    if (from.has_hdf5_data_param()) {
      mutable_hdf5_data_param()->::caffe::HDF5DataParameter::MergeFrom(from.hdf5_data_param());
    }
    if (from.has_hdf5_output_param()) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
    if (from.has_hinge_loss_param()) {
      mutable_hinge_loss_param()->::caffe::HingeLossParameter::MergeFrom(from.hinge_loss_param());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_image_data_param()) {
      mutable_image_data_param()->::caffe::ImageDataParameter::MergeFrom(from.image_data_param());
    }
    if (from.has_infogain_loss_param()) {
      mutable_infogain_loss_param()->::caffe::InfogainLossParameter::MergeFrom(from.infogain_loss_param());
    }
    if (from.has_inner_product_param()) {
      mutable_inner_product_param()->::caffe::InnerProductParameter::MergeFrom(from.inner_product_param());
    }
    if (from.has_input_param()) {
      mutable_input_param()->::caffe::InputParameter::MergeFrom(from.input_param());
    }
    if (from.has_log_param()) {
      mutable_log_param()->::caffe::LogParameter::MergeFrom(from.log_param());
    }
    if (from.has_lrn_param()) {
      mutable_lrn_param()->::caffe::LRNParameter::MergeFrom(from.lrn_param());
    }
    if (from.has_memory_data_param()) {
      mutable_memory_data_param()->::caffe::MemoryDataParameter::MergeFrom(from.memory_data_param());
    }
    if (from.has_mvn_param()) {
      mutable_mvn_param()->::caffe::MVNParameter::MergeFrom(from.mvn_param());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_parameter_param()) {
      mutable_parameter_param()->::caffe::ParameterParameter::MergeFrom(from.parameter_param());
    }
    if (from.has_pooling_param()) {
      mutable_pooling_param()->::caffe::PoolingParameter::MergeFrom(from.pooling_param());
    }
    if (from.has_power_param()) {
      mutable_power_param()->::caffe::PowerParameter::MergeFrom(from.power_param());
    }
    if (from.has_prelu_param()) {
      mutable_prelu_param()->::caffe::PReLUParameter::MergeFrom(from.prelu_param());
    }
    if (from.has_python_param()) {
      mutable_python_param()->::caffe::PythonParameter::MergeFrom(from.python_param());
    }
    if (from.has_recurrent_param()) {
      mutable_recurrent_param()->::caffe::RecurrentParameter::MergeFrom(from.recurrent_param());
    }
    if (from.has_reduction_param()) {
      mutable_reduction_param()->::caffe::ReductionParameter::MergeFrom(from.reduction_param());
    }
    if (from.has_relu_param()) {
      mutable_relu_param()->::caffe::ReLUParameter::MergeFrom(from.relu_param());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_reshape_param()) {
      mutable_reshape_param()->::caffe::ReshapeParameter::MergeFrom(from.reshape_param());
    }
    if (from.has_scale_param()) {
      mutable_scale_param()->::caffe::ScaleParameter::MergeFrom(from.scale_param());
    }
    if (from.has_sigmoid_param()) {
      mutable_sigmoid_param()->::caffe::SigmoidParameter::MergeFrom(from.sigmoid_param());
    }
    if (from.has_softmax_param()) {
      mutable_softmax_param()->::caffe::SoftmaxParameter::MergeFrom(from.softmax_param());
    }
    if (from.has_spp_param()) {
      mutable_spp_param()->::caffe::SPPParameter::MergeFrom(from.spp_param());
    }
    if (from.has_slice_param()) {
      mutable_slice_param()->::caffe::SliceParameter::MergeFrom(from.slice_param());
    }
    if (from.has_tanh_param()) {
      mutable_tanh_param()->::caffe::TanHParameter::MergeFrom(from.tanh_param());
    }
    if (from.has_threshold_param()) {
      mutable_threshold_param()->::caffe::ThresholdParameter::MergeFrom(from.threshold_param());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_tile_param()) {
      mutable_tile_param()->::caffe::TileParameter::MergeFrom(from.tile_param());
    }
    if (from.has_window_data_param()) {
      mutable_window_data_param()->::caffe::WindowDataParameter::MergeFrom(from.window_data_param());
    }
    if (from.has_input3d_param()) {
      mutable_input3d_param()->::caffe::Input3DParameter::MergeFrom(from.input3d_param());
    }
    if (from.has_clip_by_value_param()) {
      mutable_clip_by_value_param()->::caffe::ClipByValueParameter::MergeFrom(from.clip_by_value_param());
    }
    if (from.has_pooling3d_param()) {
      mutable_pooling3d_param()->::caffe::Pooling3DParameter::MergeFrom(from.pooling3d_param());
    }
    if (from.has_upsampling3d_param()) {
      mutable_upsampling3d_param()->::caffe::UpSampling3DParameter::MergeFrom(from.upsampling3d_param());
    }
    if (from.has_dual_update_param()) {
      mutable_dual_update_param()->::caffe::DualUpdateParameter::MergeFrom(from.dual_update_param());
    }
    if (from.has_primal_update_param()) {
      mutable_primal_update_param()->::caffe::PrimalUpdateParameter::MergeFrom(from.primal_update_param());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_lagrangian_update_param()) {
      mutable_lagrangian_update_param()->::caffe::LagrangianUpdateParameter::MergeFrom(from.lagrangian_update_param());
    }
    if (from.has_primal_dual_cross_entropy_loss_param()) {
      mutable_primal_dual_cross_entropy_loss_param()->::caffe::PrimalDualCrossEntropyLossParameter::MergeFrom(from.primal_dual_cross_entropy_loss_param());
    }
    if (from.has_dense_grid_data_write_param()) {
      mutable_dense_grid_data_write_param()->::caffe::DenseGridDataWriteParameter::MergeFrom(from.dense_grid_data_write_param());
    }
    if (from.has_accuracy_3dreconstruction_param()) {
      mutable_accuracy_3dreconstruction_param()->::caffe::Accuracy3DReconstructionParameter::MergeFrom(from.accuracy_3dreconstruction_param());
    }
    if (from.has_input_primal_dual_param()) {
      mutable_input_primal_dual_param()->::caffe::InputPrimalDualParameter::MergeFrom(from.input_primal_dual_param());
    }
    if (from.has_scaling_param()) {
      mutable_scaling_param()->::caffe::ScalingParameter::MergeFrom(from.scaling_param());
    }
    if (from.has_test_input3d_param()) {
      mutable_test_input3d_param()->::caffe::TestInput3DParameter::MergeFrom(from.test_input3d_param());
    }
    if (from.has_primal_dual_weighted_cross_entropy_loss_param()) {
      mutable_primal_dual_weighted_cross_entropy_loss_param()->::caffe::PrimalDualWeightedCrossEntropyLossParameter::MergeFrom(from.primal_dual_weighted_cross_entropy_loss_param());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_oct_dual_update_param()) {
      mutable_oct_dual_update_param()->::caffe::OctDualUpdateParameter::MergeFrom(from.oct_dual_update_param());
    }
    if (from.has_oct_primal_update_param()) {
      mutable_oct_primal_update_param()->::caffe::OctPrimalUpdateParameter::MergeFrom(from.oct_primal_update_param());
    }
    if (from.has_oct_prop_param()) {
      mutable_oct_prop_param()->::caffe::OctPropParameter::MergeFrom(from.oct_prop_param());
    }
    if (from.has_oct_prop_loss_prep_param()) {
      mutable_oct_prop_loss_prep_param()->::caffe::OctPropLossPrepParameter::MergeFrom(from.oct_prop_loss_prep_param());
    }
    if (from.has_oct_level_sampling_param()) {
      mutable_oct_level_sampling_param()->::caffe::OctLevelSamplingParameter::MergeFrom(from.oct_level_sampling_param());
    }
    if (from.has_oct_upsampling_param()) {
      mutable_oct_upsampling_param()->::caffe::OctUpSamplingParameter::MergeFrom(from.oct_upsampling_param());
    }
    if (from.has_oct_conv_param()) {
      mutable_oct_conv_param()->::caffe::OctConvParameter::MergeFrom(from.oct_conv_param());
    }
    if (from.has_oct_input_param()) {
      mutable_oct_input_param()->::caffe::OctInputParameter::MergeFrom(from.oct_input_param());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_oct_convert_param()) {
      mutable_oct_convert_param()->::caffe::OctConvertParameter::MergeFrom(from.oct_convert_param());
    }
    if (from.has_oct_input_primal_dual_param()) {
      mutable_oct_input_primal_dual_param()->::caffe::OctInputPrimalDualParameter::MergeFrom(from.oct_input_primal_dual_param());
    }
    if (from.has_oct_accuracy_3dreconstruction_param()) {
      mutable_oct_accuracy_3dreconstruction_param()->::caffe::OctAccuracy3DReconstructionParameter::MergeFrom(from.oct_accuracy_3dreconstruction_param());
    }
    if (from.has_oct_output_param()) {
      mutable_oct_output_param()->::caffe::OctOutputParameter::MergeFrom(from.oct_output_param());
    }
    if (from.has_dense_convert_param()) {
      mutable_dense_convert_param()->::caffe::DenseConvertParameter::MergeFrom(from.dense_convert_param());
    }
    if (from.has_oct_seg_loss_prep_param()) {
      mutable_oct_seg_loss_prep_param()->::caffe::OctSegLossPrepParameter::MergeFrom(from.oct_seg_loss_prep_param());
    }
    if (from.has_seg_cross_entropy_loss_param()) {
      mutable_seg_cross_entropy_loss_param()->::caffe::SegCrossEntropyLossParameter::MergeFrom(from.seg_cross_entropy_loss_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {

  return true;
}

void LayerParameter::Swap(LayerParameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    bottom_.Swap(&other->bottom_);
    top_.Swap(&other->top_);
    std::swap(phase_, other->phase_);
    loss_weight_.Swap(&other->loss_weight_);
    param_.Swap(&other->param_);
    blobs_.Swap(&other->blobs_);
    propagate_down_.Swap(&other->propagate_down_);
    include_.Swap(&other->include_);
    exclude_.Swap(&other->exclude_);
    std::swap(transform_param_, other->transform_param_);
    std::swap(loss_param_, other->loss_param_);
    std::swap(accuracy_param_, other->accuracy_param_);
    std::swap(argmax_param_, other->argmax_param_);
    std::swap(batch_norm_param_, other->batch_norm_param_);
    std::swap(bias_param_, other->bias_param_);
    std::swap(concat_param_, other->concat_param_);
    std::swap(contrastive_loss_param_, other->contrastive_loss_param_);
    std::swap(convolution_param_, other->convolution_param_);
    std::swap(crop_param_, other->crop_param_);
    std::swap(data_param_, other->data_param_);
    std::swap(dropout_param_, other->dropout_param_);
    std::swap(dummy_data_param_, other->dummy_data_param_);
    std::swap(eltwise_param_, other->eltwise_param_);
    std::swap(elu_param_, other->elu_param_);
    std::swap(embed_param_, other->embed_param_);
    std::swap(exp_param_, other->exp_param_);
    std::swap(flatten_param_, other->flatten_param_);
    std::swap(hdf5_data_param_, other->hdf5_data_param_);
    std::swap(hdf5_output_param_, other->hdf5_output_param_);
    std::swap(hinge_loss_param_, other->hinge_loss_param_);
    std::swap(image_data_param_, other->image_data_param_);
    std::swap(infogain_loss_param_, other->infogain_loss_param_);
    std::swap(inner_product_param_, other->inner_product_param_);
    std::swap(input_param_, other->input_param_);
    std::swap(log_param_, other->log_param_);
    std::swap(lrn_param_, other->lrn_param_);
    std::swap(memory_data_param_, other->memory_data_param_);
    std::swap(mvn_param_, other->mvn_param_);
    std::swap(parameter_param_, other->parameter_param_);
    std::swap(pooling_param_, other->pooling_param_);
    std::swap(power_param_, other->power_param_);
    std::swap(prelu_param_, other->prelu_param_);
    std::swap(python_param_, other->python_param_);
    std::swap(recurrent_param_, other->recurrent_param_);
    std::swap(reduction_param_, other->reduction_param_);
    std::swap(relu_param_, other->relu_param_);
    std::swap(reshape_param_, other->reshape_param_);
    std::swap(scale_param_, other->scale_param_);
    std::swap(sigmoid_param_, other->sigmoid_param_);
    std::swap(softmax_param_, other->softmax_param_);
    std::swap(spp_param_, other->spp_param_);
    std::swap(slice_param_, other->slice_param_);
    std::swap(tanh_param_, other->tanh_param_);
    std::swap(threshold_param_, other->threshold_param_);
    std::swap(tile_param_, other->tile_param_);
    std::swap(window_data_param_, other->window_data_param_);
    std::swap(input3d_param_, other->input3d_param_);
    std::swap(clip_by_value_param_, other->clip_by_value_param_);
    std::swap(pooling3d_param_, other->pooling3d_param_);
    std::swap(upsampling3d_param_, other->upsampling3d_param_);
    std::swap(dual_update_param_, other->dual_update_param_);
    std::swap(primal_update_param_, other->primal_update_param_);
    std::swap(lagrangian_update_param_, other->lagrangian_update_param_);
    std::swap(primal_dual_cross_entropy_loss_param_, other->primal_dual_cross_entropy_loss_param_);
    std::swap(dense_grid_data_write_param_, other->dense_grid_data_write_param_);
    std::swap(accuracy_3dreconstruction_param_, other->accuracy_3dreconstruction_param_);
    std::swap(input_primal_dual_param_, other->input_primal_dual_param_);
    std::swap(scaling_param_, other->scaling_param_);
    std::swap(test_input3d_param_, other->test_input3d_param_);
    std::swap(primal_dual_weighted_cross_entropy_loss_param_, other->primal_dual_weighted_cross_entropy_loss_param_);
    std::swap(oct_dual_update_param_, other->oct_dual_update_param_);
    std::swap(oct_primal_update_param_, other->oct_primal_update_param_);
    std::swap(oct_prop_param_, other->oct_prop_param_);
    std::swap(oct_prop_loss_prep_param_, other->oct_prop_loss_prep_param_);
    std::swap(oct_level_sampling_param_, other->oct_level_sampling_param_);
    std::swap(oct_upsampling_param_, other->oct_upsampling_param_);
    std::swap(oct_conv_param_, other->oct_conv_param_);
    std::swap(oct_input_param_, other->oct_input_param_);
    std::swap(oct_convert_param_, other->oct_convert_param_);
    std::swap(oct_input_primal_dual_param_, other->oct_input_primal_dual_param_);
    std::swap(oct_accuracy_3dreconstruction_param_, other->oct_accuracy_3dreconstruction_param_);
    std::swap(oct_output_param_, other->oct_output_param_);
    std::swap(dense_convert_param_, other->dense_convert_param_);
    std::swap(oct_seg_loss_prep_param_, other->oct_seg_loss_prep_param_);
    std::swap(seg_cross_entropy_loss_param_, other->seg_cross_entropy_loss_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerParameter_descriptor_;
  metadata.reflection = LayerParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransformationParameter::kScaleFieldNumber;
const int TransformationParameter::kMirrorFieldNumber;
const int TransformationParameter::kCropSizeFieldNumber;
const int TransformationParameter::kMeanFileFieldNumber;
const int TransformationParameter::kMeanValueFieldNumber;
const int TransformationParameter::kForceColorFieldNumber;
const int TransformationParameter::kForceGrayFieldNumber;
#endif  // !_MSC_VER

TransformationParameter::TransformationParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TransformationParameter)
}

void TransformationParameter::InitAsDefaultInstance() {
}

TransformationParameter::TransformationParameter(const TransformationParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.TransformationParameter)
}

void TransformationParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  scale_ = 1;
  mirror_ = false;
  crop_size_ = 0u;
  mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  force_color_ = false;
  force_gray_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformationParameter::~TransformationParameter() {
  // @@protoc_insertion_point(destructor:caffe.TransformationParameter)
  SharedDtor();
}

void TransformationParameter::SharedDtor() {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (this != default_instance_) {
  }
}

void TransformationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformationParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformationParameter_descriptor_;
}

const TransformationParameter& TransformationParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

TransformationParameter* TransformationParameter::default_instance_ = NULL;

TransformationParameter* TransformationParameter::New() const {
  return new TransformationParameter;
}

void TransformationParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TransformationParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(mirror_, force_gray_);
    scale_ = 1;
    crop_size_ = 0u;
    if (has_mean_file()) {
      if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mean_file_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mean_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransformationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TransformationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crop_size;
        break;
      }

      // optional uint32 crop_size = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_crop_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
          set_has_crop_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 4;
      case 4: {
        if (tag == 34) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_mean_value;
        break;
      }

      // repeated float mean_value = 5;
      case 5: {
        if (tag == 45) {
         parse_mean_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_mean_value())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_mean_value;
        if (input->ExpectTag(48)) goto parse_force_color;
        break;
      }

      // optional bool force_color = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_force_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_color_)));
          set_has_force_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_force_gray;
        break;
      }

      // optional bool force_gray = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_force_gray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_gray_)));
          set_has_force_gray();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TransformationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TransformationParameter)
  return false;
#undef DO_
}

void TransformationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TransformationParameter)
  // optional float scale = 1 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale(), output);
  }

  // optional bool mirror = 2 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mirror(), output);
  }

  // optional uint32 crop_size = 3 [default = 0];
  if (has_crop_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crop_size(), output);
  }

  // optional string mean_file = 4;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mean_file(), output);
  }

  // repeated float mean_value = 5;
  for (int i = 0; i < this->mean_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->mean_value(i), output);
  }

  // optional bool force_color = 6 [default = false];
  if (has_force_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->force_color(), output);
  }

  // optional bool force_gray = 7 [default = false];
  if (has_force_gray()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->force_gray(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TransformationParameter)
}

::google::protobuf::uint8* TransformationParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TransformationParameter)
  // optional float scale = 1 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale(), target);
  }

  // optional bool mirror = 2 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mirror(), target);
  }

  // optional uint32 crop_size = 3 [default = 0];
  if (has_crop_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crop_size(), target);
  }

  // optional string mean_file = 4;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mean_file(), target);
  }

  // repeated float mean_value = 5;
  for (int i = 0; i < this->mean_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->mean_value(i), target);
  }

  // optional bool force_color = 6 [default = false];
  if (has_force_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->force_color(), target);
  }

  // optional bool force_gray = 7 [default = false];
  if (has_force_gray()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->force_gray(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TransformationParameter)
  return target;
}

int TransformationParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float scale = 1 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional bool mirror = 2 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional uint32 crop_size = 3 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional string mean_file = 4;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional bool force_color = 6 [default = false];
    if (has_force_color()) {
      total_size += 1 + 1;
    }

    // optional bool force_gray = 7 [default = false];
    if (has_force_gray()) {
      total_size += 1 + 1;
    }

  }
  // repeated float mean_value = 5;
  {
    int data_size = 0;
    data_size = 4 * this->mean_value_size();
    total_size += 1 * this->mean_value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformationParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransformationParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransformationParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformationParameter::MergeFrom(const TransformationParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mean_value_.MergeFrom(from.mean_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
    if (from.has_crop_size()) {
      set_crop_size(from.crop_size());
    }
    if (from.has_mean_file()) {
      set_mean_file(from.mean_file());
    }
    if (from.has_force_color()) {
      set_force_color(from.force_color());
    }
    if (from.has_force_gray()) {
      set_force_gray(from.force_gray());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransformationParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationParameter::CopyFrom(const TransformationParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationParameter::IsInitialized() const {

  return true;
}

void TransformationParameter::Swap(TransformationParameter* other) {
  if (other != this) {
    std::swap(scale_, other->scale_);
    std::swap(mirror_, other->mirror_);
    std::swap(crop_size_, other->crop_size_);
    std::swap(mean_file_, other->mean_file_);
    mean_value_.Swap(&other->mean_value_);
    std::swap(force_color_, other->force_color_);
    std::swap(force_gray_, other->force_gray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransformationParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformationParameter_descriptor_;
  metadata.reflection = TransformationParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LossParameter_NormalizationMode_descriptor_;
}
bool LossParameter_NormalizationMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LossParameter_NormalizationMode LossParameter::FULL;
const LossParameter_NormalizationMode LossParameter::VALID;
const LossParameter_NormalizationMode LossParameter::BATCH_SIZE;
const LossParameter_NormalizationMode LossParameter::NONE;
const LossParameter_NormalizationMode LossParameter::NormalizationMode_MIN;
const LossParameter_NormalizationMode LossParameter::NormalizationMode_MAX;
const int LossParameter::NormalizationMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LossParameter::kIgnoreLabelFieldNumber;
const int LossParameter::kNormalizationFieldNumber;
const int LossParameter::kNormalizeFieldNumber;
#endif  // !_MSC_VER

LossParameter::LossParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LossParameter)
}

void LossParameter::InitAsDefaultInstance() {
}

LossParameter::LossParameter(const LossParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LossParameter)
}

void LossParameter::SharedCtor() {
  _cached_size_ = 0;
  ignore_label_ = 0;
  normalization_ = 1;
  normalize_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LossParameter::~LossParameter() {
  // @@protoc_insertion_point(destructor:caffe.LossParameter)
  SharedDtor();
}

void LossParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LossParameter_descriptor_;
}

const LossParameter& LossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LossParameter* LossParameter::default_instance_ = NULL;

LossParameter* LossParameter::New() const {
  return new LossParameter;
}

void LossParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    ignore_label_ = 0;
    normalization_ = 1;
    normalize_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ignore_label = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_label_)));
          set_has_ignore_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_normalize;
        break;
      }

      // optional bool normalize = 2;
      case 2: {
        if (tag == 16) {
         parse_normalize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_)));
          set_has_normalize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_normalization;
        break;
      }

      // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
      case 3: {
        if (tag == 24) {
         parse_normalization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LossParameter_NormalizationMode_IsValid(value)) {
            set_normalization(static_cast< ::caffe::LossParameter_NormalizationMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LossParameter)
  return false;
#undef DO_
}

void LossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LossParameter)
  // optional int32 ignore_label = 1;
  if (has_ignore_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ignore_label(), output);
  }

  // optional bool normalize = 2;
  if (has_normalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->normalize(), output);
  }

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  if (has_normalization()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->normalization(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LossParameter)
}

::google::protobuf::uint8* LossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LossParameter)
  // optional int32 ignore_label = 1;
  if (has_ignore_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ignore_label(), target);
  }

  // optional bool normalize = 2;
  if (has_normalize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->normalize(), target);
  }

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  if (has_normalization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->normalization(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LossParameter)
  return target;
}

int LossParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ignore_label = 1;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_label());
    }

    // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
    if (has_normalization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->normalization());
    }

    // optional bool normalize = 2;
    if (has_normalize()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LossParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LossParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LossParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LossParameter::MergeFrom(const LossParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ignore_label()) {
      set_ignore_label(from.ignore_label());
    }
    if (from.has_normalization()) {
      set_normalization(from.normalization());
    }
    if (from.has_normalize()) {
      set_normalize(from.normalize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LossParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossParameter::CopyFrom(const LossParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossParameter::IsInitialized() const {

  return true;
}

void LossParameter::Swap(LossParameter* other) {
  if (other != this) {
    std::swap(ignore_label_, other->ignore_label_);
    std::swap(normalization_, other->normalization_);
    std::swap(normalize_, other->normalize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LossParameter_descriptor_;
  metadata.reflection = LossParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccuracyParameter::kTopKFieldNumber;
const int AccuracyParameter::kAxisFieldNumber;
const int AccuracyParameter::kIgnoreLabelFieldNumber;
#endif  // !_MSC_VER

AccuracyParameter::AccuracyParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.AccuracyParameter)
}

void AccuracyParameter::InitAsDefaultInstance() {
}

AccuracyParameter::AccuracyParameter(const AccuracyParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.AccuracyParameter)
}

void AccuracyParameter::SharedCtor() {
  _cached_size_ = 0;
  top_k_ = 1u;
  axis_ = 1;
  ignore_label_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccuracyParameter::~AccuracyParameter() {
  // @@protoc_insertion_point(destructor:caffe.AccuracyParameter)
  SharedDtor();
}

void AccuracyParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccuracyParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccuracyParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccuracyParameter_descriptor_;
}

const AccuracyParameter& AccuracyParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

AccuracyParameter* AccuracyParameter::default_instance_ = NULL;

AccuracyParameter* AccuracyParameter::New() const {
  return new AccuracyParameter;
}

void AccuracyParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    top_k_ = 1u;
    axis_ = 1;
    ignore_label_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccuracyParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.AccuracyParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 top_k = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_k_)));
          set_has_top_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ignore_label;
        break;
      }

      // optional int32 ignore_label = 3;
      case 3: {
        if (tag == 24) {
         parse_ignore_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_label_)));
          set_has_ignore_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.AccuracyParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.AccuracyParameter)
  return false;
#undef DO_
}

void AccuracyParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.AccuracyParameter)
  // optional uint32 top_k = 1 [default = 1];
  if (has_top_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->top_k(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional int32 ignore_label = 3;
  if (has_ignore_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ignore_label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.AccuracyParameter)
}

::google::protobuf::uint8* AccuracyParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.AccuracyParameter)
  // optional uint32 top_k = 1 [default = 1];
  if (has_top_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->top_k(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional int32 ignore_label = 3;
  if (has_ignore_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ignore_label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.AccuracyParameter)
  return target;
}

int AccuracyParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 top_k = 1 [default = 1];
    if (has_top_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_k());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 ignore_label = 3;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccuracyParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccuracyParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccuracyParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccuracyParameter::MergeFrom(const AccuracyParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_k()) {
      set_top_k(from.top_k());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_ignore_label()) {
      set_ignore_label(from.ignore_label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccuracyParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccuracyParameter::CopyFrom(const AccuracyParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccuracyParameter::IsInitialized() const {

  return true;
}

void AccuracyParameter::Swap(AccuracyParameter* other) {
  if (other != this) {
    std::swap(top_k_, other->top_k_);
    std::swap(axis_, other->axis_);
    std::swap(ignore_label_, other->ignore_label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccuracyParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccuracyParameter_descriptor_;
  metadata.reflection = AccuracyParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArgMaxParameter::kOutMaxValFieldNumber;
const int ArgMaxParameter::kTopKFieldNumber;
const int ArgMaxParameter::kAxisFieldNumber;
#endif  // !_MSC_VER

ArgMaxParameter::ArgMaxParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ArgMaxParameter)
}

void ArgMaxParameter::InitAsDefaultInstance() {
}

ArgMaxParameter::ArgMaxParameter(const ArgMaxParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ArgMaxParameter)
}

void ArgMaxParameter::SharedCtor() {
  _cached_size_ = 0;
  out_max_val_ = false;
  top_k_ = 1u;
  axis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArgMaxParameter::~ArgMaxParameter() {
  // @@protoc_insertion_point(destructor:caffe.ArgMaxParameter)
  SharedDtor();
}

void ArgMaxParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArgMaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArgMaxParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArgMaxParameter_descriptor_;
}

const ArgMaxParameter& ArgMaxParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ArgMaxParameter* ArgMaxParameter::default_instance_ = NULL;

ArgMaxParameter* ArgMaxParameter::New() const {
  return new ArgMaxParameter;
}

void ArgMaxParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    out_max_val_ = false;
    top_k_ = 1u;
    axis_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArgMaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ArgMaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool out_max_val = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &out_max_val_)));
          set_has_out_max_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_top_k;
        break;
      }

      // optional uint32 top_k = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_top_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_k_)));
          set_has_top_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_axis;
        break;
      }

      // optional int32 axis = 3;
      case 3: {
        if (tag == 24) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ArgMaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ArgMaxParameter)
  return false;
#undef DO_
}

void ArgMaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ArgMaxParameter)
  // optional bool out_max_val = 1 [default = false];
  if (has_out_max_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->out_max_val(), output);
  }

  // optional uint32 top_k = 2 [default = 1];
  if (has_top_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top_k(), output);
  }

  // optional int32 axis = 3;
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->axis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ArgMaxParameter)
}

::google::protobuf::uint8* ArgMaxParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ArgMaxParameter)
  // optional bool out_max_val = 1 [default = false];
  if (has_out_max_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->out_max_val(), target);
  }

  // optional uint32 top_k = 2 [default = 1];
  if (has_top_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top_k(), target);
  }

  // optional int32 axis = 3;
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->axis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ArgMaxParameter)
  return target;
}

int ArgMaxParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool out_max_val = 1 [default = false];
    if (has_out_max_val()) {
      total_size += 1 + 1;
    }

    // optional uint32 top_k = 2 [default = 1];
    if (has_top_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_k());
    }

    // optional int32 axis = 3;
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArgMaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArgMaxParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArgMaxParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArgMaxParameter::MergeFrom(const ArgMaxParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_out_max_val()) {
      set_out_max_val(from.out_max_val());
    }
    if (from.has_top_k()) {
      set_top_k(from.top_k());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArgMaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArgMaxParameter::CopyFrom(const ArgMaxParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgMaxParameter::IsInitialized() const {

  return true;
}

void ArgMaxParameter::Swap(ArgMaxParameter* other) {
  if (other != this) {
    std::swap(out_max_val_, other->out_max_val_);
    std::swap(top_k_, other->top_k_);
    std::swap(axis_, other->axis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArgMaxParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArgMaxParameter_descriptor_;
  metadata.reflection = ArgMaxParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConcatParameter::kAxisFieldNumber;
const int ConcatParameter::kConcatDimFieldNumber;
#endif  // !_MSC_VER

ConcatParameter::ConcatParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConcatParameter)
}

void ConcatParameter::InitAsDefaultInstance() {
}

ConcatParameter::ConcatParameter(const ConcatParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ConcatParameter)
}

void ConcatParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  concat_dim_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConcatParameter::~ConcatParameter() {
  // @@protoc_insertion_point(destructor:caffe.ConcatParameter)
  SharedDtor();
}

void ConcatParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConcatParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcatParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConcatParameter_descriptor_;
}

const ConcatParameter& ConcatParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ConcatParameter* ConcatParameter::default_instance_ = NULL;

ConcatParameter* ConcatParameter::New() const {
  return new ConcatParameter;
}

void ConcatParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    axis_ = 1;
    concat_dim_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConcatParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConcatParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 concat_dim = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &concat_dim_)));
          set_has_concat_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConcatParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConcatParameter)
  return false;
#undef DO_
}

void ConcatParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConcatParameter)
  // optional uint32 concat_dim = 1 [default = 1];
  if (has_concat_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->concat_dim(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConcatParameter)
}

::google::protobuf::uint8* ConcatParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConcatParameter)
  // optional uint32 concat_dim = 1 [default = 1];
  if (has_concat_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->concat_dim(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConcatParameter)
  return target;
}

int ConcatParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional uint32 concat_dim = 1 [default = 1];
    if (has_concat_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->concat_dim());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcatParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConcatParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConcatParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConcatParameter::MergeFrom(const ConcatParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_concat_dim()) {
      set_concat_dim(from.concat_dim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConcatParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatParameter::CopyFrom(const ConcatParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatParameter::IsInitialized() const {

  return true;
}

void ConcatParameter::Swap(ConcatParameter* other) {
  if (other != this) {
    std::swap(axis_, other->axis_);
    std::swap(concat_dim_, other->concat_dim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConcatParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConcatParameter_descriptor_;
  metadata.reflection = ConcatParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchNormParameter::kUseGlobalStatsFieldNumber;
const int BatchNormParameter::kMovingAverageFractionFieldNumber;
const int BatchNormParameter::kEpsFieldNumber;
#endif  // !_MSC_VER

BatchNormParameter::BatchNormParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BatchNormParameter)
}

void BatchNormParameter::InitAsDefaultInstance() {
}

BatchNormParameter::BatchNormParameter(const BatchNormParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BatchNormParameter)
}

void BatchNormParameter::SharedCtor() {
  _cached_size_ = 0;
  use_global_stats_ = false;
  moving_average_fraction_ = 0.999f;
  eps_ = 1e-05f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchNormParameter::~BatchNormParameter() {
  // @@protoc_insertion_point(destructor:caffe.BatchNormParameter)
  SharedDtor();
}

void BatchNormParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchNormParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchNormParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchNormParameter_descriptor_;
}

const BatchNormParameter& BatchNormParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

BatchNormParameter* BatchNormParameter::default_instance_ = NULL;

BatchNormParameter* BatchNormParameter::New() const {
  return new BatchNormParameter;
}

void BatchNormParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    use_global_stats_ = false;
    moving_average_fraction_ = 0.999f;
    eps_ = 1e-05f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchNormParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BatchNormParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_global_stats = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_global_stats_)));
          set_has_use_global_stats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_moving_average_fraction;
        break;
      }

      // optional float moving_average_fraction = 2 [default = 0.999];
      case 2: {
        if (tag == 21) {
         parse_moving_average_fraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moving_average_fraction_)));
          set_has_moving_average_fraction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_eps;
        break;
      }

      // optional float eps = 3 [default = 1e-05];
      case 3: {
        if (tag == 29) {
         parse_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BatchNormParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BatchNormParameter)
  return false;
#undef DO_
}

void BatchNormParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BatchNormParameter)
  // optional bool use_global_stats = 1;
  if (has_use_global_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_global_stats(), output);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (has_moving_average_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->moving_average_fraction(), output);
  }

  // optional float eps = 3 [default = 1e-05];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BatchNormParameter)
}

::google::protobuf::uint8* BatchNormParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BatchNormParameter)
  // optional bool use_global_stats = 1;
  if (has_use_global_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_global_stats(), target);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (has_moving_average_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->moving_average_fraction(), target);
  }

  // optional float eps = 3 [default = 1e-05];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BatchNormParameter)
  return target;
}

int BatchNormParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool use_global_stats = 1;
    if (has_use_global_stats()) {
      total_size += 1 + 1;
    }

    // optional float moving_average_fraction = 2 [default = 0.999];
    if (has_moving_average_fraction()) {
      total_size += 1 + 4;
    }

    // optional float eps = 3 [default = 1e-05];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchNormParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchNormParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchNormParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchNormParameter::MergeFrom(const BatchNormParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_global_stats()) {
      set_use_global_stats(from.use_global_stats());
    }
    if (from.has_moving_average_fraction()) {
      set_moving_average_fraction(from.moving_average_fraction());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchNormParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNormParameter::CopyFrom(const BatchNormParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormParameter::IsInitialized() const {

  return true;
}

void BatchNormParameter::Swap(BatchNormParameter* other) {
  if (other != this) {
    std::swap(use_global_stats_, other->use_global_stats_);
    std::swap(moving_average_fraction_, other->moving_average_fraction_);
    std::swap(eps_, other->eps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchNormParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchNormParameter_descriptor_;
  metadata.reflection = BatchNormParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BiasParameter::kAxisFieldNumber;
const int BiasParameter::kNumAxesFieldNumber;
const int BiasParameter::kFillerFieldNumber;
#endif  // !_MSC_VER

BiasParameter::BiasParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BiasParameter)
}

void BiasParameter::InitAsDefaultInstance() {
  filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

BiasParameter::BiasParameter(const BiasParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.BiasParameter)
}

void BiasParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  num_axes_ = 1;
  filler_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BiasParameter::~BiasParameter() {
  // @@protoc_insertion_point(destructor:caffe.BiasParameter)
  SharedDtor();
}

void BiasParameter::SharedDtor() {
  if (this != default_instance_) {
    delete filler_;
  }
}

void BiasParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiasParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiasParameter_descriptor_;
}

const BiasParameter& BiasParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

BiasParameter* BiasParameter::default_instance_ = NULL;

BiasParameter* BiasParameter::New() const {
  return new BiasParameter;
}

void BiasParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    axis_ = 1;
    num_axes_ = 1;
    if (has_filler()) {
      if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BiasParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BiasParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_axes;
        break;
      }

      // optional int32 num_axes = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_num_axes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
          set_has_num_axes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filler;
        break;
      }

      // optional .caffe.FillerParameter filler = 3;
      case 3: {
        if (tag == 26) {
         parse_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BiasParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BiasParameter)
  return false;
#undef DO_
}

void BiasParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BiasParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (has_num_axes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_axes(), output);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (has_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->filler(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BiasParameter)
}

::google::protobuf::uint8* BiasParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BiasParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (has_num_axes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_axes(), target);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (has_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->filler(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BiasParameter)
  return target;
}

int BiasParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

    // optional .caffe.FillerParameter filler = 3;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filler());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiasParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BiasParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BiasParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BiasParameter::MergeFrom(const BiasParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_num_axes()) {
      set_num_axes(from.num_axes());
    }
    if (from.has_filler()) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BiasParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiasParameter::CopyFrom(const BiasParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiasParameter::IsInitialized() const {

  return true;
}

void BiasParameter::Swap(BiasParameter* other) {
  if (other != this) {
    std::swap(axis_, other->axis_);
    std::swap(num_axes_, other->num_axes_);
    std::swap(filler_, other->filler_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BiasParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BiasParameter_descriptor_;
  metadata.reflection = BiasParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContrastiveLossParameter::kMarginFieldNumber;
const int ContrastiveLossParameter::kLegacyVersionFieldNumber;
#endif  // !_MSC_VER

ContrastiveLossParameter::ContrastiveLossParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ContrastiveLossParameter)
}

void ContrastiveLossParameter::InitAsDefaultInstance() {
}

ContrastiveLossParameter::ContrastiveLossParameter(const ContrastiveLossParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ContrastiveLossParameter)
}

void ContrastiveLossParameter::SharedCtor() {
  _cached_size_ = 0;
  margin_ = 1;
  legacy_version_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContrastiveLossParameter::~ContrastiveLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.ContrastiveLossParameter)
  SharedDtor();
}

void ContrastiveLossParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContrastiveLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContrastiveLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContrastiveLossParameter_descriptor_;
}

const ContrastiveLossParameter& ContrastiveLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ContrastiveLossParameter* ContrastiveLossParameter::default_instance_ = NULL;

ContrastiveLossParameter* ContrastiveLossParameter::New() const {
  return new ContrastiveLossParameter;
}

void ContrastiveLossParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    margin_ = 1;
    legacy_version_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContrastiveLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ContrastiveLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float margin = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_)));
          set_has_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_legacy_version;
        break;
      }

      // optional bool legacy_version = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_legacy_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legacy_version_)));
          set_has_legacy_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ContrastiveLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ContrastiveLossParameter)
  return false;
#undef DO_
}

void ContrastiveLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ContrastiveLossParameter)
  // optional float margin = 1 [default = 1];
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->margin(), output);
  }

  // optional bool legacy_version = 2 [default = false];
  if (has_legacy_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->legacy_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ContrastiveLossParameter)
}

::google::protobuf::uint8* ContrastiveLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ContrastiveLossParameter)
  // optional float margin = 1 [default = 1];
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->margin(), target);
  }

  // optional bool legacy_version = 2 [default = false];
  if (has_legacy_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->legacy_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ContrastiveLossParameter)
  return target;
}

int ContrastiveLossParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float margin = 1 [default = 1];
    if (has_margin()) {
      total_size += 1 + 4;
    }

    // optional bool legacy_version = 2 [default = false];
    if (has_legacy_version()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContrastiveLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContrastiveLossParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContrastiveLossParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContrastiveLossParameter::MergeFrom(const ContrastiveLossParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_margin()) {
      set_margin(from.margin());
    }
    if (from.has_legacy_version()) {
      set_legacy_version(from.legacy_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContrastiveLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContrastiveLossParameter::CopyFrom(const ContrastiveLossParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContrastiveLossParameter::IsInitialized() const {

  return true;
}

void ContrastiveLossParameter::Swap(ContrastiveLossParameter* other) {
  if (other != this) {
    std::swap(margin_, other->margin_);
    std::swap(legacy_version_, other->legacy_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContrastiveLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContrastiveLossParameter_descriptor_;
  metadata.reflection = ContrastiveLossParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvolutionParameter_Engine_descriptor_;
}
bool ConvolutionParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ConvolutionParameter_Engine ConvolutionParameter::DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter::CAFFE;
const ConvolutionParameter_Engine ConvolutionParameter::CUDNN;
const ConvolutionParameter_Engine ConvolutionParameter::Engine_MIN;
const ConvolutionParameter_Engine ConvolutionParameter::Engine_MAX;
const int ConvolutionParameter::Engine_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ConvolutionParameter::kNumOutputFieldNumber;
const int ConvolutionParameter::kBiasTermFieldNumber;
const int ConvolutionParameter::kPadFieldNumber;
const int ConvolutionParameter::kKernelSizeFieldNumber;
const int ConvolutionParameter::kStrideFieldNumber;
const int ConvolutionParameter::kDilationFieldNumber;
const int ConvolutionParameter::kPadHFieldNumber;
const int ConvolutionParameter::kPadWFieldNumber;
const int ConvolutionParameter::kKernelHFieldNumber;
const int ConvolutionParameter::kKernelWFieldNumber;
const int ConvolutionParameter::kStrideHFieldNumber;
const int ConvolutionParameter::kStrideWFieldNumber;
const int ConvolutionParameter::kGroupFieldNumber;
const int ConvolutionParameter::kWeightFillerFieldNumber;
const int ConvolutionParameter::kBiasFillerFieldNumber;
const int ConvolutionParameter::kEngineFieldNumber;
const int ConvolutionParameter::kAxisFieldNumber;
const int ConvolutionParameter::kForceNdIm2ColFieldNumber;
#endif  // !_MSC_VER

ConvolutionParameter::ConvolutionParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConvolutionParameter)
}

void ConvolutionParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

ConvolutionParameter::ConvolutionParameter(const ConvolutionParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ConvolutionParameter)
}

void ConvolutionParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  bias_term_ = true;
  pad_h_ = 0u;
  pad_w_ = 0u;
  kernel_h_ = 0u;
  kernel_w_ = 0u;
  stride_h_ = 0u;
  stride_w_ = 0u;
  group_ = 1u;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  engine_ = 0;
  axis_ = 1;
  force_nd_im2col_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvolutionParameter::~ConvolutionParameter() {
  // @@protoc_insertion_point(destructor:caffe.ConvolutionParameter)
  SharedDtor();
}

void ConvolutionParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void ConvolutionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvolutionParameter_descriptor_;
}

const ConvolutionParameter& ConvolutionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ConvolutionParameter* ConvolutionParameter::default_instance_ = NULL;

ConvolutionParameter* ConvolutionParameter::New() const {
  return new ConvolutionParameter;
}

void ConvolutionParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConvolutionParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 195) {
    ZR_(num_output_, pad_h_);
    bias_term_ = true;
    pad_w_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(kernel_h_, kernel_w_);
    ZR_(stride_h_, stride_w_);
    group_ = 1u;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
    engine_ = 0;
  }
  if (_has_bits_[16 / 32] & 196608) {
    axis_ = 1;
    force_nd_im2col_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  pad_.Clear();
  kernel_size_.Clear();
  stride_.Clear();
  dilation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConvolutionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConvolutionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_bias_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
          set_has_bias_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pad;
        break;
      }

      // repeated uint32 pad = 3;
      case 3: {
        if (tag == 24) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_pad())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pad())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pad;
        if (input->ExpectTag(32)) goto parse_kernel_size;
        break;
      }

      // repeated uint32 kernel_size = 4;
      case 4: {
        if (tag == 32) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_kernel_size())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_kernel_size())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kernel_size;
        if (input->ExpectTag(40)) goto parse_group;
        break;
      }

      // optional uint32 group = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stride;
        break;
      }

      // repeated uint32 stride = 6;
      case 6: {
        if (tag == 48) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_stride())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stride())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stride;
        if (input->ExpectTag(58)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      case 7: {
        if (tag == 58) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      case 8: {
        if (tag == 66) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pad_h;
        break;
      }

      // optional uint32 pad_h = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_pad_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
          set_has_pad_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pad_w;
        break;
      }

      // optional uint32 pad_w = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_pad_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
          set_has_pad_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_kernel_h;
        break;
      }

      // optional uint32 kernel_h = 11;
      case 11: {
        if (tag == 88) {
         parse_kernel_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_h_)));
          set_has_kernel_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_kernel_w;
        break;
      }

      // optional uint32 kernel_w = 12;
      case 12: {
        if (tag == 96) {
         parse_kernel_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_w_)));
          set_has_kernel_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_stride_h;
        break;
      }

      // optional uint32 stride_h = 13;
      case 13: {
        if (tag == 104) {
         parse_stride_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
          set_has_stride_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_stride_w;
        break;
      }

      // optional uint32 stride_w = 14;
      case 14: {
        if (tag == 112) {
         parse_stride_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
          set_has_stride_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_engine;
        break;
      }

      // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
      case 15: {
        if (tag == 120) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ConvolutionParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::ConvolutionParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_axis;
        break;
      }

      // optional int32 axis = 16 [default = 1];
      case 16: {
        if (tag == 128) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_force_nd_im2col;
        break;
      }

      // optional bool force_nd_im2col = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_force_nd_im2col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_nd_im2col_)));
          set_has_force_nd_im2col();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_dilation;
        break;
      }

      // repeated uint32 dilation = 18;
      case 18: {
        if (tag == 144) {
         parse_dilation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_dilation())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dilation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_dilation;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConvolutionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConvolutionParameter)
  return false;
#undef DO_
}

void ConvolutionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConvolutionParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // repeated uint32 pad = 3;
  for (int i = 0; i < this->pad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->pad(i), output);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0; i < this->kernel_size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->kernel_size(i), output);
  }

  // optional uint32 group = 5 [default = 1];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group(), output);
  }

  // repeated uint32 stride = 6;
  for (int i = 0; i < this->stride_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->stride(i), output);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->weight_filler(), output);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->bias_filler(), output);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
  }

  // optional uint32 kernel_h = 11;
  if (has_kernel_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kernel_h(), output);
  }

  // optional uint32 kernel_w = 12;
  if (has_kernel_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->kernel_w(), output);
  }

  // optional uint32 stride_h = 13;
  if (has_stride_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->stride_h(), output);
  }

  // optional uint32 stride_w = 14;
  if (has_stride_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->stride_w(), output);
  }

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->engine(), output);
  }

  // optional int32 axis = 16 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->axis(), output);
  }

  // optional bool force_nd_im2col = 17 [default = false];
  if (has_force_nd_im2col()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->force_nd_im2col(), output);
  }

  // repeated uint32 dilation = 18;
  for (int i = 0; i < this->dilation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->dilation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConvolutionParameter)
}

::google::protobuf::uint8* ConvolutionParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConvolutionParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // repeated uint32 pad = 3;
  for (int i = 0; i < this->pad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->pad(i), target);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0; i < this->kernel_size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->kernel_size(i), target);
  }

  // optional uint32 group = 5 [default = 1];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group(), target);
  }

  // repeated uint32 stride = 6;
  for (int i = 0; i < this->stride_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->stride(i), target);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->weight_filler(), target);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->bias_filler(), target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
  }

  // optional uint32 kernel_h = 11;
  if (has_kernel_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kernel_h(), target);
  }

  // optional uint32 kernel_w = 12;
  if (has_kernel_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->kernel_w(), target);
  }

  // optional uint32 stride_h = 13;
  if (has_stride_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->stride_h(), target);
  }

  // optional uint32 stride_w = 14;
  if (has_stride_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->stride_w(), target);
  }

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->engine(), target);
  }

  // optional int32 axis = 16 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->axis(), target);
  }

  // optional bool force_nd_im2col = 17 [default = false];
  if (has_force_nd_im2col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->force_nd_im2col(), target);
  }

  // repeated uint32 dilation = 18;
  for (int i = 0; i < this->dilation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->dilation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConvolutionParameter)
  return target;
}

int ConvolutionParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 10 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 kernel_h = 11;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_h());
    }

    // optional uint32 kernel_w = 12;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_w());
    }

    // optional uint32 stride_h = 13;
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

    // optional uint32 stride_w = 14;
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional uint32 group = 5 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional .caffe.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_filler());
    }

    // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 axis = 16 [default = 1];
    if (has_axis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional bool force_nd_im2col = 17 [default = false];
    if (has_force_nd_im2col()) {
      total_size += 2 + 1;
    }

  }
  // repeated uint32 pad = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pad_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pad(i));
    }
    total_size += 1 * this->pad_size() + data_size;
  }

  // repeated uint32 kernel_size = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->kernel_size_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->kernel_size(i));
    }
    total_size += 1 * this->kernel_size_size() + data_size;
  }

  // repeated uint32 stride = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->stride_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stride(i));
    }
    total_size += 1 * this->stride_size() + data_size;
  }

  // repeated uint32 dilation = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->dilation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dilation(i));
    }
    total_size += 2 * this->dilation_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConvolutionParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConvolutionParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConvolutionParameter::MergeFrom(const ConvolutionParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  pad_.MergeFrom(from.pad_);
  kernel_size_.MergeFrom(from.kernel_size_);
  stride_.MergeFrom(from.stride_);
  dilation_.MergeFrom(from.dilation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_pad_h()) {
      set_pad_h(from.pad_h());
    }
    if (from.has_pad_w()) {
      set_pad_w(from.pad_w());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kernel_h()) {
      set_kernel_h(from.kernel_h());
    }
    if (from.has_kernel_w()) {
      set_kernel_w(from.kernel_w());
    }
    if (from.has_stride_h()) {
      set_stride_h(from.stride_h());
    }
    if (from.has_stride_w()) {
      set_stride_w(from.stride_w());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_force_nd_im2col()) {
      set_force_nd_im2col(from.force_nd_im2col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConvolutionParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionParameter::CopyFrom(const ConvolutionParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionParameter::IsInitialized() const {

  return true;
}

void ConvolutionParameter::Swap(ConvolutionParameter* other) {
  if (other != this) {
    std::swap(num_output_, other->num_output_);
    std::swap(bias_term_, other->bias_term_);
    pad_.Swap(&other->pad_);
    kernel_size_.Swap(&other->kernel_size_);
    stride_.Swap(&other->stride_);
    dilation_.Swap(&other->dilation_);
    std::swap(pad_h_, other->pad_h_);
    std::swap(pad_w_, other->pad_w_);
    std::swap(kernel_h_, other->kernel_h_);
    std::swap(kernel_w_, other->kernel_w_);
    std::swap(stride_h_, other->stride_h_);
    std::swap(stride_w_, other->stride_w_);
    std::swap(group_, other->group_);
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(bias_filler_, other->bias_filler_);
    std::swap(engine_, other->engine_);
    std::swap(axis_, other->axis_);
    std::swap(force_nd_im2col_, other->force_nd_im2col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConvolutionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvolutionParameter_descriptor_;
  metadata.reflection = ConvolutionParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CropParameter::kAxisFieldNumber;
const int CropParameter::kOffsetFieldNumber;
#endif  // !_MSC_VER

CropParameter::CropParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.CropParameter)
}

void CropParameter::InitAsDefaultInstance() {
}

CropParameter::CropParameter(const CropParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.CropParameter)
}

void CropParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CropParameter::~CropParameter() {
  // @@protoc_insertion_point(destructor:caffe.CropParameter)
  SharedDtor();
}

void CropParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CropParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CropParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CropParameter_descriptor_;
}

const CropParameter& CropParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

CropParameter* CropParameter::default_instance_ = NULL;

CropParameter* CropParameter::New() const {
  return new CropParameter;
}

void CropParameter::Clear() {
  axis_ = 2;
  offset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CropParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.CropParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // repeated uint32 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_offset())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_offset())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.CropParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.CropParameter)
  return false;
#undef DO_
}

void CropParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.CropParameter)
  // optional int32 axis = 1 [default = 2];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // repeated uint32 offset = 2;
  for (int i = 0; i < this->offset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->offset(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.CropParameter)
}

::google::protobuf::uint8* CropParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.CropParameter)
  // optional int32 axis = 1 [default = 2];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // repeated uint32 offset = 2;
  for (int i = 0; i < this->offset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->offset(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.CropParameter)
  return target;
}

int CropParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 axis = 1 [default = 2];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  // repeated uint32 offset = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->offset_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->offset(i));
    }
    total_size += 1 * this->offset_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CropParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CropParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CropParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CropParameter::MergeFrom(const CropParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  offset_.MergeFrom(from.offset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CropParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CropParameter::CopyFrom(const CropParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropParameter::IsInitialized() const {

  return true;
}

void CropParameter::Swap(CropParameter* other) {
  if (other != this) {
    std::swap(axis_, other->axis_);
    offset_.Swap(&other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CropParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CropParameter_descriptor_;
  metadata.reflection = CropParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataParameter_DB_descriptor_;
}
bool DataParameter_DB_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataParameter_DB DataParameter::LEVELDB;
const DataParameter_DB DataParameter::LMDB;
const DataParameter_DB DataParameter::DB_MIN;
const DataParameter_DB DataParameter::DB_MAX;
const int DataParameter::DB_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DataParameter::kSourceFieldNumber;
const int DataParameter::kBatchSizeFieldNumber;
const int DataParameter::kRandSkipFieldNumber;
const int DataParameter::kBackendFieldNumber;
const int DataParameter::kScaleFieldNumber;
const int DataParameter::kMeanFileFieldNumber;
const int DataParameter::kCropSizeFieldNumber;
const int DataParameter::kMirrorFieldNumber;
const int DataParameter::kForceEncodedColorFieldNumber;
const int DataParameter::kPrefetchFieldNumber;
#endif  // !_MSC_VER

DataParameter::DataParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DataParameter)
}

void DataParameter::InitAsDefaultInstance() {
}

DataParameter::DataParameter(const DataParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.DataParameter)
}

void DataParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 0u;
  rand_skip_ = 0u;
  backend_ = 0;
  scale_ = 1;
  mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_size_ = 0u;
  mirror_ = false;
  force_encoded_color_ = false;
  prefetch_ = 4u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataParameter::~DataParameter() {
  // @@protoc_insertion_point(destructor:caffe.DataParameter)
  SharedDtor();
}

void DataParameter::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (this != default_instance_) {
  }
}

void DataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataParameter_descriptor_;
}

const DataParameter& DataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

DataParameter* DataParameter::default_instance_ = NULL;

DataParameter* DataParameter::New() const {
  return new DataParameter;
}

void DataParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DataParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(batch_size_, backend_);
    ZR_(crop_size_, mirror_);
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    scale_ = 1;
    if (has_mean_file()) {
      if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mean_file_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    force_encoded_color_ = false;
    prefetch_ = 4u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (tag == 26) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (tag == 32) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crop_size;
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_crop_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
          set_has_crop_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rand_skip;
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_rand_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
          set_has_rand_skip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_backend;
        break;
      }

      // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
      case 8: {
        if (tag == 64) {
         parse_backend:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::DataParameter_DB_IsValid(value)) {
            set_backend(static_cast< ::caffe::DataParameter_DB >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_force_encoded_color;
        break;
      }

      // optional bool force_encoded_color = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_force_encoded_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_encoded_color_)));
          set_has_force_encoded_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_prefetch;
        break;
      }

      // optional uint32 prefetch = 10 [default = 4];
      case 10: {
        if (tag == 80) {
         parse_prefetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefetch_)));
          set_has_prefetch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DataParameter)
  return false;
#undef DO_
}

void DataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (has_rand_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  if (has_backend()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->backend(), output);
  }

  // optional bool force_encoded_color = 9 [default = false];
  if (has_force_encoded_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->force_encoded_color(), output);
  }

  // optional uint32 prefetch = 10 [default = 4];
  if (has_prefetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->prefetch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DataParameter)
}

::google::protobuf::uint8* DataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (has_rand_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  if (has_backend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->backend(), target);
  }

  // optional bool force_encoded_color = 9 [default = false];
  if (has_force_encoded_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->force_encoded_color(), target);
  }

  // optional uint32 prefetch = 10 [default = 4];
  if (has_prefetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->prefetch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DataParameter)
  return target;
}

int DataParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
    if (has_backend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->backend());
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool force_encoded_color = 9 [default = false];
    if (has_force_encoded_color()) {
      total_size += 1 + 1;
    }

    // optional uint32 prefetch = 10 [default = 4];
    if (has_prefetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prefetch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataParameter::MergeFrom(const DataParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_rand_skip()) {
      set_rand_skip(from.rand_skip());
    }
    if (from.has_backend()) {
      set_backend(from.backend());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_mean_file()) {
      set_mean_file(from.mean_file());
    }
    if (from.has_crop_size()) {
      set_crop_size(from.crop_size());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_force_encoded_color()) {
      set_force_encoded_color(from.force_encoded_color());
    }
    if (from.has_prefetch()) {
      set_prefetch(from.prefetch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataParameter::CopyFrom(const DataParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataParameter::IsInitialized() const {

  return true;
}

void DataParameter::Swap(DataParameter* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(rand_skip_, other->rand_skip_);
    std::swap(backend_, other->backend_);
    std::swap(scale_, other->scale_);
    std::swap(mean_file_, other->mean_file_);
    std::swap(crop_size_, other->crop_size_);
    std::swap(mirror_, other->mirror_);
    std::swap(force_encoded_color_, other->force_encoded_color_);
    std::swap(prefetch_, other->prefetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataParameter_descriptor_;
  metadata.reflection = DataParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropoutParameter::kDropoutRatioFieldNumber;
#endif  // !_MSC_VER

DropoutParameter::DropoutParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DropoutParameter)
}

void DropoutParameter::InitAsDefaultInstance() {
}

DropoutParameter::DropoutParameter(const DropoutParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.DropoutParameter)
}

void DropoutParameter::SharedCtor() {
  _cached_size_ = 0;
  dropout_ratio_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropoutParameter::~DropoutParameter() {
  // @@protoc_insertion_point(destructor:caffe.DropoutParameter)
  SharedDtor();
}

void DropoutParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropoutParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropoutParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropoutParameter_descriptor_;
}

const DropoutParameter& DropoutParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

DropoutParameter* DropoutParameter::default_instance_ = NULL;

DropoutParameter* DropoutParameter::New() const {
  return new DropoutParameter;
}

void DropoutParameter::Clear() {
  dropout_ratio_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropoutParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DropoutParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float dropout_ratio = 1 [default = 0.5];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
          set_has_dropout_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DropoutParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DropoutParameter)
  return false;
#undef DO_
}

void DropoutParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DropoutParameter)
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout_ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DropoutParameter)
}

::google::protobuf::uint8* DropoutParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DropoutParameter)
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout_ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DropoutParameter)
  return target;
}

int DropoutParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float dropout_ratio = 1 [default = 0.5];
    if (has_dropout_ratio()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropoutParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropoutParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropoutParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropoutParameter::MergeFrom(const DropoutParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropout_ratio()) {
      set_dropout_ratio(from.dropout_ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropoutParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropoutParameter::CopyFrom(const DropoutParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropoutParameter::IsInitialized() const {

  return true;
}

void DropoutParameter::Swap(DropoutParameter* other) {
  if (other != this) {
    std::swap(dropout_ratio_, other->dropout_ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropoutParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropoutParameter_descriptor_;
  metadata.reflection = DropoutParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DummyDataParameter::kDataFillerFieldNumber;
const int DummyDataParameter::kShapeFieldNumber;
const int DummyDataParameter::kNumFieldNumber;
const int DummyDataParameter::kChannelsFieldNumber;
const int DummyDataParameter::kHeightFieldNumber;
const int DummyDataParameter::kWidthFieldNumber;
#endif  // !_MSC_VER

DummyDataParameter::DummyDataParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DummyDataParameter)
}

void DummyDataParameter::InitAsDefaultInstance() {
}

DummyDataParameter::DummyDataParameter(const DummyDataParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.DummyDataParameter)
}

void DummyDataParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DummyDataParameter::~DummyDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.DummyDataParameter)
  SharedDtor();
}

void DummyDataParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DummyDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DummyDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DummyDataParameter_descriptor_;
}

const DummyDataParameter& DummyDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

DummyDataParameter* DummyDataParameter::default_instance_ = NULL;

DummyDataParameter* DummyDataParameter::New() const {
  return new DummyDataParameter;
}

void DummyDataParameter::Clear() {
  data_filler_.Clear();
  shape_.Clear();
  num_.Clear();
  channels_.Clear();
  height_.Clear();
  width_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DummyDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DummyDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.FillerParameter data_filler = 1;
      case 1: {
        if (tag == 10) {
         parse_data_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data_filler;
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // repeated uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_num())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        if (input->ExpectTag(24)) goto parse_channels;
        break;
      }

      // repeated uint32 channels = 3;
      case 3: {
        if (tag == 24) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_channels())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channels;
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // repeated uint32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_height())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_height())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        if (input->ExpectTag(40)) goto parse_width;
        break;
      }

      // repeated uint32 width = 5;
      case 5: {
        if (tag == 40) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_width())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_width())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_width;
        if (input->ExpectTag(50)) goto parse_shape;
        break;
      }

      // repeated .caffe.BlobShape shape = 6;
      case 6: {
        if (tag == 50) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_shape;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DummyDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DummyDataParameter)
  return false;
#undef DO_
}

void DummyDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DummyDataParameter)
  // repeated .caffe.FillerParameter data_filler = 1;
  for (int i = 0; i < this->data_filler_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_filler(i), output);
  }

  // repeated uint32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->num(i), output);
  }

  // repeated uint32 channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->channels(i), output);
  }

  // repeated uint32 height = 4;
  for (int i = 0; i < this->height_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->height(i), output);
  }

  // repeated uint32 width = 5;
  for (int i = 0; i < this->width_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->width(i), output);
  }

  // repeated .caffe.BlobShape shape = 6;
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->shape(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DummyDataParameter)
}

::google::protobuf::uint8* DummyDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DummyDataParameter)
  // repeated .caffe.FillerParameter data_filler = 1;
  for (int i = 0; i < this->data_filler_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_filler(i), target);
  }

  // repeated uint32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->num(i), target);
  }

  // repeated uint32 channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->channels(i), target);
  }

  // repeated uint32 height = 4;
  for (int i = 0; i < this->height_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->height(i), target);
  }

  // repeated uint32 width = 5;
  for (int i = 0; i < this->width_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->width(i), target);
  }

  // repeated .caffe.BlobShape shape = 6;
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->shape(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DummyDataParameter)
  return target;
}

int DummyDataParameter::ByteSize() const {
  int total_size = 0;

  // repeated .caffe.FillerParameter data_filler = 1;
  total_size += 1 * this->data_filler_size();
  for (int i = 0; i < this->data_filler_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_filler(i));
  }

  // repeated .caffe.BlobShape shape = 6;
  total_size += 1 * this->shape_size();
  for (int i = 0; i < this->shape_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shape(i));
  }

  // repeated uint32 num = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }

  // repeated uint32 channels = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->channels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->channels(i));
    }
    total_size += 1 * this->channels_size() + data_size;
  }

  // repeated uint32 height = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->height_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->height(i));
    }
    total_size += 1 * this->height_size() + data_size;
  }

  // repeated uint32 width = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->width_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->width(i));
    }
    total_size += 1 * this->width_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DummyDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DummyDataParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DummyDataParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DummyDataParameter::MergeFrom(const DummyDataParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_filler_.MergeFrom(from.data_filler_);
  shape_.MergeFrom(from.shape_);
  num_.MergeFrom(from.num_);
  channels_.MergeFrom(from.channels_);
  height_.MergeFrom(from.height_);
  width_.MergeFrom(from.width_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DummyDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyDataParameter::CopyFrom(const DummyDataParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyDataParameter::IsInitialized() const {

  return true;
}

void DummyDataParameter::Swap(DummyDataParameter* other) {
  if (other != this) {
    data_filler_.Swap(&other->data_filler_);
    shape_.Swap(&other->shape_);
    num_.Swap(&other->num_);
    channels_.Swap(&other->channels_);
    height_.Swap(&other->height_);
    width_.Swap(&other->width_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DummyDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DummyDataParameter_descriptor_;
  metadata.reflection = DummyDataParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EltwiseParameter_EltwiseOp_descriptor_;
}
bool EltwiseParameter_EltwiseOp_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EltwiseParameter_EltwiseOp EltwiseParameter::PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter::SUM;
const EltwiseParameter_EltwiseOp EltwiseParameter::MAX;
const EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MIN;
const EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MAX;
const int EltwiseParameter::EltwiseOp_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EltwiseParameter::kOperationFieldNumber;
const int EltwiseParameter::kCoeffFieldNumber;
const int EltwiseParameter::kStableProdGradFieldNumber;
#endif  // !_MSC_VER

EltwiseParameter::EltwiseParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.EltwiseParameter)
}

void EltwiseParameter::InitAsDefaultInstance() {
}

EltwiseParameter::EltwiseParameter(const EltwiseParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.EltwiseParameter)
}

void EltwiseParameter::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  stable_prod_grad_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EltwiseParameter::~EltwiseParameter() {
  // @@protoc_insertion_point(destructor:caffe.EltwiseParameter)
  SharedDtor();
}

void EltwiseParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EltwiseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EltwiseParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EltwiseParameter_descriptor_;
}

const EltwiseParameter& EltwiseParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

EltwiseParameter* EltwiseParameter::default_instance_ = NULL;

EltwiseParameter* EltwiseParameter::New() const {
  return new EltwiseParameter;
}

void EltwiseParameter::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    operation_ = 1;
    stable_prod_grad_ = true;
  }
  coeff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EltwiseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.EltwiseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::EltwiseParameter_EltwiseOp_IsValid(value)) {
            set_operation(static_cast< ::caffe::EltwiseParameter_EltwiseOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_coeff;
        break;
      }

      // repeated float coeff = 2;
      case 2: {
        if (tag == 21) {
         parse_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_coeff())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coeff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_coeff;
        if (input->ExpectTag(24)) goto parse_stable_prod_grad;
        break;
      }

      // optional bool stable_prod_grad = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_stable_prod_grad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stable_prod_grad_)));
          set_has_stable_prod_grad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.EltwiseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.EltwiseParameter)
  return false;
#undef DO_
}

void EltwiseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.EltwiseParameter)
  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // repeated float coeff = 2;
  for (int i = 0; i < this->coeff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->coeff(i), output);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (has_stable_prod_grad()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->stable_prod_grad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.EltwiseParameter)
}

::google::protobuf::uint8* EltwiseParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.EltwiseParameter)
  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // repeated float coeff = 2;
  for (int i = 0; i < this->coeff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->coeff(i), target);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (has_stable_prod_grad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->stable_prod_grad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.EltwiseParameter)
  return target;
}

int EltwiseParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional bool stable_prod_grad = 3 [default = true];
    if (has_stable_prod_grad()) {
      total_size += 1 + 1;
    }

  }
  // repeated float coeff = 2;
  {
    int data_size = 0;
    data_size = 4 * this->coeff_size();
    total_size += 1 * this->coeff_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EltwiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EltwiseParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EltwiseParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EltwiseParameter::MergeFrom(const EltwiseParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  coeff_.MergeFrom(from.coeff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_stable_prod_grad()) {
      set_stable_prod_grad(from.stable_prod_grad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EltwiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EltwiseParameter::CopyFrom(const EltwiseParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EltwiseParameter::IsInitialized() const {

  return true;
}

void EltwiseParameter::Swap(EltwiseParameter* other) {
  if (other != this) {
    std::swap(operation_, other->operation_);
    coeff_.Swap(&other->coeff_);
    std::swap(stable_prod_grad_, other->stable_prod_grad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EltwiseParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EltwiseParameter_descriptor_;
  metadata.reflection = EltwiseParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ELUParameter::kAlphaFieldNumber;
#endif  // !_MSC_VER

ELUParameter::ELUParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ELUParameter)
}

void ELUParameter::InitAsDefaultInstance() {
}

ELUParameter::ELUParameter(const ELUParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ELUParameter)
}

void ELUParameter::SharedCtor() {
  _cached_size_ = 0;
  alpha_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ELUParameter::~ELUParameter() {
  // @@protoc_insertion_point(destructor:caffe.ELUParameter)
  SharedDtor();
}

void ELUParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ELUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ELUParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELUParameter_descriptor_;
}

const ELUParameter& ELUParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ELUParameter* ELUParameter::default_instance_ = NULL;

ELUParameter* ELUParameter::New() const {
  return new ELUParameter;
}

void ELUParameter::Clear() {
  alpha_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ELUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ELUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float alpha = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ELUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ELUParameter)
  return false;
#undef DO_
}

void ELUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ELUParameter)
  // optional float alpha = 1 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ELUParameter)
}

::google::protobuf::uint8* ELUParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ELUParameter)
  // optional float alpha = 1 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ELUParameter)
  return target;
}

int ELUParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float alpha = 1 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ELUParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ELUParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ELUParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ELUParameter::MergeFrom(const ELUParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ELUParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ELUParameter::CopyFrom(const ELUParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ELUParameter::IsInitialized() const {

  return true;
}

void ELUParameter::Swap(ELUParameter* other) {
  if (other != this) {
    std::swap(alpha_, other->alpha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ELUParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ELUParameter_descriptor_;
  metadata.reflection = ELUParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmbedParameter::kNumOutputFieldNumber;
const int EmbedParameter::kInputDimFieldNumber;
const int EmbedParameter::kBiasTermFieldNumber;
const int EmbedParameter::kWeightFillerFieldNumber;
const int EmbedParameter::kBiasFillerFieldNumber;
#endif  // !_MSC_VER

EmbedParameter::EmbedParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.EmbedParameter)
}

void EmbedParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

EmbedParameter::EmbedParameter(const EmbedParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.EmbedParameter)
}

void EmbedParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  input_dim_ = 0u;
  bias_term_ = true;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmbedParameter::~EmbedParameter() {
  // @@protoc_insertion_point(destructor:caffe.EmbedParameter)
  SharedDtor();
}

void EmbedParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void EmbedParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmbedParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmbedParameter_descriptor_;
}

const EmbedParameter& EmbedParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

EmbedParameter* EmbedParameter::default_instance_ = NULL;

EmbedParameter* EmbedParameter::New() const {
  return new EmbedParameter;
}

void EmbedParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EmbedParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(num_output_, input_dim_);
    bias_term_ = true;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmbedParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.EmbedParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_input_dim;
        break;
      }

      // optional uint32 input_dim = 2;
      case 2: {
        if (tag == 16) {
         parse_input_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_dim_)));
          set_has_input_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_bias_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
          set_has_bias_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 4;
      case 4: {
        if (tag == 34) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 5;
      case 5: {
        if (tag == 42) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.EmbedParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.EmbedParameter)
  return false;
#undef DO_
}

void EmbedParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.EmbedParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional uint32 input_dim = 2;
  if (has_input_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->input_dim(), output);
  }

  // optional bool bias_term = 3 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 4;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->weight_filler(), output);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bias_filler(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.EmbedParameter)
}

::google::protobuf::uint8* EmbedParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.EmbedParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional uint32 input_dim = 2;
  if (has_input_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->input_dim(), target);
  }

  // optional bool bias_term = 3 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 4;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->weight_filler(), target);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bias_filler(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.EmbedParameter)
  return target;
}

int EmbedParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 input_dim = 2;
    if (has_input_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_dim());
    }

    // optional bool bias_term = 3 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional .caffe.FillerParameter weight_filler = 4;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }

    // optional .caffe.FillerParameter bias_filler = 5;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_filler());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmbedParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmbedParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmbedParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmbedParameter::MergeFrom(const EmbedParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_input_dim()) {
      set_input_dim(from.input_dim());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmbedParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbedParameter::CopyFrom(const EmbedParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbedParameter::IsInitialized() const {

  return true;
}

void EmbedParameter::Swap(EmbedParameter* other) {
  if (other != this) {
    std::swap(num_output_, other->num_output_);
    std::swap(input_dim_, other->input_dim_);
    std::swap(bias_term_, other->bias_term_);
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(bias_filler_, other->bias_filler_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmbedParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmbedParameter_descriptor_;
  metadata.reflection = EmbedParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpParameter::kBaseFieldNumber;
const int ExpParameter::kScaleFieldNumber;
const int ExpParameter::kShiftFieldNumber;
#endif  // !_MSC_VER

ExpParameter::ExpParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ExpParameter)
}

void ExpParameter::InitAsDefaultInstance() {
}

ExpParameter::ExpParameter(const ExpParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ExpParameter)
}

void ExpParameter::SharedCtor() {
  _cached_size_ = 0;
  base_ = -1;
  scale_ = 1;
  shift_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpParameter::~ExpParameter() {
  // @@protoc_insertion_point(destructor:caffe.ExpParameter)
  SharedDtor();
}

void ExpParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpParameter_descriptor_;
}

const ExpParameter& ExpParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ExpParameter* ExpParameter::default_instance_ = NULL;

ExpParameter* ExpParameter::New() const {
  return new ExpParameter;
}

void ExpParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    base_ = -1;
    scale_ = 1;
    shift_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ExpParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base = 1 [default = -1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_shift;
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
          set_has_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ExpParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ExpParameter)
  return false;
#undef DO_
}

void ExpParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ExpParameter)
  // optional float base = 1 [default = -1];
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ExpParameter)
}

::google::protobuf::uint8* ExpParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ExpParameter)
  // optional float base = 1 [default = -1];
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ExpParameter)
  return target;
}

int ExpParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float base = 1 [default = -1];
    if (has_base()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpParameter::MergeFrom(const ExpParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpParameter::CopyFrom(const ExpParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpParameter::IsInitialized() const {

  return true;
}

void ExpParameter::Swap(ExpParameter* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(scale_, other->scale_);
    std::swap(shift_, other->shift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpParameter_descriptor_;
  metadata.reflection = ExpParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlattenParameter::kAxisFieldNumber;
const int FlattenParameter::kEndAxisFieldNumber;
#endif  // !_MSC_VER

FlattenParameter::FlattenParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FlattenParameter)
}

void FlattenParameter::InitAsDefaultInstance() {
}

FlattenParameter::FlattenParameter(const FlattenParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.FlattenParameter)
}

void FlattenParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  end_axis_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlattenParameter::~FlattenParameter() {
  // @@protoc_insertion_point(destructor:caffe.FlattenParameter)
  SharedDtor();
}

void FlattenParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlattenParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlattenParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlattenParameter_descriptor_;
}

const FlattenParameter& FlattenParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

FlattenParameter* FlattenParameter::default_instance_ = NULL;

FlattenParameter* FlattenParameter::New() const {
  return new FlattenParameter;
}

void FlattenParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    axis_ = 1;
    end_axis_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlattenParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FlattenParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_axis;
        break;
      }

      // optional int32 end_axis = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_end_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_axis_)));
          set_has_end_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FlattenParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FlattenParameter)
  return false;
#undef DO_
}

void FlattenParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FlattenParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 end_axis = 2 [default = -1];
  if (has_end_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end_axis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FlattenParameter)
}

::google::protobuf::uint8* FlattenParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FlattenParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 end_axis = 2 [default = -1];
  if (has_end_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end_axis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FlattenParameter)
  return target;
}

int FlattenParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 end_axis = 2 [default = -1];
    if (has_end_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_axis());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlattenParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlattenParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlattenParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlattenParameter::MergeFrom(const FlattenParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_end_axis()) {
      set_end_axis(from.end_axis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlattenParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlattenParameter::CopyFrom(const FlattenParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlattenParameter::IsInitialized() const {

  return true;
}

void FlattenParameter::Swap(FlattenParameter* other) {
  if (other != this) {
    std::swap(axis_, other->axis_);
    std::swap(end_axis_, other->end_axis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlattenParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlattenParameter_descriptor_;
  metadata.reflection = FlattenParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HDF5DataParameter::kSourceFieldNumber;
const int HDF5DataParameter::kBatchSizeFieldNumber;
const int HDF5DataParameter::kShuffleFieldNumber;
#endif  // !_MSC_VER

HDF5DataParameter::HDF5DataParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HDF5DataParameter)
}

void HDF5DataParameter::InitAsDefaultInstance() {
}

HDF5DataParameter::HDF5DataParameter(const HDF5DataParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.HDF5DataParameter)
}

void HDF5DataParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 0u;
  shuffle_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HDF5DataParameter::~HDF5DataParameter() {
  // @@protoc_insertion_point(destructor:caffe.HDF5DataParameter)
  SharedDtor();
}

void HDF5DataParameter::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void HDF5DataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDF5DataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HDF5DataParameter_descriptor_;
}

const HDF5DataParameter& HDF5DataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

HDF5DataParameter* HDF5DataParameter::default_instance_ = NULL;

HDF5DataParameter* HDF5DataParameter::New() const {
  return new HDF5DataParameter;
}

void HDF5DataParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HDF5DataParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(batch_size_, shuffle_);
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HDF5DataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HDF5DataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 2;
      case 2: {
        if (tag == 16) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shuffle;
        break;
      }

      // optional bool shuffle = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_shuffle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
          set_has_shuffle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HDF5DataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HDF5DataParameter)
  return false;
#undef DO_
}

void HDF5DataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HDF5DataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional uint32 batch_size = 2;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->batch_size(), output);
  }

  // optional bool shuffle = 3 [default = false];
  if (has_shuffle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shuffle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HDF5DataParameter)
}

::google::protobuf::uint8* HDF5DataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HDF5DataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional uint32 batch_size = 2;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->batch_size(), target);
  }

  // optional bool shuffle = 3 [default = false];
  if (has_shuffle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->shuffle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HDF5DataParameter)
  return target;
}

int HDF5DataParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 2;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional bool shuffle = 3 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HDF5DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HDF5DataParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HDF5DataParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HDF5DataParameter::MergeFrom(const HDF5DataParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_shuffle()) {
      set_shuffle(from.shuffle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HDF5DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDF5DataParameter::CopyFrom(const HDF5DataParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDF5DataParameter::IsInitialized() const {

  return true;
}

void HDF5DataParameter::Swap(HDF5DataParameter* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(shuffle_, other->shuffle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HDF5DataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HDF5DataParameter_descriptor_;
  metadata.reflection = HDF5DataParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HDF5OutputParameter::kFileNameFieldNumber;
#endif  // !_MSC_VER

HDF5OutputParameter::HDF5OutputParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HDF5OutputParameter)
}

void HDF5OutputParameter::InitAsDefaultInstance() {
}

HDF5OutputParameter::HDF5OutputParameter(const HDF5OutputParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.HDF5OutputParameter)
}

void HDF5OutputParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HDF5OutputParameter::~HDF5OutputParameter() {
  // @@protoc_insertion_point(destructor:caffe.HDF5OutputParameter)
  SharedDtor();
}

void HDF5OutputParameter::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void HDF5OutputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDF5OutputParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HDF5OutputParameter_descriptor_;
}

const HDF5OutputParameter& HDF5OutputParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

HDF5OutputParameter* HDF5OutputParameter::default_instance_ = NULL;

HDF5OutputParameter* HDF5OutputParameter::New() const {
  return new HDF5OutputParameter;
}

void HDF5OutputParameter::Clear() {
  if (has_file_name()) {
    if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      file_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HDF5OutputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HDF5OutputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HDF5OutputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HDF5OutputParameter)
  return false;
#undef DO_
}

void HDF5OutputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HDF5OutputParameter)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HDF5OutputParameter)
}

::google::protobuf::uint8* HDF5OutputParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HDF5OutputParameter)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HDF5OutputParameter)
  return target;
}

int HDF5OutputParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HDF5OutputParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HDF5OutputParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HDF5OutputParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HDF5OutputParameter::MergeFrom(const HDF5OutputParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HDF5OutputParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDF5OutputParameter::CopyFrom(const HDF5OutputParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDF5OutputParameter::IsInitialized() const {

  return true;
}

void HDF5OutputParameter::Swap(HDF5OutputParameter* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HDF5OutputParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HDF5OutputParameter_descriptor_;
  metadata.reflection = HDF5OutputParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HingeLossParameter_Norm_descriptor_;
}
bool HingeLossParameter_Norm_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HingeLossParameter_Norm HingeLossParameter::L1;
const HingeLossParameter_Norm HingeLossParameter::L2;
const HingeLossParameter_Norm HingeLossParameter::Norm_MIN;
const HingeLossParameter_Norm HingeLossParameter::Norm_MAX;
const int HingeLossParameter::Norm_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HingeLossParameter::kNormFieldNumber;
#endif  // !_MSC_VER

HingeLossParameter::HingeLossParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HingeLossParameter)
}

void HingeLossParameter::InitAsDefaultInstance() {
}

HingeLossParameter::HingeLossParameter(const HingeLossParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.HingeLossParameter)
}

void HingeLossParameter::SharedCtor() {
  _cached_size_ = 0;
  norm_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HingeLossParameter::~HingeLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.HingeLossParameter)
  SharedDtor();
}

void HingeLossParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HingeLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HingeLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HingeLossParameter_descriptor_;
}

const HingeLossParameter& HingeLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

HingeLossParameter* HingeLossParameter::default_instance_ = NULL;

HingeLossParameter* HingeLossParameter::New() const {
  return new HingeLossParameter;
}

void HingeLossParameter::Clear() {
  norm_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HingeLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HingeLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::HingeLossParameter_Norm_IsValid(value)) {
            set_norm(static_cast< ::caffe::HingeLossParameter_Norm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HingeLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HingeLossParameter)
  return false;
#undef DO_
}

void HingeLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HingeLossParameter)
  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (has_norm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->norm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HingeLossParameter)
}

::google::protobuf::uint8* HingeLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HingeLossParameter)
  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (has_norm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->norm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HingeLossParameter)
  return target;
}

int HingeLossParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
    if (has_norm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HingeLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HingeLossParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HingeLossParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HingeLossParameter::MergeFrom(const HingeLossParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_norm()) {
      set_norm(from.norm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HingeLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HingeLossParameter::CopyFrom(const HingeLossParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HingeLossParameter::IsInitialized() const {

  return true;
}

void HingeLossParameter::Swap(HingeLossParameter* other) {
  if (other != this) {
    std::swap(norm_, other->norm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HingeLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HingeLossParameter_descriptor_;
  metadata.reflection = HingeLossParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageDataParameter::kSourceFieldNumber;
const int ImageDataParameter::kBatchSizeFieldNumber;
const int ImageDataParameter::kRandSkipFieldNumber;
const int ImageDataParameter::kShuffleFieldNumber;
const int ImageDataParameter::kNewHeightFieldNumber;
const int ImageDataParameter::kNewWidthFieldNumber;
const int ImageDataParameter::kIsColorFieldNumber;
const int ImageDataParameter::kScaleFieldNumber;
const int ImageDataParameter::kMeanFileFieldNumber;
const int ImageDataParameter::kCropSizeFieldNumber;
const int ImageDataParameter::kMirrorFieldNumber;
const int ImageDataParameter::kRootFolderFieldNumber;
#endif  // !_MSC_VER

ImageDataParameter::ImageDataParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ImageDataParameter)
}

void ImageDataParameter::InitAsDefaultInstance() {
}

ImageDataParameter::ImageDataParameter(const ImageDataParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ImageDataParameter)
}

void ImageDataParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 1u;
  rand_skip_ = 0u;
  shuffle_ = false;
  new_height_ = 0u;
  new_width_ = 0u;
  is_color_ = true;
  scale_ = 1;
  mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_size_ = 0u;
  mirror_ = false;
  root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageDataParameter::~ImageDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.ImageDataParameter)
  SharedDtor();
}

void ImageDataParameter::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (root_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete root_folder_;
  }
  if (this != default_instance_) {
  }
}

void ImageDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageDataParameter_descriptor_;
}

const ImageDataParameter& ImageDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ImageDataParameter* ImageDataParameter::default_instance_ = NULL;

ImageDataParameter* ImageDataParameter::New() const {
  return new ImageDataParameter;
}

void ImageDataParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ImageDataParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rand_skip_, shuffle_);
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    batch_size_ = 1u;
    is_color_ = true;
    scale_ = 1;
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_mean_file()) {
      if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mean_file_->clear();
      }
    }
    crop_size_ = 0u;
    mirror_ = false;
    if (has_root_folder()) {
      if (root_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        root_folder_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ImageDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (tag == 26) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crop_size;
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_crop_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
          set_has_crop_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rand_skip;
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_rand_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
          set_has_rand_skip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_shuffle;
        break;
      }

      // optional bool shuffle = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_shuffle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
          set_has_shuffle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_new_height;
        break;
      }

      // optional uint32 new_height = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_new_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_height_)));
          set_has_new_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_new_width;
        break;
      }

      // optional uint32 new_width = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_new_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_width_)));
          set_has_new_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_color;
        break;
      }

      // optional bool is_color = 11 [default = true];
      case 11: {
        if (tag == 88) {
         parse_is_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_color_)));
          set_has_is_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_root_folder;
        break;
      }

      // optional string root_folder = 12 [default = ""];
      case 12: {
        if (tag == 98) {
         parse_root_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->root_folder().data(), this->root_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "root_folder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ImageDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ImageDataParameter)
  return false;
#undef DO_
}

void ImageDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ImageDataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4 [default = 1];
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (has_rand_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional bool shuffle = 8 [default = false];
  if (has_shuffle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->shuffle(), output);
  }

  // optional uint32 new_height = 9 [default = 0];
  if (has_new_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->new_height(), output);
  }

  // optional uint32 new_width = 10 [default = 0];
  if (has_new_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->new_width(), output);
  }

  // optional bool is_color = 11 [default = true];
  if (has_is_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_color(), output);
  }

  // optional string root_folder = 12 [default = ""];
  if (has_root_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "root_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->root_folder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ImageDataParameter)
}

::google::protobuf::uint8* ImageDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ImageDataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4 [default = 1];
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (has_rand_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional bool shuffle = 8 [default = false];
  if (has_shuffle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->shuffle(), target);
  }

  // optional uint32 new_height = 9 [default = 0];
  if (has_new_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->new_height(), target);
  }

  // optional uint32 new_width = 10 [default = 0];
  if (has_new_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->new_width(), target);
  }

  // optional bool is_color = 11 [default = true];
  if (has_is_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_color(), target);
  }

  // optional string root_folder = 12 [default = ""];
  if (has_root_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "root_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->root_folder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ImageDataParameter)
  return target;
}

int ImageDataParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 4 [default = 1];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional bool shuffle = 8 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional uint32 new_height = 9 [default = 0];
    if (has_new_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_height());
    }

    // optional uint32 new_width = 10 [default = 0];
    if (has_new_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_width());
    }

    // optional bool is_color = 11 [default = true];
    if (has_is_color()) {
      total_size += 1 + 1;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional string root_folder = 12 [default = ""];
    if (has_root_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_folder());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageDataParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageDataParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageDataParameter::MergeFrom(const ImageDataParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_rand_skip()) {
      set_rand_skip(from.rand_skip());
    }
    if (from.has_shuffle()) {
      set_shuffle(from.shuffle());
    }
    if (from.has_new_height()) {
      set_new_height(from.new_height());
    }
    if (from.has_new_width()) {
      set_new_width(from.new_width());
    }
    if (from.has_is_color()) {
      set_is_color(from.is_color());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mean_file()) {
      set_mean_file(from.mean_file());
    }
    if (from.has_crop_size()) {
      set_crop_size(from.crop_size());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
    if (from.has_root_folder()) {
      set_root_folder(from.root_folder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDataParameter::CopyFrom(const ImageDataParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDataParameter::IsInitialized() const {

  return true;
}

void ImageDataParameter::Swap(ImageDataParameter* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(rand_skip_, other->rand_skip_);
    std::swap(shuffle_, other->shuffle_);
    std::swap(new_height_, other->new_height_);
    std::swap(new_width_, other->new_width_);
    std::swap(is_color_, other->is_color_);
    std::swap(scale_, other->scale_);
    std::swap(mean_file_, other->mean_file_);
    std::swap(crop_size_, other->crop_size_);
    std::swap(mirror_, other->mirror_);
    std::swap(root_folder_, other->root_folder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageDataParameter_descriptor_;
  metadata.reflection = ImageDataParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InfogainLossParameter::kSourceFieldNumber;
#endif  // !_MSC_VER

InfogainLossParameter::InfogainLossParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InfogainLossParameter)
}

void InfogainLossParameter::InitAsDefaultInstance() {
}

InfogainLossParameter::InfogainLossParameter(const InfogainLossParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.InfogainLossParameter)
}

void InfogainLossParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfogainLossParameter::~InfogainLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.InfogainLossParameter)
  SharedDtor();
}

void InfogainLossParameter::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void InfogainLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfogainLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfogainLossParameter_descriptor_;
}

const InfogainLossParameter& InfogainLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

InfogainLossParameter* InfogainLossParameter::default_instance_ = NULL;

InfogainLossParameter* InfogainLossParameter::New() const {
  return new InfogainLossParameter;
}

void InfogainLossParameter::Clear() {
  if (has_source()) {
    if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      source_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfogainLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InfogainLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InfogainLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InfogainLossParameter)
  return false;
#undef DO_
}

void InfogainLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InfogainLossParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InfogainLossParameter)
}

::google::protobuf::uint8* InfogainLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InfogainLossParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InfogainLossParameter)
  return target;
}

int InfogainLossParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfogainLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfogainLossParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfogainLossParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfogainLossParameter::MergeFrom(const InfogainLossParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfogainLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfogainLossParameter::CopyFrom(const InfogainLossParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfogainLossParameter::IsInitialized() const {

  return true;
}

void InfogainLossParameter::Swap(InfogainLossParameter* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfogainLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfogainLossParameter_descriptor_;
  metadata.reflection = InfogainLossParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InnerProductParameter::kNumOutputFieldNumber;
const int InnerProductParameter::kBiasTermFieldNumber;
const int InnerProductParameter::kWeightFillerFieldNumber;
const int InnerProductParameter::kBiasFillerFieldNumber;
const int InnerProductParameter::kAxisFieldNumber;
const int InnerProductParameter::kTransposeFieldNumber;
#endif  // !_MSC_VER

InnerProductParameter::InnerProductParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InnerProductParameter)
}

void InnerProductParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

InnerProductParameter::InnerProductParameter(const InnerProductParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.InnerProductParameter)
}

void InnerProductParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  bias_term_ = true;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  axis_ = 1;
  transpose_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnerProductParameter::~InnerProductParameter() {
  // @@protoc_insertion_point(destructor:caffe.InnerProductParameter)
  SharedDtor();
}

void InnerProductParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void InnerProductParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerProductParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerProductParameter_descriptor_;
}

const InnerProductParameter& InnerProductParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

InnerProductParameter* InnerProductParameter::default_instance_ = NULL;

InnerProductParameter* InnerProductParameter::New() const {
  return new InnerProductParameter;
}

void InnerProductParameter::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    num_output_ = 0u;
    bias_term_ = true;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
    axis_ = 1;
    transpose_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InnerProductParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InnerProductParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_bias_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
          set_has_bias_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (tag == 26) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 4;
      case 4: {
        if (tag == 34) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_axis;
        break;
      }

      // optional int32 axis = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_transpose;
        break;
      }

      // optional bool transpose = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_transpose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transpose_)));
          set_has_transpose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InnerProductParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InnerProductParameter)
  return false;
#undef DO_
}

void InnerProductParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weight_filler(), output);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bias_filler(), output);
  }

  // optional int32 axis = 5 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->axis(), output);
  }

  // optional bool transpose = 6 [default = false];
  if (has_transpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->transpose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InnerProductParameter)
}

::google::protobuf::uint8* InnerProductParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InnerProductParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weight_filler(), target);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bias_filler(), target);
  }

  // optional int32 axis = 5 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->axis(), target);
  }

  // optional bool transpose = 6 [default = false];
  if (has_transpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->transpose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InnerProductParameter)
  return target;
}

int InnerProductParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }

    // optional .caffe.FillerParameter bias_filler = 4;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_filler());
    }

    // optional int32 axis = 5 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional bool transpose = 6 [default = false];
    if (has_transpose()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerProductParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InnerProductParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InnerProductParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InnerProductParameter::MergeFrom(const InnerProductParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_transpose()) {
      set_transpose(from.transpose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InnerProductParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerProductParameter::CopyFrom(const InnerProductParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerProductParameter::IsInitialized() const {

  return true;
}

void InnerProductParameter::Swap(InnerProductParameter* other) {
  if (other != this) {
    std::swap(num_output_, other->num_output_);
    std::swap(bias_term_, other->bias_term_);
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(bias_filler_, other->bias_filler_);
    std::swap(axis_, other->axis_);
    std::swap(transpose_, other->transpose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InnerProductParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerProductParameter_descriptor_;
  metadata.reflection = InnerProductParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InputParameter::kShapeFieldNumber;
#endif  // !_MSC_VER

InputParameter::InputParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InputParameter)
}

void InputParameter::InitAsDefaultInstance() {
}

InputParameter::InputParameter(const InputParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.InputParameter)
}

void InputParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputParameter::~InputParameter() {
  // @@protoc_insertion_point(destructor:caffe.InputParameter)
  SharedDtor();
}

void InputParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputParameter_descriptor_;
}

const InputParameter& InputParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

InputParameter* InputParameter::default_instance_ = NULL;

InputParameter* InputParameter::New() const {
  return new InputParameter;
}

void InputParameter::Clear() {
  shape_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.BlobShape shape = 1;
      case 1: {
        if (tag == 10) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_shape;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InputParameter)
  return false;
#undef DO_
}

void InputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InputParameter)
  // repeated .caffe.BlobShape shape = 1;
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shape(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InputParameter)
}

::google::protobuf::uint8* InputParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InputParameter)
  // repeated .caffe.BlobShape shape = 1;
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shape(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InputParameter)
  return target;
}

int InputParameter::ByteSize() const {
  int total_size = 0;

  // repeated .caffe.BlobShape shape = 1;
  total_size += 1 * this->shape_size();
  for (int i = 0; i < this->shape_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shape(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InputParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InputParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InputParameter::MergeFrom(const InputParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  shape_.MergeFrom(from.shape_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InputParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputParameter::CopyFrom(const InputParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputParameter::IsInitialized() const {

  return true;
}

void InputParameter::Swap(InputParameter* other) {
  if (other != this) {
    shape_.Swap(&other->shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InputParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputParameter_descriptor_;
  metadata.reflection = InputParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogParameter::kBaseFieldNumber;
const int LogParameter::kScaleFieldNumber;
const int LogParameter::kShiftFieldNumber;
#endif  // !_MSC_VER

LogParameter::LogParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LogParameter)
}

void LogParameter::InitAsDefaultInstance() {
}

LogParameter::LogParameter(const LogParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LogParameter)
}

void LogParameter::SharedCtor() {
  _cached_size_ = 0;
  base_ = -1;
  scale_ = 1;
  shift_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogParameter::~LogParameter() {
  // @@protoc_insertion_point(destructor:caffe.LogParameter)
  SharedDtor();
}

void LogParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogParameter_descriptor_;
}

const LogParameter& LogParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LogParameter* LogParameter::default_instance_ = NULL;

LogParameter* LogParameter::New() const {
  return new LogParameter;
}

void LogParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    base_ = -1;
    scale_ = 1;
    shift_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LogParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base = 1 [default = -1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_shift;
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
          set_has_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LogParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LogParameter)
  return false;
#undef DO_
}

void LogParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LogParameter)
  // optional float base = 1 [default = -1];
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LogParameter)
}

::google::protobuf::uint8* LogParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LogParameter)
  // optional float base = 1 [default = -1];
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LogParameter)
  return target;
}

int LogParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float base = 1 [default = -1];
    if (has_base()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogParameter::MergeFrom(const LogParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogParameter::CopyFrom(const LogParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogParameter::IsInitialized() const {

  return true;
}

void LogParameter::Swap(LogParameter* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(scale_, other->scale_);
    std::swap(shift_, other->shift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogParameter_descriptor_;
  metadata.reflection = LogParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LRNParameter_NormRegion_descriptor_;
}
bool LRNParameter_NormRegion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LRNParameter_NormRegion LRNParameter::ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter::WITHIN_CHANNEL;
const LRNParameter_NormRegion LRNParameter::NormRegion_MIN;
const LRNParameter_NormRegion LRNParameter::NormRegion_MAX;
const int LRNParameter::NormRegion_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LRNParameter_Engine_descriptor_;
}
bool LRNParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LRNParameter_Engine LRNParameter::DEFAULT;
const LRNParameter_Engine LRNParameter::CAFFE;
const LRNParameter_Engine LRNParameter::CUDNN;
const LRNParameter_Engine LRNParameter::Engine_MIN;
const LRNParameter_Engine LRNParameter::Engine_MAX;
const int LRNParameter::Engine_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LRNParameter::kLocalSizeFieldNumber;
const int LRNParameter::kAlphaFieldNumber;
const int LRNParameter::kBetaFieldNumber;
const int LRNParameter::kNormRegionFieldNumber;
const int LRNParameter::kKFieldNumber;
const int LRNParameter::kEngineFieldNumber;
#endif  // !_MSC_VER

LRNParameter::LRNParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LRNParameter)
}

void LRNParameter::InitAsDefaultInstance() {
}

LRNParameter::LRNParameter(const LRNParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LRNParameter)
}

void LRNParameter::SharedCtor() {
  _cached_size_ = 0;
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  norm_region_ = 0;
  k_ = 1;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LRNParameter::~LRNParameter() {
  // @@protoc_insertion_point(destructor:caffe.LRNParameter)
  SharedDtor();
}

void LRNParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LRNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LRNParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LRNParameter_descriptor_;
}

const LRNParameter& LRNParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LRNParameter* LRNParameter::default_instance_ = NULL;

LRNParameter* LRNParameter::New() const {
  return new LRNParameter;
}

void LRNParameter::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    norm_region_ = 0;
    k_ = 1;
    engine_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LRNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LRNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 local_size = 1 [default = 5];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
          set_has_local_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_alpha;
        break;
      }

      // optional float alpha = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_beta;
        break;
      }

      // optional float beta = 3 [default = 0.75];
      case 3: {
        if (tag == 29) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_norm_region;
        break;
      }

      // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
      case 4: {
        if (tag == 32) {
         parse_norm_region:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LRNParameter_NormRegion_IsValid(value)) {
            set_norm_region(static_cast< ::caffe::LRNParameter_NormRegion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_k;
        break;
      }

      // optional float k = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_engine;
        break;
      }

      // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
      case 6: {
        if (tag == 48) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LRNParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::LRNParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LRNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LRNParameter)
  return false;
#undef DO_
}

void LRNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LRNParameter)
  // optional uint32 local_size = 1 [default = 5];
  if (has_local_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_size(), output);
  }

  // optional float alpha = 2 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alpha(), output);
  }

  // optional float beta = 3 [default = 0.75];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->beta(), output);
  }

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (has_norm_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->norm_region(), output);
  }

  // optional float k = 5 [default = 1];
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->k(), output);
  }

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->engine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LRNParameter)
}

::google::protobuf::uint8* LRNParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LRNParameter)
  // optional uint32 local_size = 1 [default = 5];
  if (has_local_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_size(), target);
  }

  // optional float alpha = 2 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alpha(), target);
  }

  // optional float beta = 3 [default = 0.75];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->beta(), target);
  }

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (has_norm_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->norm_region(), target);
  }

  // optional float k = 5 [default = 1];
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->k(), target);
  }

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->engine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LRNParameter)
  return target;
}

int LRNParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 local_size = 1 [default = 5];
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }

    // optional float alpha = 2 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 3 [default = 0.75];
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
    if (has_norm_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm_region());
    }

    // optional float k = 5 [default = 1];
    if (has_k()) {
      total_size += 1 + 4;
    }

    // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LRNParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LRNParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LRNParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LRNParameter::MergeFrom(const LRNParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_size()) {
      set_local_size(from.local_size());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_norm_region()) {
      set_norm_region(from.norm_region());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LRNParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LRNParameter::CopyFrom(const LRNParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LRNParameter::IsInitialized() const {

  return true;
}

void LRNParameter::Swap(LRNParameter* other) {
  if (other != this) {
    std::swap(local_size_, other->local_size_);
    std::swap(alpha_, other->alpha_);
    std::swap(beta_, other->beta_);
    std::swap(norm_region_, other->norm_region_);
    std::swap(k_, other->k_);
    std::swap(engine_, other->engine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LRNParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LRNParameter_descriptor_;
  metadata.reflection = LRNParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemoryDataParameter::kBatchSizeFieldNumber;
const int MemoryDataParameter::kChannelsFieldNumber;
const int MemoryDataParameter::kHeightFieldNumber;
const int MemoryDataParameter::kWidthFieldNumber;
#endif  // !_MSC_VER

MemoryDataParameter::MemoryDataParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MemoryDataParameter)
}

void MemoryDataParameter::InitAsDefaultInstance() {
}

MemoryDataParameter::MemoryDataParameter(const MemoryDataParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.MemoryDataParameter)
}

void MemoryDataParameter::SharedCtor() {
  _cached_size_ = 0;
  batch_size_ = 0u;
  channels_ = 0u;
  height_ = 0u;
  width_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryDataParameter::~MemoryDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.MemoryDataParameter)
  SharedDtor();
}

void MemoryDataParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemoryDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryDataParameter_descriptor_;
}

const MemoryDataParameter& MemoryDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

MemoryDataParameter* MemoryDataParameter::default_instance_ = NULL;

MemoryDataParameter* MemoryDataParameter::New() const {
  return new MemoryDataParameter;
}

void MemoryDataParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemoryDataParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(batch_size_, width_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemoryDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MemoryDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 batch_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // optional uint32 channels = 2;
      case 2: {
        if (tag == 16) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MemoryDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MemoryDataParameter)
  return false;
#undef DO_
}

void MemoryDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MemoryDataParameter)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->batch_size(), output);
  }

  // optional uint32 channels = 2;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channels(), output);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MemoryDataParameter)
}

::google::protobuf::uint8* MemoryDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MemoryDataParameter)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->batch_size(), target);
  }

  // optional uint32 channels = 2;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channels(), target);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MemoryDataParameter)
  return target;
}

int MemoryDataParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 batch_size = 1;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 channels = 2;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channels());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemoryDataParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemoryDataParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemoryDataParameter::MergeFrom(const MemoryDataParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemoryDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryDataParameter::CopyFrom(const MemoryDataParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryDataParameter::IsInitialized() const {

  return true;
}

void MemoryDataParameter::Swap(MemoryDataParameter* other) {
  if (other != this) {
    std::swap(batch_size_, other->batch_size_);
    std::swap(channels_, other->channels_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemoryDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryDataParameter_descriptor_;
  metadata.reflection = MemoryDataParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MVNParameter::kNormalizeVarianceFieldNumber;
const int MVNParameter::kAcrossChannelsFieldNumber;
const int MVNParameter::kEpsFieldNumber;
#endif  // !_MSC_VER

MVNParameter::MVNParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MVNParameter)
}

void MVNParameter::InitAsDefaultInstance() {
}

MVNParameter::MVNParameter(const MVNParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.MVNParameter)
}

void MVNParameter::SharedCtor() {
  _cached_size_ = 0;
  normalize_variance_ = true;
  across_channels_ = false;
  eps_ = 1e-09f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVNParameter::~MVNParameter() {
  // @@protoc_insertion_point(destructor:caffe.MVNParameter)
  SharedDtor();
}

void MVNParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MVNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVNParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVNParameter_descriptor_;
}

const MVNParameter& MVNParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

MVNParameter* MVNParameter::default_instance_ = NULL;

MVNParameter* MVNParameter::New() const {
  return new MVNParameter;
}

void MVNParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    normalize_variance_ = true;
    across_channels_ = false;
    eps_ = 1e-09f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MVNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MVNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool normalize_variance = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_variance_)));
          set_has_normalize_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_across_channels;
        break;
      }

      // optional bool across_channels = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_across_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &across_channels_)));
          set_has_across_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_eps;
        break;
      }

      // optional float eps = 3 [default = 1e-09];
      case 3: {
        if (tag == 29) {
         parse_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MVNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MVNParameter)
  return false;
#undef DO_
}

void MVNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MVNParameter)
  // optional bool normalize_variance = 1 [default = true];
  if (has_normalize_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->normalize_variance(), output);
  }

  // optional bool across_channels = 2 [default = false];
  if (has_across_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->across_channels(), output);
  }

  // optional float eps = 3 [default = 1e-09];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MVNParameter)
}

::google::protobuf::uint8* MVNParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MVNParameter)
  // optional bool normalize_variance = 1 [default = true];
  if (has_normalize_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->normalize_variance(), target);
  }

  // optional bool across_channels = 2 [default = false];
  if (has_across_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->across_channels(), target);
  }

  // optional float eps = 3 [default = 1e-09];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MVNParameter)
  return target;
}

int MVNParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool normalize_variance = 1 [default = true];
    if (has_normalize_variance()) {
      total_size += 1 + 1;
    }

    // optional bool across_channels = 2 [default = false];
    if (has_across_channels()) {
      total_size += 1 + 1;
    }

    // optional float eps = 3 [default = 1e-09];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVNParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MVNParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MVNParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MVNParameter::MergeFrom(const MVNParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_normalize_variance()) {
      set_normalize_variance(from.normalize_variance());
    }
    if (from.has_across_channels()) {
      set_across_channels(from.across_channels());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MVNParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVNParameter::CopyFrom(const MVNParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVNParameter::IsInitialized() const {

  return true;
}

void MVNParameter::Swap(MVNParameter* other) {
  if (other != this) {
    std::swap(normalize_variance_, other->normalize_variance_);
    std::swap(across_channels_, other->across_channels_);
    std::swap(eps_, other->eps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MVNParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVNParameter_descriptor_;
  metadata.reflection = MVNParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParameterParameter::kShapeFieldNumber;
#endif  // !_MSC_VER

ParameterParameter::ParameterParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ParameterParameter)
}

void ParameterParameter::InitAsDefaultInstance() {
  shape_ = const_cast< ::caffe::BlobShape*>(&::caffe::BlobShape::default_instance());
}

ParameterParameter::ParameterParameter(const ParameterParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ParameterParameter)
}

void ParameterParameter::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParameterParameter::~ParameterParameter() {
  // @@protoc_insertion_point(destructor:caffe.ParameterParameter)
  SharedDtor();
}

void ParameterParameter::SharedDtor() {
  if (this != default_instance_) {
    delete shape_;
  }
}

void ParameterParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterParameter_descriptor_;
}

const ParameterParameter& ParameterParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ParameterParameter* ParameterParameter::default_instance_ = NULL;

ParameterParameter* ParameterParameter::New() const {
  return new ParameterParameter;
}

void ParameterParameter::Clear() {
  if (has_shape()) {
    if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParameterParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ParameterParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.BlobShape shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ParameterParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ParameterParameter)
  return false;
#undef DO_
}

void ParameterParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ParameterParameter)
  // optional .caffe.BlobShape shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shape(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ParameterParameter)
}

::google::protobuf::uint8* ParameterParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ParameterParameter)
  // optional .caffe.BlobShape shape = 1;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shape(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ParameterParameter)
  return target;
}

int ParameterParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe.BlobShape shape = 1;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParameterParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParameterParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParameterParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParameterParameter::MergeFrom(const ParameterParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParameterParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterParameter::CopyFrom(const ParameterParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterParameter::IsInitialized() const {

  return true;
}

void ParameterParameter::Swap(ParameterParameter* other) {
  if (other != this) {
    std::swap(shape_, other->shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParameterParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParameterParameter_descriptor_;
  metadata.reflection = ParameterParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingParameter_PoolMethod_descriptor_;
}
bool PoolingParameter_PoolMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PoolingParameter_PoolMethod PoolingParameter::MAX;
const PoolingParameter_PoolMethod PoolingParameter::AVE;
const PoolingParameter_PoolMethod PoolingParameter::STOCHASTIC;
const PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MIN;
const PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MAX;
const int PoolingParameter::PoolMethod_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingParameter_Engine_descriptor_;
}
bool PoolingParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PoolingParameter_Engine PoolingParameter::DEFAULT;
const PoolingParameter_Engine PoolingParameter::CAFFE;
const PoolingParameter_Engine PoolingParameter::CUDNN;
const PoolingParameter_Engine PoolingParameter::Engine_MIN;
const PoolingParameter_Engine PoolingParameter::Engine_MAX;
const int PoolingParameter::Engine_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PoolingParameter::kPoolFieldNumber;
const int PoolingParameter::kPadFieldNumber;
const int PoolingParameter::kPadHFieldNumber;
const int PoolingParameter::kPadWFieldNumber;
const int PoolingParameter::kKernelSizeFieldNumber;
const int PoolingParameter::kKernelHFieldNumber;
const int PoolingParameter::kKernelWFieldNumber;
const int PoolingParameter::kStrideFieldNumber;
const int PoolingParameter::kStrideHFieldNumber;
const int PoolingParameter::kStrideWFieldNumber;
const int PoolingParameter::kEngineFieldNumber;
const int PoolingParameter::kGlobalPoolingFieldNumber;
#endif  // !_MSC_VER

PoolingParameter::PoolingParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PoolingParameter)
}

void PoolingParameter::InitAsDefaultInstance() {
}

PoolingParameter::PoolingParameter(const PoolingParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PoolingParameter)
}

void PoolingParameter::SharedCtor() {
  _cached_size_ = 0;
  pool_ = 0;
  pad_ = 0u;
  pad_h_ = 0u;
  pad_w_ = 0u;
  kernel_size_ = 0u;
  kernel_h_ = 0u;
  kernel_w_ = 0u;
  stride_ = 1u;
  stride_h_ = 0u;
  stride_w_ = 0u;
  engine_ = 0;
  global_pooling_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoolingParameter::~PoolingParameter() {
  // @@protoc_insertion_point(destructor:caffe.PoolingParameter)
  SharedDtor();
}

void PoolingParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingParameter_descriptor_;
}

const PoolingParameter& PoolingParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PoolingParameter* PoolingParameter::default_instance_ = NULL;

PoolingParameter* PoolingParameter::New() const {
  return new PoolingParameter;
}

void PoolingParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PoolingParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(pool_, kernel_w_);
    stride_ = 1u;
  }
  ZR_(stride_h_, global_pooling_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PoolingParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::PoolingParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kernel_size;
        break;
      }

      // optional uint32 kernel_size = 2;
      case 2: {
        if (tag == 16) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
          set_has_kernel_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stride;
        break;
      }

      // optional uint32 stride = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pad;
        break;
      }

      // optional uint32 pad = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_kernel_h;
        break;
      }

      // optional uint32 kernel_h = 5;
      case 5: {
        if (tag == 40) {
         parse_kernel_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_h_)));
          set_has_kernel_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_kernel_w;
        break;
      }

      // optional uint32 kernel_w = 6;
      case 6: {
        if (tag == 48) {
         parse_kernel_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_w_)));
          set_has_kernel_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_stride_h;
        break;
      }

      // optional uint32 stride_h = 7;
      case 7: {
        if (tag == 56) {
         parse_stride_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
          set_has_stride_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_stride_w;
        break;
      }

      // optional uint32 stride_w = 8;
      case 8: {
        if (tag == 64) {
         parse_stride_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
          set_has_stride_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pad_h;
        break;
      }

      // optional uint32 pad_h = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_pad_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
          set_has_pad_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pad_w;
        break;
      }

      // optional uint32 pad_w = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_pad_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
          set_has_pad_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_engine;
        break;
      }

      // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
      case 11: {
        if (tag == 88) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PoolingParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::PoolingParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_global_pooling;
        break;
      }

      // optional bool global_pooling = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_global_pooling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &global_pooling_)));
          set_has_global_pooling();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PoolingParameter)
  return false;
#undef DO_
}

void PoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PoolingParameter)
  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pool(), output);
  }

  // optional uint32 kernel_size = 2;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kernel_size(), output);
  }

  // optional uint32 stride = 3 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stride(), output);
  }

  // optional uint32 pad = 4 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pad(), output);
  }

  // optional uint32 kernel_h = 5;
  if (has_kernel_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kernel_h(), output);
  }

  // optional uint32 kernel_w = 6;
  if (has_kernel_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kernel_w(), output);
  }

  // optional uint32 stride_h = 7;
  if (has_stride_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->stride_h(), output);
  }

  // optional uint32 stride_w = 8;
  if (has_stride_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->stride_w(), output);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
  }

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->engine(), output);
  }

  // optional bool global_pooling = 12 [default = false];
  if (has_global_pooling()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->global_pooling(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PoolingParameter)
}

::google::protobuf::uint8* PoolingParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PoolingParameter)
  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pool(), target);
  }

  // optional uint32 kernel_size = 2;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kernel_size(), target);
  }

  // optional uint32 stride = 3 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stride(), target);
  }

  // optional uint32 pad = 4 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pad(), target);
  }

  // optional uint32 kernel_h = 5;
  if (has_kernel_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kernel_h(), target);
  }

  // optional uint32 kernel_w = 6;
  if (has_kernel_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kernel_w(), target);
  }

  // optional uint32 stride_h = 7;
  if (has_stride_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->stride_h(), target);
  }

  // optional uint32 stride_w = 8;
  if (has_stride_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->stride_w(), target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (has_pad_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (has_pad_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
  }

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->engine(), target);
  }

  // optional bool global_pooling = 12 [default = false];
  if (has_global_pooling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->global_pooling(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PoolingParameter)
  return target;
}

int PoolingParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional uint32 pad = 4 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 10 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

    // optional uint32 kernel_size = 2;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }

    // optional uint32 kernel_h = 5;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_h());
    }

    // optional uint32 kernel_w = 6;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_w());
    }

    // optional uint32 stride = 3 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 stride_h = 7;
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

    // optional uint32 stride_w = 8;
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional bool global_pooling = 12 [default = false];
    if (has_global_pooling()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PoolingParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PoolingParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoolingParameter::MergeFrom(const PoolingParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_pad_h()) {
      set_pad_h(from.pad_h());
    }
    if (from.has_pad_w()) {
      set_pad_w(from.pad_w());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_kernel_h()) {
      set_kernel_h(from.kernel_h());
    }
    if (from.has_kernel_w()) {
      set_kernel_w(from.kernel_w());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stride_h()) {
      set_stride_h(from.stride_h());
    }
    if (from.has_stride_w()) {
      set_stride_w(from.stride_w());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
    if (from.has_global_pooling()) {
      set_global_pooling(from.global_pooling());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolingParameter::CopyFrom(const PoolingParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolingParameter::IsInitialized() const {

  return true;
}

void PoolingParameter::Swap(PoolingParameter* other) {
  if (other != this) {
    std::swap(pool_, other->pool_);
    std::swap(pad_, other->pad_);
    std::swap(pad_h_, other->pad_h_);
    std::swap(pad_w_, other->pad_w_);
    std::swap(kernel_size_, other->kernel_size_);
    std::swap(kernel_h_, other->kernel_h_);
    std::swap(kernel_w_, other->kernel_w_);
    std::swap(stride_, other->stride_);
    std::swap(stride_h_, other->stride_h_);
    std::swap(stride_w_, other->stride_w_);
    std::swap(engine_, other->engine_);
    std::swap(global_pooling_, other->global_pooling_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PoolingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoolingParameter_descriptor_;
  metadata.reflection = PoolingParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PowerParameter::kPowerFieldNumber;
const int PowerParameter::kScaleFieldNumber;
const int PowerParameter::kShiftFieldNumber;
#endif  // !_MSC_VER

PowerParameter::PowerParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PowerParameter)
}

void PowerParameter::InitAsDefaultInstance() {
}

PowerParameter::PowerParameter(const PowerParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PowerParameter)
}

void PowerParameter::SharedCtor() {
  _cached_size_ = 0;
  power_ = 1;
  scale_ = 1;
  shift_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerParameter::~PowerParameter() {
  // @@protoc_insertion_point(destructor:caffe.PowerParameter)
  SharedDtor();
}

void PowerParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PowerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerParameter_descriptor_;
}

const PowerParameter& PowerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PowerParameter* PowerParameter::default_instance_ = NULL;

PowerParameter* PowerParameter::New() const {
  return new PowerParameter;
}

void PowerParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    power_ = 1;
    scale_ = 1;
    shift_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PowerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PowerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float power = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_shift;
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
          set_has_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PowerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PowerParameter)
  return false;
#undef DO_
}

void PowerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PowerParameter)
  // optional float power = 1 [default = 1];
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->power(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PowerParameter)
}

::google::protobuf::uint8* PowerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PowerParameter)
  // optional float power = 1 [default = 1];
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->power(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (has_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PowerParameter)
  return target;
}

int PowerParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float power = 1 [default = 1];
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PowerParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PowerParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PowerParameter::MergeFrom(const PowerParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PowerParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerParameter::CopyFrom(const PowerParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerParameter::IsInitialized() const {

  return true;
}

void PowerParameter::Swap(PowerParameter* other) {
  if (other != this) {
    std::swap(power_, other->power_);
    std::swap(scale_, other->scale_);
    std::swap(shift_, other->shift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PowerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerParameter_descriptor_;
  metadata.reflection = PowerParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PythonParameter::kModuleFieldNumber;
const int PythonParameter::kLayerFieldNumber;
const int PythonParameter::kParamStrFieldNumber;
const int PythonParameter::kShareInParallelFieldNumber;
#endif  // !_MSC_VER

PythonParameter::PythonParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PythonParameter)
}

void PythonParameter::InitAsDefaultInstance() {
}

PythonParameter::PythonParameter(const PythonParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PythonParameter)
}

void PythonParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_in_parallel_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PythonParameter::~PythonParameter() {
  // @@protoc_insertion_point(destructor:caffe.PythonParameter)
  SharedDtor();
}

void PythonParameter::SharedDtor() {
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete module_;
  }
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (param_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param_str_;
  }
  if (this != default_instance_) {
  }
}

void PythonParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PythonParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PythonParameter_descriptor_;
}

const PythonParameter& PythonParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PythonParameter* PythonParameter::default_instance_ = NULL;

PythonParameter* PythonParameter::New() const {
  return new PythonParameter;
}

void PythonParameter::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_module()) {
      if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        module_->clear();
      }
    }
    if (has_layer()) {
      if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        layer_->clear();
      }
    }
    if (has_param_str()) {
      if (param_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param_str_->clear();
      }
    }
    share_in_parallel_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PythonParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PythonParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string module = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->module().data(), this->module().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "module");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layer;
        break;
      }

      // optional string layer = 2;
      case 2: {
        if (tag == 18) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer().data(), this->layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_param_str;
        break;
      }

      // optional string param_str = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_param_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param_str().data(), this->param_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_share_in_parallel;
        break;
      }

      // optional bool share_in_parallel = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_share_in_parallel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &share_in_parallel_)));
          set_has_share_in_parallel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PythonParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PythonParameter)
  return false;
#undef DO_
}

void PythonParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PythonParameter)
  // optional string module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "module");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module(), output);
  }

  // optional string layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->layer(), output);
  }

  // optional string param_str = 3 [default = ""];
  if (has_param_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_str().data(), this->param_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->param_str(), output);
  }

  // optional bool share_in_parallel = 4 [default = false];
  if (has_share_in_parallel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->share_in_parallel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PythonParameter)
}

::google::protobuf::uint8* PythonParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PythonParameter)
  // optional string module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "module");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module(), target);
  }

  // optional string layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layer(), target);
  }

  // optional string param_str = 3 [default = ""];
  if (has_param_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_str().data(), this->param_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->param_str(), target);
  }

  // optional bool share_in_parallel = 4 [default = false];
  if (has_share_in_parallel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->share_in_parallel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PythonParameter)
  return target;
}

int PythonParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module());
    }

    // optional string layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layer());
    }

    // optional string param_str = 3 [default = ""];
    if (has_param_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param_str());
    }

    // optional bool share_in_parallel = 4 [default = false];
    if (has_share_in_parallel()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PythonParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PythonParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PythonParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PythonParameter::MergeFrom(const PythonParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module()) {
      set_module(from.module());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_param_str()) {
      set_param_str(from.param_str());
    }
    if (from.has_share_in_parallel()) {
      set_share_in_parallel(from.share_in_parallel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PythonParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PythonParameter::CopyFrom(const PythonParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PythonParameter::IsInitialized() const {

  return true;
}

void PythonParameter::Swap(PythonParameter* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    std::swap(layer_, other->layer_);
    std::swap(param_str_, other->param_str_);
    std::swap(share_in_parallel_, other->share_in_parallel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PythonParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PythonParameter_descriptor_;
  metadata.reflection = PythonParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecurrentParameter::kNumOutputFieldNumber;
const int RecurrentParameter::kWeightFillerFieldNumber;
const int RecurrentParameter::kBiasFillerFieldNumber;
const int RecurrentParameter::kDebugInfoFieldNumber;
const int RecurrentParameter::kExposeHiddenFieldNumber;
#endif  // !_MSC_VER

RecurrentParameter::RecurrentParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.RecurrentParameter)
}

void RecurrentParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

RecurrentParameter::RecurrentParameter(const RecurrentParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.RecurrentParameter)
}

void RecurrentParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  debug_info_ = false;
  expose_hidden_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecurrentParameter::~RecurrentParameter() {
  // @@protoc_insertion_point(destructor:caffe.RecurrentParameter)
  SharedDtor();
}

void RecurrentParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void RecurrentParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecurrentParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecurrentParameter_descriptor_;
}

const RecurrentParameter& RecurrentParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

RecurrentParameter* RecurrentParameter::default_instance_ = NULL;

RecurrentParameter* RecurrentParameter::New() const {
  return new RecurrentParameter;
}

void RecurrentParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RecurrentParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(num_output_, expose_hidden_);
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecurrentParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.RecurrentParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 2;
      case 2: {
        if (tag == 18) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 3;
      case 3: {
        if (tag == 26) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_debug_info;
        break;
      }

      // optional bool debug_info = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_debug_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
          set_has_debug_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expose_hidden;
        break;
      }

      // optional bool expose_hidden = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_expose_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expose_hidden_)));
          set_has_expose_hidden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.RecurrentParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.RecurrentParameter)
  return false;
#undef DO_
}

void RecurrentParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.RecurrentParameter)
  // optional uint32 num_output = 1 [default = 0];
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 2;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->weight_filler(), output);
  }

  // optional .caffe.FillerParameter bias_filler = 3;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bias_filler(), output);
  }

  // optional bool debug_info = 4 [default = false];
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->debug_info(), output);
  }

  // optional bool expose_hidden = 5 [default = false];
  if (has_expose_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->expose_hidden(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.RecurrentParameter)
}

::google::protobuf::uint8* RecurrentParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.RecurrentParameter)
  // optional uint32 num_output = 1 [default = 0];
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 2;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->weight_filler(), target);
  }

  // optional .caffe.FillerParameter bias_filler = 3;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bias_filler(), target);
  }

  // optional bool debug_info = 4 [default = false];
  if (has_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->debug_info(), target);
  }

  // optional bool expose_hidden = 5 [default = false];
  if (has_expose_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->expose_hidden(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.RecurrentParameter)
  return target;
}

int RecurrentParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num_output = 1 [default = 0];
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional .caffe.FillerParameter weight_filler = 2;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }

    // optional .caffe.FillerParameter bias_filler = 3;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_filler());
    }

    // optional bool debug_info = 4 [default = false];
    if (has_debug_info()) {
      total_size += 1 + 1;
    }

    // optional bool expose_hidden = 5 [default = false];
    if (has_expose_hidden()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecurrentParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecurrentParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecurrentParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecurrentParameter::MergeFrom(const RecurrentParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
    if (from.has_expose_hidden()) {
      set_expose_hidden(from.expose_hidden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecurrentParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecurrentParameter::CopyFrom(const RecurrentParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecurrentParameter::IsInitialized() const {

  return true;
}

void RecurrentParameter::Swap(RecurrentParameter* other) {
  if (other != this) {
    std::swap(num_output_, other->num_output_);
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(bias_filler_, other->bias_filler_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(expose_hidden_, other->expose_hidden_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecurrentParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecurrentParameter_descriptor_;
  metadata.reflection = RecurrentParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReductionParameter_ReductionOp_descriptor_;
}
bool ReductionParameter_ReductionOp_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReductionParameter_ReductionOp ReductionParameter::SUM;
const ReductionParameter_ReductionOp ReductionParameter::ASUM;
const ReductionParameter_ReductionOp ReductionParameter::SUMSQ;
const ReductionParameter_ReductionOp ReductionParameter::MEAN;
const ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MIN;
const ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MAX;
const int ReductionParameter::ReductionOp_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReductionParameter::kOperationFieldNumber;
const int ReductionParameter::kAxisFieldNumber;
const int ReductionParameter::kCoeffFieldNumber;
#endif  // !_MSC_VER

ReductionParameter::ReductionParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReductionParameter)
}

void ReductionParameter::InitAsDefaultInstance() {
}

ReductionParameter::ReductionParameter(const ReductionParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ReductionParameter)
}

void ReductionParameter::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  axis_ = 0;
  coeff_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReductionParameter::~ReductionParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReductionParameter)
  SharedDtor();
}

void ReductionParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReductionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReductionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReductionParameter_descriptor_;
}

const ReductionParameter& ReductionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ReductionParameter* ReductionParameter::default_instance_ = NULL;

ReductionParameter* ReductionParameter::New() const {
  return new ReductionParameter;
}

void ReductionParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    operation_ = 1;
    axis_ = 0;
    coeff_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReductionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReductionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ReductionParameter_ReductionOp_IsValid(value)) {
            set_operation(static_cast< ::caffe::ReductionParameter_ReductionOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_coeff;
        break;
      }

      // optional float coeff = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coeff_)));
          set_has_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReductionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReductionParameter)
  return false;
#undef DO_
}

void ReductionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReductionParameter)
  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional int32 axis = 2 [default = 0];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional float coeff = 3 [default = 1];
  if (has_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->coeff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReductionParameter)
}

::google::protobuf::uint8* ReductionParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReductionParameter)
  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional int32 axis = 2 [default = 0];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional float coeff = 3 [default = 1];
  if (has_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->coeff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReductionParameter)
  return target;
}

int ReductionParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional int32 axis = 2 [default = 0];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional float coeff = 3 [default = 1];
    if (has_coeff()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReductionParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReductionParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReductionParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReductionParameter::MergeFrom(const ReductionParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_coeff()) {
      set_coeff(from.coeff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReductionParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReductionParameter::CopyFrom(const ReductionParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReductionParameter::IsInitialized() const {

  return true;
}

void ReductionParameter::Swap(ReductionParameter* other) {
  if (other != this) {
    std::swap(operation_, other->operation_);
    std::swap(axis_, other->axis_);
    std::swap(coeff_, other->coeff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReductionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReductionParameter_descriptor_;
  metadata.reflection = ReductionParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReLUParameter_Engine_descriptor_;
}
bool ReLUParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReLUParameter_Engine ReLUParameter::DEFAULT;
const ReLUParameter_Engine ReLUParameter::CAFFE;
const ReLUParameter_Engine ReLUParameter::CUDNN;
const ReLUParameter_Engine ReLUParameter::Engine_MIN;
const ReLUParameter_Engine ReLUParameter::Engine_MAX;
const int ReLUParameter::Engine_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReLUParameter::kNegativeSlopeFieldNumber;
const int ReLUParameter::kEngineFieldNumber;
#endif  // !_MSC_VER

ReLUParameter::ReLUParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReLUParameter)
}

void ReLUParameter::InitAsDefaultInstance() {
}

ReLUParameter::ReLUParameter(const ReLUParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ReLUParameter)
}

void ReLUParameter::SharedCtor() {
  _cached_size_ = 0;
  negative_slope_ = 0;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReLUParameter::~ReLUParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReLUParameter)
  SharedDtor();
}

void ReLUParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReLUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReLUParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReLUParameter_descriptor_;
}

const ReLUParameter& ReLUParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ReLUParameter* ReLUParameter::default_instance_ = NULL;

ReLUParameter* ReLUParameter::New() const {
  return new ReLUParameter;
}

void ReLUParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReLUParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(negative_slope_, engine_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReLUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReLUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float negative_slope = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_slope_)));
          set_has_negative_slope();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_engine;
        break;
      }

      // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
      case 2: {
        if (tag == 16) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ReLUParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::ReLUParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReLUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReLUParameter)
  return false;
#undef DO_
}

void ReLUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReLUParameter)
  // optional float negative_slope = 1 [default = 0];
  if (has_negative_slope()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->negative_slope(), output);
  }

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->engine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReLUParameter)
}

::google::protobuf::uint8* ReLUParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReLUParameter)
  // optional float negative_slope = 1 [default = 0];
  if (has_negative_slope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->negative_slope(), target);
  }

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->engine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReLUParameter)
  return target;
}

int ReLUParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float negative_slope = 1 [default = 0];
    if (has_negative_slope()) {
      total_size += 1 + 4;
    }

    // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReLUParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReLUParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReLUParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReLUParameter::MergeFrom(const ReLUParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_negative_slope()) {
      set_negative_slope(from.negative_slope());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReLUParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLUParameter::CopyFrom(const ReLUParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLUParameter::IsInitialized() const {

  return true;
}

void ReLUParameter::Swap(ReLUParameter* other) {
  if (other != this) {
    std::swap(negative_slope_, other->negative_slope_);
    std::swap(engine_, other->engine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReLUParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReLUParameter_descriptor_;
  metadata.reflection = ReLUParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReshapeParameter::kShapeFieldNumber;
const int ReshapeParameter::kAxisFieldNumber;
const int ReshapeParameter::kNumAxesFieldNumber;
#endif  // !_MSC_VER

ReshapeParameter::ReshapeParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReshapeParameter)
}

void ReshapeParameter::InitAsDefaultInstance() {
  shape_ = const_cast< ::caffe::BlobShape*>(&::caffe::BlobShape::default_instance());
}

ReshapeParameter::ReshapeParameter(const ReshapeParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ReshapeParameter)
}

void ReshapeParameter::SharedCtor() {
  _cached_size_ = 0;
  shape_ = NULL;
  axis_ = 0;
  num_axes_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReshapeParameter::~ReshapeParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReshapeParameter)
  SharedDtor();
}

void ReshapeParameter::SharedDtor() {
  if (this != default_instance_) {
    delete shape_;
  }
}

void ReshapeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReshapeParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReshapeParameter_descriptor_;
}

const ReshapeParameter& ReshapeParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ReshapeParameter* ReshapeParameter::default_instance_ = NULL;

ReshapeParameter* ReshapeParameter::New() const {
  return new ReshapeParameter;
}

void ReshapeParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_shape()) {
      if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
    }
    axis_ = 0;
    num_axes_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReshapeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReshapeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.BlobShape shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_axes;
        break;
      }

      // optional int32 num_axes = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_num_axes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
          set_has_num_axes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReshapeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReshapeParameter)
  return false;
#undef DO_
}

void ReshapeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReshapeParameter)
  // optional .caffe.BlobShape shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shape(), output);
  }

  // optional int32 axis = 2 [default = 0];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional int32 num_axes = 3 [default = -1];
  if (has_num_axes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_axes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReshapeParameter)
}

::google::protobuf::uint8* ReshapeParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReshapeParameter)
  // optional .caffe.BlobShape shape = 1;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shape(), target);
  }

  // optional int32 axis = 2 [default = 0];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional int32 num_axes = 3 [default = -1];
  if (has_num_axes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_axes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReshapeParameter)
  return target;
}

int ReshapeParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe.BlobShape shape = 1;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape());
    }

    // optional int32 axis = 2 [default = 0];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 3 [default = -1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReshapeParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReshapeParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReshapeParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReshapeParameter::MergeFrom(const ReshapeParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_num_axes()) {
      set_num_axes(from.num_axes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReshapeParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReshapeParameter::CopyFrom(const ReshapeParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReshapeParameter::IsInitialized() const {

  return true;
}

void ReshapeParameter::Swap(ReshapeParameter* other) {
  if (other != this) {
    std::swap(shape_, other->shape_);
    std::swap(axis_, other->axis_);
    std::swap(num_axes_, other->num_axes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReshapeParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReshapeParameter_descriptor_;
  metadata.reflection = ReshapeParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScaleParameter::kAxisFieldNumber;
const int ScaleParameter::kNumAxesFieldNumber;
const int ScaleParameter::kFillerFieldNumber;
const int ScaleParameter::kBiasTermFieldNumber;
const int ScaleParameter::kBiasFillerFieldNumber;
#endif  // !_MSC_VER

ScaleParameter::ScaleParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ScaleParameter)
}

void ScaleParameter::InitAsDefaultInstance() {
  filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

ScaleParameter::ScaleParameter(const ScaleParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ScaleParameter)
}

void ScaleParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  num_axes_ = 1;
  filler_ = NULL;
  bias_term_ = false;
  bias_filler_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScaleParameter::~ScaleParameter() {
  // @@protoc_insertion_point(destructor:caffe.ScaleParameter)
  SharedDtor();
}

void ScaleParameter::SharedDtor() {
  if (this != default_instance_) {
    delete filler_;
    delete bias_filler_;
  }
}

void ScaleParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScaleParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScaleParameter_descriptor_;
}

const ScaleParameter& ScaleParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ScaleParameter* ScaleParameter::default_instance_ = NULL;

ScaleParameter* ScaleParameter::New() const {
  return new ScaleParameter;
}

void ScaleParameter::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    axis_ = 1;
    num_axes_ = 1;
    if (has_filler()) {
      if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
    }
    bias_term_ = false;
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScaleParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ScaleParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_axes;
        break;
      }

      // optional int32 num_axes = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_num_axes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
          set_has_num_axes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filler;
        break;
      }

      // optional .caffe.FillerParameter filler = 3;
      case 3: {
        if (tag == 26) {
         parse_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bias_term;
        break;
      }

      // optional bool bias_term = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_bias_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
          set_has_bias_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 5;
      case 5: {
        if (tag == 42) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ScaleParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ScaleParameter)
  return false;
#undef DO_
}

void ScaleParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ScaleParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (has_num_axes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_axes(), output);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (has_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->filler(), output);
  }

  // optional bool bias_term = 4 [default = false];
  if (has_bias_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bias_filler(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ScaleParameter)
}

::google::protobuf::uint8* ScaleParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ScaleParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (has_num_axes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_axes(), target);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (has_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->filler(), target);
  }

  // optional bool bias_term = 4 [default = false];
  if (has_bias_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bias_filler(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ScaleParameter)
  return target;
}

int ScaleParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

    // optional .caffe.FillerParameter filler = 3;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filler());
    }

    // optional bool bias_term = 4 [default = false];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional .caffe.FillerParameter bias_filler = 5;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_filler());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScaleParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScaleParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScaleParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScaleParameter::MergeFrom(const ScaleParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_num_axes()) {
      set_num_axes(from.num_axes());
    }
    if (from.has_filler()) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
    if (from.has_bias_term()) {
      set_bias_term(from.bias_term());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScaleParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaleParameter::CopyFrom(const ScaleParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleParameter::IsInitialized() const {

  return true;
}

void ScaleParameter::Swap(ScaleParameter* other) {
  if (other != this) {
    std::swap(axis_, other->axis_);
    std::swap(num_axes_, other->num_axes_);
    std::swap(filler_, other->filler_);
    std::swap(bias_term_, other->bias_term_);
    std::swap(bias_filler_, other->bias_filler_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScaleParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScaleParameter_descriptor_;
  metadata.reflection = ScaleParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigmoidParameter_Engine_descriptor_;
}
bool SigmoidParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SigmoidParameter_Engine SigmoidParameter::DEFAULT;
const SigmoidParameter_Engine SigmoidParameter::CAFFE;
const SigmoidParameter_Engine SigmoidParameter::CUDNN;
const SigmoidParameter_Engine SigmoidParameter::Engine_MIN;
const SigmoidParameter_Engine SigmoidParameter::Engine_MAX;
const int SigmoidParameter::Engine_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SigmoidParameter::kEngineFieldNumber;
#endif  // !_MSC_VER

SigmoidParameter::SigmoidParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SigmoidParameter)
}

void SigmoidParameter::InitAsDefaultInstance() {
}

SigmoidParameter::SigmoidParameter(const SigmoidParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SigmoidParameter)
}

void SigmoidParameter::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SigmoidParameter::~SigmoidParameter() {
  // @@protoc_insertion_point(destructor:caffe.SigmoidParameter)
  SharedDtor();
}

void SigmoidParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SigmoidParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigmoidParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigmoidParameter_descriptor_;
}

const SigmoidParameter& SigmoidParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SigmoidParameter* SigmoidParameter::default_instance_ = NULL;

SigmoidParameter* SigmoidParameter::New() const {
  return new SigmoidParameter;
}

void SigmoidParameter::Clear() {
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SigmoidParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SigmoidParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SigmoidParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SigmoidParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SigmoidParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SigmoidParameter)
  return false;
#undef DO_
}

void SigmoidParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SigmoidParameter)
  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SigmoidParameter)
}

::google::protobuf::uint8* SigmoidParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SigmoidParameter)
  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SigmoidParameter)
  return target;
}

int SigmoidParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigmoidParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SigmoidParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SigmoidParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SigmoidParameter::MergeFrom(const SigmoidParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SigmoidParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidParameter::CopyFrom(const SigmoidParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidParameter::IsInitialized() const {

  return true;
}

void SigmoidParameter::Swap(SigmoidParameter* other) {
  if (other != this) {
    std::swap(engine_, other->engine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SigmoidParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SigmoidParameter_descriptor_;
  metadata.reflection = SigmoidParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SliceParameter::kAxisFieldNumber;
const int SliceParameter::kSlicePointFieldNumber;
const int SliceParameter::kSliceDimFieldNumber;
#endif  // !_MSC_VER

SliceParameter::SliceParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SliceParameter)
}

void SliceParameter::InitAsDefaultInstance() {
}

SliceParameter::SliceParameter(const SliceParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SliceParameter)
}

void SliceParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  slice_dim_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SliceParameter::~SliceParameter() {
  // @@protoc_insertion_point(destructor:caffe.SliceParameter)
  SharedDtor();
}

void SliceParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SliceParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SliceParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SliceParameter_descriptor_;
}

const SliceParameter& SliceParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SliceParameter* SliceParameter::default_instance_ = NULL;

SliceParameter* SliceParameter::New() const {
  return new SliceParameter;
}

void SliceParameter::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    axis_ = 1;
    slice_dim_ = 1u;
  }
  slice_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SliceParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SliceParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slice_dim = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slice_dim_)));
          set_has_slice_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slice_point;
        break;
      }

      // repeated uint32 slice_point = 2;
      case 2: {
        if (tag == 16) {
         parse_slice_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_slice_point())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_slice_point())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slice_point;
        if (input->ExpectTag(24)) goto parse_axis;
        break;
      }

      // optional int32 axis = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SliceParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SliceParameter)
  return false;
#undef DO_
}

void SliceParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SliceParameter)
  // optional uint32 slice_dim = 1 [default = 1];
  if (has_slice_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slice_dim(), output);
  }

  // repeated uint32 slice_point = 2;
  for (int i = 0; i < this->slice_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->slice_point(i), output);
  }

  // optional int32 axis = 3 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->axis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SliceParameter)
}

::google::protobuf::uint8* SliceParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SliceParameter)
  // optional uint32 slice_dim = 1 [default = 1];
  if (has_slice_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slice_dim(), target);
  }

  // repeated uint32 slice_point = 2;
  for (int i = 0; i < this->slice_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->slice_point(i), target);
  }

  // optional int32 axis = 3 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->axis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SliceParameter)
  return target;
}

int SliceParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 axis = 3 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional uint32 slice_dim = 1 [default = 1];
    if (has_slice_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slice_dim());
    }

  }
  // repeated uint32 slice_point = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->slice_point_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->slice_point(i));
    }
    total_size += 1 * this->slice_point_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SliceParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SliceParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SliceParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SliceParameter::MergeFrom(const SliceParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  slice_point_.MergeFrom(from.slice_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_slice_dim()) {
      set_slice_dim(from.slice_dim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SliceParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SliceParameter::CopyFrom(const SliceParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliceParameter::IsInitialized() const {

  return true;
}

void SliceParameter::Swap(SliceParameter* other) {
  if (other != this) {
    std::swap(axis_, other->axis_);
    slice_point_.Swap(&other->slice_point_);
    std::swap(slice_dim_, other->slice_dim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SliceParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SliceParameter_descriptor_;
  metadata.reflection = SliceParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftmaxParameter_Engine_descriptor_;
}
bool SoftmaxParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SoftmaxParameter_Engine SoftmaxParameter::DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter::CAFFE;
const SoftmaxParameter_Engine SoftmaxParameter::CUDNN;
const SoftmaxParameter_Engine SoftmaxParameter::Engine_MIN;
const SoftmaxParameter_Engine SoftmaxParameter::Engine_MAX;
const int SoftmaxParameter::Engine_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SoftmaxParameter::kEngineFieldNumber;
const int SoftmaxParameter::kAxisFieldNumber;
#endif  // !_MSC_VER

SoftmaxParameter::SoftmaxParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SoftmaxParameter)
}

void SoftmaxParameter::InitAsDefaultInstance() {
}

SoftmaxParameter::SoftmaxParameter(const SoftmaxParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SoftmaxParameter)
}

void SoftmaxParameter::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 0;
  axis_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoftmaxParameter::~SoftmaxParameter() {
  // @@protoc_insertion_point(destructor:caffe.SoftmaxParameter)
  SharedDtor();
}

void SoftmaxParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoftmaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftmaxParameter_descriptor_;
}

const SoftmaxParameter& SoftmaxParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SoftmaxParameter* SoftmaxParameter::default_instance_ = NULL;

SoftmaxParameter* SoftmaxParameter::New() const {
  return new SoftmaxParameter;
}

void SoftmaxParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    engine_ = 0;
    axis_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoftmaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SoftmaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SoftmaxParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SoftmaxParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SoftmaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SoftmaxParameter)
  return false;
#undef DO_
}

void SoftmaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SoftmaxParameter)
  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SoftmaxParameter)
}

::google::protobuf::uint8* SoftmaxParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SoftmaxParameter)
  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SoftmaxParameter)
  return target;
}

int SoftmaxParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoftmaxParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoftmaxParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoftmaxParameter::MergeFrom(const SoftmaxParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_engine()) {
      set_engine(from.engine());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoftmaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxParameter::CopyFrom(const SoftmaxParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxParameter::IsInitialized() const {

  return true;
}

void SoftmaxParameter::Swap(SoftmaxParameter* other) {
  if (other != this) {
    std::swap(engine_, other->engine_);
    std::swap(axis_, other->axis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoftmaxParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftmaxParameter_descriptor_;
  metadata.reflection = SoftmaxParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TanHParameter_Engine_descriptor_;
}
bool TanHParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TanHParameter_Engine TanHParameter::DEFAULT;
const TanHParameter_Engine TanHParameter::CAFFE;
const TanHParameter_Engine TanHParameter::CUDNN;
const TanHParameter_Engine TanHParameter::Engine_MIN;
const TanHParameter_Engine TanHParameter::Engine_MAX;
const int TanHParameter::Engine_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TanHParameter::kEngineFieldNumber;
#endif  // !_MSC_VER

TanHParameter::TanHParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TanHParameter)
}

void TanHParameter::InitAsDefaultInstance() {
}

TanHParameter::TanHParameter(const TanHParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.TanHParameter)
}

void TanHParameter::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TanHParameter::~TanHParameter() {
  // @@protoc_insertion_point(destructor:caffe.TanHParameter)
  SharedDtor();
}

void TanHParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TanHParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TanHParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TanHParameter_descriptor_;
}

const TanHParameter& TanHParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

TanHParameter* TanHParameter::default_instance_ = NULL;

TanHParameter* TanHParameter::New() const {
  return new TanHParameter;
}

void TanHParameter::Clear() {
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TanHParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TanHParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::TanHParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::TanHParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TanHParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TanHParameter)
  return false;
#undef DO_
}

void TanHParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TanHParameter)
  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TanHParameter)
}

::google::protobuf::uint8* TanHParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TanHParameter)
  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TanHParameter)
  return target;
}

int TanHParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TanHParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TanHParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TanHParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TanHParameter::MergeFrom(const TanHParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TanHParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TanHParameter::CopyFrom(const TanHParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TanHParameter::IsInitialized() const {

  return true;
}

void TanHParameter::Swap(TanHParameter* other) {
  if (other != this) {
    std::swap(engine_, other->engine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TanHParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TanHParameter_descriptor_;
  metadata.reflection = TanHParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TileParameter::kAxisFieldNumber;
const int TileParameter::kTilesFieldNumber;
#endif  // !_MSC_VER

TileParameter::TileParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TileParameter)
}

void TileParameter::InitAsDefaultInstance() {
}

TileParameter::TileParameter(const TileParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.TileParameter)
}

void TileParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  tiles_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TileParameter::~TileParameter() {
  // @@protoc_insertion_point(destructor:caffe.TileParameter)
  SharedDtor();
}

void TileParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TileParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TileParameter_descriptor_;
}

const TileParameter& TileParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

TileParameter* TileParameter::default_instance_ = NULL;

TileParameter* TileParameter::New() const {
  return new TileParameter;
}

void TileParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    axis_ = 1;
    tiles_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TileParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TileParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tiles;
        break;
      }

      // optional int32 tiles = 2;
      case 2: {
        if (tag == 16) {
         parse_tiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiles_)));
          set_has_tiles();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TileParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TileParameter)
  return false;
#undef DO_
}

void TileParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TileParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 tiles = 2;
  if (has_tiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tiles(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TileParameter)
}

::google::protobuf::uint8* TileParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TileParameter)
  // optional int32 axis = 1 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 tiles = 2;
  if (has_tiles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tiles(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TileParameter)
  return target;
}

int TileParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 tiles = 2;
    if (has_tiles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiles());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TileParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TileParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TileParameter::MergeFrom(const TileParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_tiles()) {
      set_tiles(from.tiles());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TileParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileParameter::CopyFrom(const TileParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileParameter::IsInitialized() const {

  return true;
}

void TileParameter::Swap(TileParameter* other) {
  if (other != this) {
    std::swap(axis_, other->axis_);
    std::swap(tiles_, other->tiles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TileParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TileParameter_descriptor_;
  metadata.reflection = TileParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThresholdParameter::kThresholdFieldNumber;
#endif  // !_MSC_VER

ThresholdParameter::ThresholdParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ThresholdParameter)
}

void ThresholdParameter::InitAsDefaultInstance() {
}

ThresholdParameter::ThresholdParameter(const ThresholdParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ThresholdParameter)
}

void ThresholdParameter::SharedCtor() {
  _cached_size_ = 0;
  threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThresholdParameter::~ThresholdParameter() {
  // @@protoc_insertion_point(destructor:caffe.ThresholdParameter)
  SharedDtor();
}

void ThresholdParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThresholdParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThresholdParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThresholdParameter_descriptor_;
}

const ThresholdParameter& ThresholdParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ThresholdParameter* ThresholdParameter::default_instance_ = NULL;

ThresholdParameter* ThresholdParameter::New() const {
  return new ThresholdParameter;
}

void ThresholdParameter::Clear() {
  threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThresholdParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ThresholdParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float threshold = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ThresholdParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ThresholdParameter)
  return false;
#undef DO_
}

void ThresholdParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ThresholdParameter)
  // optional float threshold = 1 [default = 0];
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->threshold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ThresholdParameter)
}

::google::protobuf::uint8* ThresholdParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ThresholdParameter)
  // optional float threshold = 1 [default = 0];
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->threshold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ThresholdParameter)
  return target;
}

int ThresholdParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float threshold = 1 [default = 0];
    if (has_threshold()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThresholdParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThresholdParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThresholdParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThresholdParameter::MergeFrom(const ThresholdParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThresholdParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThresholdParameter::CopyFrom(const ThresholdParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdParameter::IsInitialized() const {

  return true;
}

void ThresholdParameter::Swap(ThresholdParameter* other) {
  if (other != this) {
    std::swap(threshold_, other->threshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThresholdParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThresholdParameter_descriptor_;
  metadata.reflection = ThresholdParameter_reflection_;
  return metadata;
}


// ===================================================================

::std::string* WindowDataParameter::_default_crop_mode_ = NULL;
#ifndef _MSC_VER
const int WindowDataParameter::kSourceFieldNumber;
const int WindowDataParameter::kScaleFieldNumber;
const int WindowDataParameter::kMeanFileFieldNumber;
const int WindowDataParameter::kBatchSizeFieldNumber;
const int WindowDataParameter::kCropSizeFieldNumber;
const int WindowDataParameter::kMirrorFieldNumber;
const int WindowDataParameter::kFgThresholdFieldNumber;
const int WindowDataParameter::kBgThresholdFieldNumber;
const int WindowDataParameter::kFgFractionFieldNumber;
const int WindowDataParameter::kContextPadFieldNumber;
const int WindowDataParameter::kCropModeFieldNumber;
const int WindowDataParameter::kCacheImagesFieldNumber;
const int WindowDataParameter::kRootFolderFieldNumber;
#endif  // !_MSC_VER

WindowDataParameter::WindowDataParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.WindowDataParameter)
}

void WindowDataParameter::InitAsDefaultInstance() {
}

WindowDataParameter::WindowDataParameter(const WindowDataParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.WindowDataParameter)
}

void WindowDataParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = 1;
  mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 0u;
  crop_size_ = 0u;
  mirror_ = false;
  fg_threshold_ = 0.5f;
  bg_threshold_ = 0.5f;
  fg_fraction_ = 0.25f;
  context_pad_ = 0u;
  crop_mode_ = const_cast< ::std::string*>(_default_crop_mode_);
  cache_images_ = false;
  root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WindowDataParameter::~WindowDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.WindowDataParameter)
  SharedDtor();
}

void WindowDataParameter::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (crop_mode_ != _default_crop_mode_) {
    delete crop_mode_;
  }
  if (root_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete root_folder_;
  }
  if (this != default_instance_) {
  }
}

void WindowDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WindowDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WindowDataParameter_descriptor_;
}

const WindowDataParameter& WindowDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

WindowDataParameter* WindowDataParameter::default_instance_ = NULL;

WindowDataParameter* WindowDataParameter::New() const {
  return new WindowDataParameter;
}

void WindowDataParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WindowDataParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(batch_size_, crop_size_);
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    scale_ = 1;
    if (has_mean_file()) {
      if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mean_file_->clear();
      }
    }
    mirror_ = false;
    fg_threshold_ = 0.5f;
    bg_threshold_ = 0.5f;
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(cache_images_, context_pad_);
    fg_fraction_ = 0.25f;
    if (has_crop_mode()) {
      if (crop_mode_ != _default_crop_mode_) {
        crop_mode_->assign(*_default_crop_mode_);
      }
    }
    if (has_root_folder()) {
      if (root_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        root_folder_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WindowDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.WindowDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (tag == 26) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (tag == 32) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_crop_size;
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_crop_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
          set_has_crop_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_fg_threshold;
        break;
      }

      // optional float fg_threshold = 7 [default = 0.5];
      case 7: {
        if (tag == 61) {
         parse_fg_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fg_threshold_)));
          set_has_fg_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_bg_threshold;
        break;
      }

      // optional float bg_threshold = 8 [default = 0.5];
      case 8: {
        if (tag == 69) {
         parse_bg_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bg_threshold_)));
          set_has_bg_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_fg_fraction;
        break;
      }

      // optional float fg_fraction = 9 [default = 0.25];
      case 9: {
        if (tag == 77) {
         parse_fg_fraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fg_fraction_)));
          set_has_fg_fraction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_context_pad;
        break;
      }

      // optional uint32 context_pad = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_context_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_pad_)));
          set_has_context_pad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_crop_mode;
        break;
      }

      // optional string crop_mode = 11 [default = "warp"];
      case 11: {
        if (tag == 90) {
         parse_crop_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crop_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crop_mode().data(), this->crop_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "crop_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cache_images;
        break;
      }

      // optional bool cache_images = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_cache_images:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_images_)));
          set_has_cache_images();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_root_folder;
        break;
      }

      // optional string root_folder = 13 [default = ""];
      case 13: {
        if (tag == 106) {
         parse_root_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->root_folder().data(), this->root_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "root_folder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.WindowDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.WindowDataParameter)
  return false;
#undef DO_
}

void WindowDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.WindowDataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional float fg_threshold = 7 [default = 0.5];
  if (has_fg_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fg_threshold(), output);
  }

  // optional float bg_threshold = 8 [default = 0.5];
  if (has_bg_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bg_threshold(), output);
  }

  // optional float fg_fraction = 9 [default = 0.25];
  if (has_fg_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fg_fraction(), output);
  }

  // optional uint32 context_pad = 10 [default = 0];
  if (has_context_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->context_pad(), output);
  }

  // optional string crop_mode = 11 [default = "warp"];
  if (has_crop_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crop_mode().data(), this->crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "crop_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->crop_mode(), output);
  }

  // optional bool cache_images = 12 [default = false];
  if (has_cache_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->cache_images(), output);
  }

  // optional string root_folder = 13 [default = ""];
  if (has_root_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "root_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->root_folder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.WindowDataParameter)
}

::google::protobuf::uint8* WindowDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.WindowDataParameter)
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (has_crop_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional float fg_threshold = 7 [default = 0.5];
  if (has_fg_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fg_threshold(), target);
  }

  // optional float bg_threshold = 8 [default = 0.5];
  if (has_bg_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->bg_threshold(), target);
  }

  // optional float fg_fraction = 9 [default = 0.25];
  if (has_fg_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fg_fraction(), target);
  }

  // optional uint32 context_pad = 10 [default = 0];
  if (has_context_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->context_pad(), target);
  }

  // optional string crop_mode = 11 [default = "warp"];
  if (has_crop_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crop_mode().data(), this->crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "crop_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->crop_mode(), target);
  }

  // optional bool cache_images = 12 [default = false];
  if (has_cache_images()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->cache_images(), target);
  }

  // optional string root_folder = 13 [default = ""];
  if (has_root_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), this->root_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "root_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->root_folder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.WindowDataParameter)
  return target;
}

int WindowDataParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional float fg_threshold = 7 [default = 0.5];
    if (has_fg_threshold()) {
      total_size += 1 + 4;
    }

    // optional float bg_threshold = 8 [default = 0.5];
    if (has_bg_threshold()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float fg_fraction = 9 [default = 0.25];
    if (has_fg_fraction()) {
      total_size += 1 + 4;
    }

    // optional uint32 context_pad = 10 [default = 0];
    if (has_context_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context_pad());
    }

    // optional string crop_mode = 11 [default = "warp"];
    if (has_crop_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crop_mode());
    }

    // optional bool cache_images = 12 [default = false];
    if (has_cache_images()) {
      total_size += 1 + 1;
    }

    // optional string root_folder = 13 [default = ""];
    if (has_root_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_folder());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WindowDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WindowDataParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WindowDataParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WindowDataParameter::MergeFrom(const WindowDataParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_mean_file()) {
      set_mean_file(from.mean_file());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_crop_size()) {
      set_crop_size(from.crop_size());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
    if (from.has_fg_threshold()) {
      set_fg_threshold(from.fg_threshold());
    }
    if (from.has_bg_threshold()) {
      set_bg_threshold(from.bg_threshold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fg_fraction()) {
      set_fg_fraction(from.fg_fraction());
    }
    if (from.has_context_pad()) {
      set_context_pad(from.context_pad());
    }
    if (from.has_crop_mode()) {
      set_crop_mode(from.crop_mode());
    }
    if (from.has_cache_images()) {
      set_cache_images(from.cache_images());
    }
    if (from.has_root_folder()) {
      set_root_folder(from.root_folder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WindowDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowDataParameter::CopyFrom(const WindowDataParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowDataParameter::IsInitialized() const {

  return true;
}

void WindowDataParameter::Swap(WindowDataParameter* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(scale_, other->scale_);
    std::swap(mean_file_, other->mean_file_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(crop_size_, other->crop_size_);
    std::swap(mirror_, other->mirror_);
    std::swap(fg_threshold_, other->fg_threshold_);
    std::swap(bg_threshold_, other->bg_threshold_);
    std::swap(fg_fraction_, other->fg_fraction_);
    std::swap(context_pad_, other->context_pad_);
    std::swap(crop_mode_, other->crop_mode_);
    std::swap(cache_images_, other->cache_images_);
    std::swap(root_folder_, other->root_folder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WindowDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WindowDataParameter_descriptor_;
  metadata.reflection = WindowDataParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPPParameter_PoolMethod_descriptor_;
}
bool SPPParameter_PoolMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SPPParameter_PoolMethod SPPParameter::MAX;
const SPPParameter_PoolMethod SPPParameter::AVE;
const SPPParameter_PoolMethod SPPParameter::STOCHASTIC;
const SPPParameter_PoolMethod SPPParameter::PoolMethod_MIN;
const SPPParameter_PoolMethod SPPParameter::PoolMethod_MAX;
const int SPPParameter::PoolMethod_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPPParameter_Engine_descriptor_;
}
bool SPPParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SPPParameter_Engine SPPParameter::DEFAULT;
const SPPParameter_Engine SPPParameter::CAFFE;
const SPPParameter_Engine SPPParameter::CUDNN;
const SPPParameter_Engine SPPParameter::Engine_MIN;
const SPPParameter_Engine SPPParameter::Engine_MAX;
const int SPPParameter::Engine_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SPPParameter::kPyramidHeightFieldNumber;
const int SPPParameter::kPoolFieldNumber;
const int SPPParameter::kEngineFieldNumber;
#endif  // !_MSC_VER

SPPParameter::SPPParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SPPParameter)
}

void SPPParameter::InitAsDefaultInstance() {
}

SPPParameter::SPPParameter(const SPPParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SPPParameter)
}

void SPPParameter::SharedCtor() {
  _cached_size_ = 0;
  pyramid_height_ = 0u;
  pool_ = 0;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPPParameter::~SPPParameter() {
  // @@protoc_insertion_point(destructor:caffe.SPPParameter)
  SharedDtor();
}

void SPPParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPPParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPPParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPPParameter_descriptor_;
}

const SPPParameter& SPPParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SPPParameter* SPPParameter::default_instance_ = NULL;

SPPParameter* SPPParameter::New() const {
  return new SPPParameter;
}

void SPPParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SPPParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pyramid_height_, engine_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPPParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SPPParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pyramid_height = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pyramid_height_)));
          set_has_pyramid_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pool;
        break;
      }

      // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
      case 2: {
        if (tag == 16) {
         parse_pool:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SPPParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::SPPParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_engine;
        break;
      }

      // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
      case 6: {
        if (tag == 48) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SPPParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SPPParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SPPParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SPPParameter)
  return false;
#undef DO_
}

void SPPParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SPPParameter)
  // optional uint32 pyramid_height = 1;
  if (has_pyramid_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pyramid_height(), output);
  }

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pool(), output);
  }

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->engine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SPPParameter)
}

::google::protobuf::uint8* SPPParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SPPParameter)
  // optional uint32 pyramid_height = 1;
  if (has_pyramid_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pyramid_height(), target);
  }

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pool(), target);
  }

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->engine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SPPParameter)
  return target;
}

int SPPParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pyramid_height = 1;
    if (has_pyramid_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pyramid_height());
    }

    // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPPParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPPParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPPParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPPParameter::MergeFrom(const SPPParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pyramid_height()) {
      set_pyramid_height(from.pyramid_height());
    }
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPPParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPPParameter::CopyFrom(const SPPParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPPParameter::IsInitialized() const {

  return true;
}

void SPPParameter::Swap(SPPParameter* other) {
  if (other != this) {
    std::swap(pyramid_height_, other->pyramid_height_);
    std::swap(pool_, other->pool_);
    std::swap(engine_, other->engine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPPParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPPParameter_descriptor_;
  metadata.reflection = SPPParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Input3DParameter::kBatchSizeFieldNumber;
const int Input3DParameter::kDataListFileFieldNumber;
const int Input3DParameter::kGroundtruthListFileFieldNumber;
const int Input3DParameter::kPreloadDataFieldNumber;
const int Input3DParameter::kRowMajorFieldNumber;
const int Input3DParameter::kHeightFieldNumber;
const int Input3DParameter::kWidthFieldNumber;
const int Input3DParameter::kDepthFieldNumber;
const int Input3DParameter::kNumClassesFieldNumber;
const int Input3DParameter::kCustomizedCropFieldNumber;
const int Input3DParameter::kFreespaceLabelFieldNumber;
const int Input3DParameter::kCeilingLabelFieldNumber;
const int Input3DParameter::kWallLabelFieldNumber;
const int Input3DParameter::kFloorLabelFieldNumber;
const int Input3DParameter::kIgnoreLabelFieldNumber;
#endif  // !_MSC_VER

Input3DParameter::Input3DParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Input3DParameter)
}

void Input3DParameter::InitAsDefaultInstance() {
}

Input3DParameter::Input3DParameter(const Input3DParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.Input3DParameter)
}

void Input3DParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  batch_size_ = 0u;
  data_list_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groundtruth_list_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preload_data_ = true;
  row_major_ = true;
  height_ = 0u;
  width_ = 0u;
  depth_ = 0u;
  num_classes_ = 0u;
  customized_crop_ = true;
  freespace_label_ = 0u;
  ceiling_label_ = 0u;
  wall_label_ = 0u;
  floor_label_ = 0u;
  ignore_label_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Input3DParameter::~Input3DParameter() {
  // @@protoc_insertion_point(destructor:caffe.Input3DParameter)
  SharedDtor();
}

void Input3DParameter::SharedDtor() {
  if (data_list_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_list_file_;
  }
  if (groundtruth_list_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groundtruth_list_file_;
  }
  if (this != default_instance_) {
  }
}

void Input3DParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Input3DParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Input3DParameter_descriptor_;
}

const Input3DParameter& Input3DParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

Input3DParameter* Input3DParameter::default_instance_ = NULL;

Input3DParameter* Input3DParameter::New() const {
  return new Input3DParameter;
}

void Input3DParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Input3DParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(batch_size_, height_);
    ZR_(width_, depth_);
    if (has_data_list_file()) {
      if (data_list_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_list_file_->clear();
      }
    }
    if (has_groundtruth_list_file()) {
      if (groundtruth_list_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groundtruth_list_file_->clear();
      }
    }
    preload_data_ = true;
    row_major_ = true;
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(num_classes_, ignore_label_);
    customized_crop_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Input3DParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Input3DParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 batch_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data_list_file;
        break;
      }

      // optional string data_list_file = 2;
      case 2: {
        if (tag == 18) {
         parse_data_list_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_list_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_list_file().data(), this->data_list_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data_list_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_groundtruth_list_file;
        break;
      }

      // optional string groundtruth_list_file = 3;
      case 3: {
        if (tag == 26) {
         parse_groundtruth_list_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groundtruth_list_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groundtruth_list_file().data(), this->groundtruth_list_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groundtruth_list_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_preload_data;
        break;
      }

      // optional bool preload_data = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_preload_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preload_data_)));
          set_has_preload_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // optional uint32 height = 5;
      case 5: {
        if (tag == 40) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_width;
        break;
      }

      // optional uint32 width = 6;
      case 6: {
        if (tag == 48) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_depth;
        break;
      }

      // optional uint32 depth = 7;
      case 7: {
        if (tag == 56) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_classes;
        break;
      }

      // optional uint32 num_classes = 8;
      case 8: {
        if (tag == 64) {
         parse_num_classes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_classes_)));
          set_has_num_classes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_row_major;
        break;
      }

      // optional bool row_major = 9 [default = true];
      case 9: {
        if (tag == 72) {
         parse_row_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &row_major_)));
          set_has_row_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_customized_crop;
        break;
      }

      // optional bool customized_crop = 10 [default = true];
      case 10: {
        if (tag == 80) {
         parse_customized_crop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &customized_crop_)));
          set_has_customized_crop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_freespace_label;
        break;
      }

      // optional uint32 freespace_label = 11;
      case 11: {
        if (tag == 88) {
         parse_freespace_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freespace_label_)));
          set_has_freespace_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ceiling_label;
        break;
      }

      // optional uint32 ceiling_label = 12;
      case 12: {
        if (tag == 96) {
         parse_ceiling_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ceiling_label_)));
          set_has_ceiling_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_wall_label;
        break;
      }

      // optional uint32 wall_label = 13;
      case 13: {
        if (tag == 104) {
         parse_wall_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wall_label_)));
          set_has_wall_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_floor_label;
        break;
      }

      // optional uint32 floor_label = 14;
      case 14: {
        if (tag == 112) {
         parse_floor_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floor_label_)));
          set_has_floor_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_ignore_label;
        break;
      }

      // optional uint32 ignore_label = 15;
      case 15: {
        if (tag == 120) {
         parse_ignore_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignore_label_)));
          set_has_ignore_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Input3DParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Input3DParameter)
  return false;
#undef DO_
}

void Input3DParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Input3DParameter)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->batch_size(), output);
  }

  // optional string data_list_file = 2;
  if (has_data_list_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_list_file().data(), this->data_list_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data_list_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data_list_file(), output);
  }

  // optional string groundtruth_list_file = 3;
  if (has_groundtruth_list_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groundtruth_list_file().data(), this->groundtruth_list_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groundtruth_list_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->groundtruth_list_file(), output);
  }

  // optional bool preload_data = 4 [default = true];
  if (has_preload_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->preload_data(), output);
  }

  // optional uint32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height(), output);
  }

  // optional uint32 width = 6;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->width(), output);
  }

  // optional uint32 depth = 7;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->depth(), output);
  }

  // optional uint32 num_classes = 8;
  if (has_num_classes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_classes(), output);
  }

  // optional bool row_major = 9 [default = true];
  if (has_row_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->row_major(), output);
  }

  // optional bool customized_crop = 10 [default = true];
  if (has_customized_crop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->customized_crop(), output);
  }

  // optional uint32 freespace_label = 11;
  if (has_freespace_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->freespace_label(), output);
  }

  // optional uint32 ceiling_label = 12;
  if (has_ceiling_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ceiling_label(), output);
  }

  // optional uint32 wall_label = 13;
  if (has_wall_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->wall_label(), output);
  }

  // optional uint32 floor_label = 14;
  if (has_floor_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->floor_label(), output);
  }

  // optional uint32 ignore_label = 15;
  if (has_ignore_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ignore_label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Input3DParameter)
}

::google::protobuf::uint8* Input3DParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Input3DParameter)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->batch_size(), target);
  }

  // optional string data_list_file = 2;
  if (has_data_list_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_list_file().data(), this->data_list_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data_list_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_list_file(), target);
  }

  // optional string groundtruth_list_file = 3;
  if (has_groundtruth_list_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groundtruth_list_file().data(), this->groundtruth_list_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groundtruth_list_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groundtruth_list_file(), target);
  }

  // optional bool preload_data = 4 [default = true];
  if (has_preload_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->preload_data(), target);
  }

  // optional uint32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height(), target);
  }

  // optional uint32 width = 6;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->width(), target);
  }

  // optional uint32 depth = 7;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->depth(), target);
  }

  // optional uint32 num_classes = 8;
  if (has_num_classes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_classes(), target);
  }

  // optional bool row_major = 9 [default = true];
  if (has_row_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->row_major(), target);
  }

  // optional bool customized_crop = 10 [default = true];
  if (has_customized_crop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->customized_crop(), target);
  }

  // optional uint32 freespace_label = 11;
  if (has_freespace_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->freespace_label(), target);
  }

  // optional uint32 ceiling_label = 12;
  if (has_ceiling_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ceiling_label(), target);
  }

  // optional uint32 wall_label = 13;
  if (has_wall_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->wall_label(), target);
  }

  // optional uint32 floor_label = 14;
  if (has_floor_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->floor_label(), target);
  }

  // optional uint32 ignore_label = 15;
  if (has_ignore_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ignore_label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Input3DParameter)
  return target;
}

int Input3DParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 batch_size = 1;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional string data_list_file = 2;
    if (has_data_list_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_list_file());
    }

    // optional string groundtruth_list_file = 3;
    if (has_groundtruth_list_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groundtruth_list_file());
    }

    // optional bool preload_data = 4 [default = true];
    if (has_preload_data()) {
      total_size += 1 + 1;
    }

    // optional bool row_major = 9 [default = true];
    if (has_row_major()) {
      total_size += 1 + 1;
    }

    // optional uint32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 6;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 depth = 7;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depth());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 num_classes = 8;
    if (has_num_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_classes());
    }

    // optional bool customized_crop = 10 [default = true];
    if (has_customized_crop()) {
      total_size += 1 + 1;
    }

    // optional uint32 freespace_label = 11;
    if (has_freespace_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freespace_label());
    }

    // optional uint32 ceiling_label = 12;
    if (has_ceiling_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ceiling_label());
    }

    // optional uint32 wall_label = 13;
    if (has_wall_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wall_label());
    }

    // optional uint32 floor_label = 14;
    if (has_floor_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->floor_label());
    }

    // optional uint32 ignore_label = 15;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ignore_label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Input3DParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Input3DParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Input3DParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Input3DParameter::MergeFrom(const Input3DParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_data_list_file()) {
      set_data_list_file(from.data_list_file());
    }
    if (from.has_groundtruth_list_file()) {
      set_groundtruth_list_file(from.groundtruth_list_file());
    }
    if (from.has_preload_data()) {
      set_preload_data(from.preload_data());
    }
    if (from.has_row_major()) {
      set_row_major(from.row_major());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_classes()) {
      set_num_classes(from.num_classes());
    }
    if (from.has_customized_crop()) {
      set_customized_crop(from.customized_crop());
    }
    if (from.has_freespace_label()) {
      set_freespace_label(from.freespace_label());
    }
    if (from.has_ceiling_label()) {
      set_ceiling_label(from.ceiling_label());
    }
    if (from.has_wall_label()) {
      set_wall_label(from.wall_label());
    }
    if (from.has_floor_label()) {
      set_floor_label(from.floor_label());
    }
    if (from.has_ignore_label()) {
      set_ignore_label(from.ignore_label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Input3DParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input3DParameter::CopyFrom(const Input3DParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input3DParameter::IsInitialized() const {

  return true;
}

void Input3DParameter::Swap(Input3DParameter* other) {
  if (other != this) {
    std::swap(batch_size_, other->batch_size_);
    std::swap(data_list_file_, other->data_list_file_);
    std::swap(groundtruth_list_file_, other->groundtruth_list_file_);
    std::swap(preload_data_, other->preload_data_);
    std::swap(row_major_, other->row_major_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(depth_, other->depth_);
    std::swap(num_classes_, other->num_classes_);
    std::swap(customized_crop_, other->customized_crop_);
    std::swap(freespace_label_, other->freespace_label_);
    std::swap(ceiling_label_, other->ceiling_label_);
    std::swap(wall_label_, other->wall_label_);
    std::swap(floor_label_, other->floor_label_);
    std::swap(ignore_label_, other->ignore_label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Input3DParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Input3DParameter_descriptor_;
  metadata.reflection = Input3DParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestInput3DParameter::kDataFileFieldNumber;
const int TestInput3DParameter::kRowMajorFieldNumber;
const int TestInput3DParameter::kNumClassesFieldNumber;
const int TestInput3DParameter::kNumLevelsFieldNumber;
#endif  // !_MSC_VER

TestInput3DParameter::TestInput3DParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TestInput3DParameter)
}

void TestInput3DParameter::InitAsDefaultInstance() {
}

TestInput3DParameter::TestInput3DParameter(const TestInput3DParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.TestInput3DParameter)
}

void TestInput3DParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_major_ = true;
  num_classes_ = 0u;
  num_levels_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestInput3DParameter::~TestInput3DParameter() {
  // @@protoc_insertion_point(destructor:caffe.TestInput3DParameter)
  SharedDtor();
}

void TestInput3DParameter::SharedDtor() {
  if (data_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_file_;
  }
  if (this != default_instance_) {
  }
}

void TestInput3DParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestInput3DParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestInput3DParameter_descriptor_;
}

const TestInput3DParameter& TestInput3DParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

TestInput3DParameter* TestInput3DParameter::default_instance_ = NULL;

TestInput3DParameter* TestInput3DParameter::New() const {
  return new TestInput3DParameter;
}

void TestInput3DParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TestInput3DParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(num_classes_, num_levels_);
    if (has_data_file()) {
      if (data_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_file_->clear();
      }
    }
    row_major_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestInput3DParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TestInput3DParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string data_file = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_file().data(), this->data_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_row_major;
        break;
      }

      // optional bool row_major = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_row_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &row_major_)));
          set_has_row_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_classes;
        break;
      }

      // optional uint32 num_classes = 3;
      case 3: {
        if (tag == 24) {
         parse_num_classes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_classes_)));
          set_has_num_classes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_levels;
        break;
      }

      // optional uint32 num_levels = 4;
      case 4: {
        if (tag == 32) {
         parse_num_levels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_levels_)));
          set_has_num_levels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TestInput3DParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TestInput3DParameter)
  return false;
#undef DO_
}

void TestInput3DParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TestInput3DParameter)
  // optional string data_file = 1;
  if (has_data_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_file().data(), this->data_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data_file(), output);
  }

  // optional bool row_major = 2 [default = true];
  if (has_row_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->row_major(), output);
  }

  // optional uint32 num_classes = 3;
  if (has_num_classes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_classes(), output);
  }

  // optional uint32 num_levels = 4;
  if (has_num_levels()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_levels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TestInput3DParameter)
}

::google::protobuf::uint8* TestInput3DParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TestInput3DParameter)
  // optional string data_file = 1;
  if (has_data_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_file().data(), this->data_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data_file(), target);
  }

  // optional bool row_major = 2 [default = true];
  if (has_row_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->row_major(), target);
  }

  // optional uint32 num_classes = 3;
  if (has_num_classes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_classes(), target);
  }

  // optional uint32 num_levels = 4;
  if (has_num_levels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_levels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TestInput3DParameter)
  return target;
}

int TestInput3DParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string data_file = 1;
    if (has_data_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_file());
    }

    // optional bool row_major = 2 [default = true];
    if (has_row_major()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_classes = 3;
    if (has_num_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_classes());
    }

    // optional uint32 num_levels = 4;
    if (has_num_levels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_levels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestInput3DParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestInput3DParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestInput3DParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestInput3DParameter::MergeFrom(const TestInput3DParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_file()) {
      set_data_file(from.data_file());
    }
    if (from.has_row_major()) {
      set_row_major(from.row_major());
    }
    if (from.has_num_classes()) {
      set_num_classes(from.num_classes());
    }
    if (from.has_num_levels()) {
      set_num_levels(from.num_levels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestInput3DParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestInput3DParameter::CopyFrom(const TestInput3DParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestInput3DParameter::IsInitialized() const {

  return true;
}

void TestInput3DParameter::Swap(TestInput3DParameter* other) {
  if (other != this) {
    std::swap(data_file_, other->data_file_);
    std::swap(row_major_, other->row_major_);
    std::swap(num_classes_, other->num_classes_);
    std::swap(num_levels_, other->num_levels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestInput3DParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestInput3DParameter_descriptor_;
  metadata.reflection = TestInput3DParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InputPrimalDualParameter::kBatchSizeFieldNumber;
const int InputPrimalDualParameter::kNumClassesFieldNumber;
const int InputPrimalDualParameter::kHeightFieldNumber;
const int InputPrimalDualParameter::kWidthFieldNumber;
const int InputPrimalDualParameter::kDepthFieldNumber;
#endif  // !_MSC_VER

InputPrimalDualParameter::InputPrimalDualParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InputPrimalDualParameter)
}

void InputPrimalDualParameter::InitAsDefaultInstance() {
}

InputPrimalDualParameter::InputPrimalDualParameter(const InputPrimalDualParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.InputPrimalDualParameter)
}

void InputPrimalDualParameter::SharedCtor() {
  _cached_size_ = 0;
  batch_size_ = 0u;
  num_classes_ = 0u;
  height_ = 0u;
  width_ = 0u;
  depth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputPrimalDualParameter::~InputPrimalDualParameter() {
  // @@protoc_insertion_point(destructor:caffe.InputPrimalDualParameter)
  SharedDtor();
}

void InputPrimalDualParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InputPrimalDualParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputPrimalDualParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputPrimalDualParameter_descriptor_;
}

const InputPrimalDualParameter& InputPrimalDualParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

InputPrimalDualParameter* InputPrimalDualParameter::default_instance_ = NULL;

InputPrimalDualParameter* InputPrimalDualParameter::New() const {
  return new InputPrimalDualParameter;
}

void InputPrimalDualParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InputPrimalDualParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(batch_size_, depth_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InputPrimalDualParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InputPrimalDualParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 batch_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_classes;
        break;
      }

      // optional uint32 num_classes = 2;
      case 2: {
        if (tag == 16) {
         parse_num_classes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_classes_)));
          set_has_num_classes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_depth;
        break;
      }

      // optional uint32 depth = 5;
      case 5: {
        if (tag == 40) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InputPrimalDualParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InputPrimalDualParameter)
  return false;
#undef DO_
}

void InputPrimalDualParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InputPrimalDualParameter)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->batch_size(), output);
  }

  // optional uint32 num_classes = 2;
  if (has_num_classes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_classes(), output);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // optional uint32 depth = 5;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->depth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InputPrimalDualParameter)
}

::google::protobuf::uint8* InputPrimalDualParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InputPrimalDualParameter)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->batch_size(), target);
  }

  // optional uint32 num_classes = 2;
  if (has_num_classes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_classes(), target);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // optional uint32 depth = 5;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->depth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InputPrimalDualParameter)
  return target;
}

int InputPrimalDualParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 batch_size = 1;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 num_classes = 2;
    if (has_num_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_classes());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 depth = 5;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputPrimalDualParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InputPrimalDualParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InputPrimalDualParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InputPrimalDualParameter::MergeFrom(const InputPrimalDualParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_num_classes()) {
      set_num_classes(from.num_classes());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InputPrimalDualParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputPrimalDualParameter::CopyFrom(const InputPrimalDualParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputPrimalDualParameter::IsInitialized() const {

  return true;
}

void InputPrimalDualParameter::Swap(InputPrimalDualParameter* other) {
  if (other != this) {
    std::swap(batch_size_, other->batch_size_);
    std::swap(num_classes_, other->num_classes_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(depth_, other->depth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InputPrimalDualParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputPrimalDualParameter_descriptor_;
  metadata.reflection = InputPrimalDualParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClipByValueParameter::kMinValFieldNumber;
const int ClipByValueParameter::kMaxValFieldNumber;
#endif  // !_MSC_VER

ClipByValueParameter::ClipByValueParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ClipByValueParameter)
}

void ClipByValueParameter::InitAsDefaultInstance() {
}

ClipByValueParameter::ClipByValueParameter(const ClipByValueParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ClipByValueParameter)
}

void ClipByValueParameter::SharedCtor() {
  _cached_size_ = 0;
  min_val_ = 0;
  max_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClipByValueParameter::~ClipByValueParameter() {
  // @@protoc_insertion_point(destructor:caffe.ClipByValueParameter)
  SharedDtor();
}

void ClipByValueParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClipByValueParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClipByValueParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClipByValueParameter_descriptor_;
}

const ClipByValueParameter& ClipByValueParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ClipByValueParameter* ClipByValueParameter::default_instance_ = NULL;

ClipByValueParameter* ClipByValueParameter::New() const {
  return new ClipByValueParameter;
}

void ClipByValueParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClipByValueParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(min_val_, max_val_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClipByValueParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ClipByValueParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_val = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_val_)));
          set_has_min_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_max_val;
        break;
      }

      // optional float max_val = 2;
      case 2: {
        if (tag == 21) {
         parse_max_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_val_)));
          set_has_max_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ClipByValueParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ClipByValueParameter)
  return false;
#undef DO_
}

void ClipByValueParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ClipByValueParameter)
  // optional float min_val = 1;
  if (has_min_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_val(), output);
  }

  // optional float max_val = 2;
  if (has_max_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ClipByValueParameter)
}

::google::protobuf::uint8* ClipByValueParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ClipByValueParameter)
  // optional float min_val = 1;
  if (has_min_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_val(), target);
  }

  // optional float max_val = 2;
  if (has_max_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ClipByValueParameter)
  return target;
}

int ClipByValueParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float min_val = 1;
    if (has_min_val()) {
      total_size += 1 + 4;
    }

    // optional float max_val = 2;
    if (has_max_val()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClipByValueParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClipByValueParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClipByValueParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClipByValueParameter::MergeFrom(const ClipByValueParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_val()) {
      set_min_val(from.min_val());
    }
    if (from.has_max_val()) {
      set_max_val(from.max_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClipByValueParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClipByValueParameter::CopyFrom(const ClipByValueParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipByValueParameter::IsInitialized() const {

  return true;
}

void ClipByValueParameter::Swap(ClipByValueParameter* other) {
  if (other != this) {
    std::swap(min_val_, other->min_val_);
    std::swap(max_val_, other->max_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClipByValueParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClipByValueParameter_descriptor_;
  metadata.reflection = ClipByValueParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Pooling3DParameter_PoolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pooling3DParameter_PoolMethod_descriptor_;
}
bool Pooling3DParameter_PoolMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Pooling3DParameter_PoolMethod Pooling3DParameter::MAX;
const Pooling3DParameter_PoolMethod Pooling3DParameter::AVE;
const Pooling3DParameter_PoolMethod Pooling3DParameter::STOCHASTIC;
const Pooling3DParameter_PoolMethod Pooling3DParameter::PoolMethod_MIN;
const Pooling3DParameter_PoolMethod Pooling3DParameter::PoolMethod_MAX;
const int Pooling3DParameter::PoolMethod_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Pooling3DParameter::kPoolFieldNumber;
const int Pooling3DParameter::kPadFieldNumber;
const int Pooling3DParameter::kPadHFieldNumber;
const int Pooling3DParameter::kPadWFieldNumber;
const int Pooling3DParameter::kPadSFieldNumber;
const int Pooling3DParameter::kKernelSizeFieldNumber;
const int Pooling3DParameter::kKernelHFieldNumber;
const int Pooling3DParameter::kKernelWFieldNumber;
const int Pooling3DParameter::kKernelSFieldNumber;
const int Pooling3DParameter::kStrideFieldNumber;
const int Pooling3DParameter::kStrideHFieldNumber;
const int Pooling3DParameter::kStrideWFieldNumber;
const int Pooling3DParameter::kStrideSFieldNumber;
#endif  // !_MSC_VER

Pooling3DParameter::Pooling3DParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Pooling3DParameter)
}

void Pooling3DParameter::InitAsDefaultInstance() {
}

Pooling3DParameter::Pooling3DParameter(const Pooling3DParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.Pooling3DParameter)
}

void Pooling3DParameter::SharedCtor() {
  _cached_size_ = 0;
  pool_ = 0;
  pad_ = 0u;
  pad_h_ = 0u;
  pad_w_ = 0u;
  pad_s_ = 0u;
  kernel_size_ = 0u;
  kernel_h_ = 0u;
  kernel_w_ = 0u;
  kernel_s_ = 0u;
  stride_ = 1u;
  stride_h_ = 0u;
  stride_w_ = 0u;
  stride_s_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pooling3DParameter::~Pooling3DParameter() {
  // @@protoc_insertion_point(destructor:caffe.Pooling3DParameter)
  SharedDtor();
}

void Pooling3DParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pooling3DParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pooling3DParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pooling3DParameter_descriptor_;
}

const Pooling3DParameter& Pooling3DParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

Pooling3DParameter* Pooling3DParameter::default_instance_ = NULL;

Pooling3DParameter* Pooling3DParameter::New() const {
  return new Pooling3DParameter;
}

void Pooling3DParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Pooling3DParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(pool_, kernel_w_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(stride_h_, stride_s_);
    kernel_s_ = 0u;
    stride_ = 1u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pooling3DParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Pooling3DParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.Pooling3DParameter.PoolMethod pool = 1 [default = MAX];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Pooling3DParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::Pooling3DParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pad;
        break;
      }

      // optional uint32 pad = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pad_h;
        break;
      }

      // optional uint32 pad_h = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_pad_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
          set_has_pad_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pad_w;
        break;
      }

      // optional uint32 pad_w = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_pad_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
          set_has_pad_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pad_s;
        break;
      }

      // optional uint32 pad_s = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_pad_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_s_)));
          set_has_pad_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_kernel_size;
        break;
      }

      // optional uint32 kernel_size = 6;
      case 6: {
        if (tag == 48) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
          set_has_kernel_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_kernel_h;
        break;
      }

      // optional uint32 kernel_h = 7;
      case 7: {
        if (tag == 56) {
         parse_kernel_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_h_)));
          set_has_kernel_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_kernel_w;
        break;
      }

      // optional uint32 kernel_w = 8;
      case 8: {
        if (tag == 64) {
         parse_kernel_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_w_)));
          set_has_kernel_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_kernel_s;
        break;
      }

      // optional uint32 kernel_s = 9;
      case 9: {
        if (tag == 72) {
         parse_kernel_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_s_)));
          set_has_kernel_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_stride;
        break;
      }

      // optional uint32 stride = 10 [default = 1];
      case 10: {
        if (tag == 80) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_stride_h;
        break;
      }

      // optional uint32 stride_h = 11;
      case 11: {
        if (tag == 88) {
         parse_stride_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
          set_has_stride_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_stride_w;
        break;
      }

      // optional uint32 stride_w = 12;
      case 12: {
        if (tag == 96) {
         parse_stride_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
          set_has_stride_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_stride_s;
        break;
      }

      // optional uint32 stride_s = 13;
      case 13: {
        if (tag == 104) {
         parse_stride_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_s_)));
          set_has_stride_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Pooling3DParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Pooling3DParameter)
  return false;
#undef DO_
}

void Pooling3DParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Pooling3DParameter)
  // optional .caffe.Pooling3DParameter.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pool(), output);
  }

  // optional uint32 pad = 2 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pad(), output);
  }

  // optional uint32 pad_h = 3 [default = 0];
  if (has_pad_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pad_h(), output);
  }

  // optional uint32 pad_w = 4 [default = 0];
  if (has_pad_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pad_w(), output);
  }

  // optional uint32 pad_s = 5 [default = 0];
  if (has_pad_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pad_s(), output);
  }

  // optional uint32 kernel_size = 6;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kernel_size(), output);
  }

  // optional uint32 kernel_h = 7;
  if (has_kernel_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->kernel_h(), output);
  }

  // optional uint32 kernel_w = 8;
  if (has_kernel_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kernel_w(), output);
  }

  // optional uint32 kernel_s = 9;
  if (has_kernel_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->kernel_s(), output);
  }

  // optional uint32 stride = 10 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->stride(), output);
  }

  // optional uint32 stride_h = 11;
  if (has_stride_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->stride_h(), output);
  }

  // optional uint32 stride_w = 12;
  if (has_stride_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->stride_w(), output);
  }

  // optional uint32 stride_s = 13;
  if (has_stride_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->stride_s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Pooling3DParameter)
}

::google::protobuf::uint8* Pooling3DParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Pooling3DParameter)
  // optional .caffe.Pooling3DParameter.PoolMethod pool = 1 [default = MAX];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pool(), target);
  }

  // optional uint32 pad = 2 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pad(), target);
  }

  // optional uint32 pad_h = 3 [default = 0];
  if (has_pad_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pad_h(), target);
  }

  // optional uint32 pad_w = 4 [default = 0];
  if (has_pad_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pad_w(), target);
  }

  // optional uint32 pad_s = 5 [default = 0];
  if (has_pad_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pad_s(), target);
  }

  // optional uint32 kernel_size = 6;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kernel_size(), target);
  }

  // optional uint32 kernel_h = 7;
  if (has_kernel_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->kernel_h(), target);
  }

  // optional uint32 kernel_w = 8;
  if (has_kernel_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->kernel_w(), target);
  }

  // optional uint32 kernel_s = 9;
  if (has_kernel_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->kernel_s(), target);
  }

  // optional uint32 stride = 10 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->stride(), target);
  }

  // optional uint32 stride_h = 11;
  if (has_stride_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->stride_h(), target);
  }

  // optional uint32 stride_w = 12;
  if (has_stride_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->stride_w(), target);
  }

  // optional uint32 stride_s = 13;
  if (has_stride_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->stride_s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Pooling3DParameter)
  return target;
}

int Pooling3DParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe.Pooling3DParameter.PoolMethod pool = 1 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional uint32 pad = 2 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 pad_h = 3 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 4 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

    // optional uint32 pad_s = 5 [default = 0];
    if (has_pad_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_s());
    }

    // optional uint32 kernel_size = 6;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }

    // optional uint32 kernel_h = 7;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_h());
    }

    // optional uint32 kernel_w = 8;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_w());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 kernel_s = 9;
    if (has_kernel_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_s());
    }

    // optional uint32 stride = 10 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

    // optional uint32 stride_h = 11;
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

    // optional uint32 stride_w = 12;
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional uint32 stride_s = 13;
    if (has_stride_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pooling3DParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pooling3DParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pooling3DParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pooling3DParameter::MergeFrom(const Pooling3DParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_pad_h()) {
      set_pad_h(from.pad_h());
    }
    if (from.has_pad_w()) {
      set_pad_w(from.pad_w());
    }
    if (from.has_pad_s()) {
      set_pad_s(from.pad_s());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_kernel_h()) {
      set_kernel_h(from.kernel_h());
    }
    if (from.has_kernel_w()) {
      set_kernel_w(from.kernel_w());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kernel_s()) {
      set_kernel_s(from.kernel_s());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_stride_h()) {
      set_stride_h(from.stride_h());
    }
    if (from.has_stride_w()) {
      set_stride_w(from.stride_w());
    }
    if (from.has_stride_s()) {
      set_stride_s(from.stride_s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pooling3DParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pooling3DParameter::CopyFrom(const Pooling3DParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pooling3DParameter::IsInitialized() const {

  return true;
}

void Pooling3DParameter::Swap(Pooling3DParameter* other) {
  if (other != this) {
    std::swap(pool_, other->pool_);
    std::swap(pad_, other->pad_);
    std::swap(pad_h_, other->pad_h_);
    std::swap(pad_w_, other->pad_w_);
    std::swap(pad_s_, other->pad_s_);
    std::swap(kernel_size_, other->kernel_size_);
    std::swap(kernel_h_, other->kernel_h_);
    std::swap(kernel_w_, other->kernel_w_);
    std::swap(kernel_s_, other->kernel_s_);
    std::swap(stride_, other->stride_);
    std::swap(stride_h_, other->stride_h_);
    std::swap(stride_w_, other->stride_w_);
    std::swap(stride_s_, other->stride_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pooling3DParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pooling3DParameter_descriptor_;
  metadata.reflection = Pooling3DParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpSampling3DParameter::kHRepFieldNumber;
const int UpSampling3DParameter::kWRepFieldNumber;
const int UpSampling3DParameter::kSRepFieldNumber;
#endif  // !_MSC_VER

UpSampling3DParameter::UpSampling3DParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.UpSampling3DParameter)
}

void UpSampling3DParameter::InitAsDefaultInstance() {
}

UpSampling3DParameter::UpSampling3DParameter(const UpSampling3DParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.UpSampling3DParameter)
}

void UpSampling3DParameter::SharedCtor() {
  _cached_size_ = 0;
  h_rep_ = 0u;
  w_rep_ = 0u;
  s_rep_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpSampling3DParameter::~UpSampling3DParameter() {
  // @@protoc_insertion_point(destructor:caffe.UpSampling3DParameter)
  SharedDtor();
}

void UpSampling3DParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpSampling3DParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpSampling3DParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpSampling3DParameter_descriptor_;
}

const UpSampling3DParameter& UpSampling3DParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

UpSampling3DParameter* UpSampling3DParameter::default_instance_ = NULL;

UpSampling3DParameter* UpSampling3DParameter::New() const {
  return new UpSampling3DParameter;
}

void UpSampling3DParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpSampling3DParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(h_rep_, s_rep_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpSampling3DParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.UpSampling3DParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 h_rep = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_rep_)));
          set_has_h_rep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_w_rep;
        break;
      }

      // optional uint32 w_rep = 2;
      case 2: {
        if (tag == 16) {
         parse_w_rep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_rep_)));
          set_has_w_rep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_s_rep;
        break;
      }

      // optional uint32 s_rep = 3;
      case 3: {
        if (tag == 24) {
         parse_s_rep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &s_rep_)));
          set_has_s_rep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.UpSampling3DParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.UpSampling3DParameter)
  return false;
#undef DO_
}

void UpSampling3DParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.UpSampling3DParameter)
  // optional uint32 h_rep = 1;
  if (has_h_rep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->h_rep(), output);
  }

  // optional uint32 w_rep = 2;
  if (has_w_rep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->w_rep(), output);
  }

  // optional uint32 s_rep = 3;
  if (has_s_rep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->s_rep(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.UpSampling3DParameter)
}

::google::protobuf::uint8* UpSampling3DParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.UpSampling3DParameter)
  // optional uint32 h_rep = 1;
  if (has_h_rep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->h_rep(), target);
  }

  // optional uint32 w_rep = 2;
  if (has_w_rep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->w_rep(), target);
  }

  // optional uint32 s_rep = 3;
  if (has_s_rep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->s_rep(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.UpSampling3DParameter)
  return target;
}

int UpSampling3DParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 h_rep = 1;
    if (has_h_rep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->h_rep());
    }

    // optional uint32 w_rep = 2;
    if (has_w_rep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->w_rep());
    }

    // optional uint32 s_rep = 3;
    if (has_s_rep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->s_rep());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpSampling3DParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpSampling3DParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpSampling3DParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpSampling3DParameter::MergeFrom(const UpSampling3DParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_h_rep()) {
      set_h_rep(from.h_rep());
    }
    if (from.has_w_rep()) {
      set_w_rep(from.w_rep());
    }
    if (from.has_s_rep()) {
      set_s_rep(from.s_rep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpSampling3DParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpSampling3DParameter::CopyFrom(const UpSampling3DParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpSampling3DParameter::IsInitialized() const {

  return true;
}

void UpSampling3DParameter::Swap(UpSampling3DParameter* other) {
  if (other != this) {
    std::swap(h_rep_, other->h_rep_);
    std::swap(w_rep_, other->w_rep_);
    std::swap(s_rep_, other->s_rep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpSampling3DParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpSampling3DParameter_descriptor_;
  metadata.reflection = UpSampling3DParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DualUpdateParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DualUpdateParameter_Engine_descriptor_;
}
bool DualUpdateParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DualUpdateParameter_Engine DualUpdateParameter::DEFAULT;
const DualUpdateParameter_Engine DualUpdateParameter::CAFFE;
const DualUpdateParameter_Engine DualUpdateParameter::CUDNN;
const DualUpdateParameter_Engine DualUpdateParameter::Engine_MIN;
const DualUpdateParameter_Engine DualUpdateParameter::Engine_MAX;
const int DualUpdateParameter::Engine_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DualUpdateParameter::kNumOutputFieldNumber;
const int DualUpdateParameter::kStartPadFieldNumber;
const int DualUpdateParameter::kEndPadFieldNumber;
const int DualUpdateParameter::kKernelSizeFieldNumber;
const int DualUpdateParameter::kStrideFieldNumber;
const int DualUpdateParameter::kWeightFillerFieldNumber;
const int DualUpdateParameter::kAxisFieldNumber;
const int DualUpdateParameter::kSigmaFieldNumber;
const int DualUpdateParameter::kEngineFieldNumber;
#endif  // !_MSC_VER

DualUpdateParameter::DualUpdateParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DualUpdateParameter)
}

void DualUpdateParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

DualUpdateParameter::DualUpdateParameter(const DualUpdateParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.DualUpdateParameter)
}

void DualUpdateParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  weight_filler_ = NULL;
  axis_ = 1;
  sigma_ = 0;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DualUpdateParameter::~DualUpdateParameter() {
  // @@protoc_insertion_point(destructor:caffe.DualUpdateParameter)
  SharedDtor();
}

void DualUpdateParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
  }
}

void DualUpdateParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DualUpdateParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DualUpdateParameter_descriptor_;
}

const DualUpdateParameter& DualUpdateParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

DualUpdateParameter* DualUpdateParameter::default_instance_ = NULL;

DualUpdateParameter* DualUpdateParameter::New() const {
  return new DualUpdateParameter;
}

void DualUpdateParameter::Clear() {
  if (_has_bits_[0 / 32] & 225) {
    num_output_ = 0u;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    axis_ = 1;
    sigma_ = 0;
  }
  engine_ = 0;
  start_pad_.Clear();
  end_pad_.Clear();
  kernel_size_.Clear();
  stride_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DualUpdateParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DualUpdateParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_pad;
        break;
      }

      // repeated uint32 start_pad = 2;
      case 2: {
        if (tag == 16) {
         parse_start_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_start_pad())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_start_pad())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_pad;
        if (input->ExpectTag(24)) goto parse_end_pad;
        break;
      }

      // repeated uint32 end_pad = 3;
      case 3: {
        if (tag == 24) {
         parse_end_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_end_pad())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_end_pad())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_pad;
        if (input->ExpectTag(32)) goto parse_kernel_size;
        break;
      }

      // repeated uint32 kernel_size = 4;
      case 4: {
        if (tag == 32) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_kernel_size())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_kernel_size())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kernel_size;
        if (input->ExpectTag(40)) goto parse_stride;
        break;
      }

      // repeated uint32 stride = 5;
      case 5: {
        if (tag == 40) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_stride())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stride())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_stride;
        if (input->ExpectTag(50)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 6;
      case 6: {
        if (tag == 50) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_axis;
        break;
      }

      // optional int32 axis = 7 [default = 1];
      case 7: {
        if (tag == 56) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_sigma;
        break;
      }

      // optional float sigma = 8;
      case 8: {
        if (tag == 69) {
         parse_sigma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_)));
          set_has_sigma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_engine;
        break;
      }

      // optional .caffe.DualUpdateParameter.Engine engine = 9 [default = DEFAULT];
      case 9: {
        if (tag == 72) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::DualUpdateParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::DualUpdateParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DualUpdateParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DualUpdateParameter)
  return false;
#undef DO_
}

void DualUpdateParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DualUpdateParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // repeated uint32 start_pad = 2;
  for (int i = 0; i < this->start_pad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->start_pad(i), output);
  }

  // repeated uint32 end_pad = 3;
  for (int i = 0; i < this->end_pad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->end_pad(i), output);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0; i < this->kernel_size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->kernel_size(i), output);
  }

  // repeated uint32 stride = 5;
  for (int i = 0; i < this->stride_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->stride(i), output);
  }

  // optional .caffe.FillerParameter weight_filler = 6;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->weight_filler(), output);
  }

  // optional int32 axis = 7 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->axis(), output);
  }

  // optional float sigma = 8;
  if (has_sigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->sigma(), output);
  }

  // optional .caffe.DualUpdateParameter.Engine engine = 9 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->engine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DualUpdateParameter)
}

::google::protobuf::uint8* DualUpdateParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DualUpdateParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // repeated uint32 start_pad = 2;
  for (int i = 0; i < this->start_pad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->start_pad(i), target);
  }

  // repeated uint32 end_pad = 3;
  for (int i = 0; i < this->end_pad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->end_pad(i), target);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0; i < this->kernel_size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->kernel_size(i), target);
  }

  // repeated uint32 stride = 5;
  for (int i = 0; i < this->stride_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->stride(i), target);
  }

  // optional .caffe.FillerParameter weight_filler = 6;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->weight_filler(), target);
  }

  // optional int32 axis = 7 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->axis(), target);
  }

  // optional float sigma = 8;
  if (has_sigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->sigma(), target);
  }

  // optional .caffe.DualUpdateParameter.Engine engine = 9 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->engine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DualUpdateParameter)
  return target;
}

int DualUpdateParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional .caffe.FillerParameter weight_filler = 6;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }

    // optional int32 axis = 7 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional float sigma = 8;
    if (has_sigma()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .caffe.DualUpdateParameter.Engine engine = 9 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  // repeated uint32 start_pad = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->start_pad_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->start_pad(i));
    }
    total_size += 1 * this->start_pad_size() + data_size;
  }

  // repeated uint32 end_pad = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->end_pad_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->end_pad(i));
    }
    total_size += 1 * this->end_pad_size() + data_size;
  }

  // repeated uint32 kernel_size = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->kernel_size_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->kernel_size(i));
    }
    total_size += 1 * this->kernel_size_size() + data_size;
  }

  // repeated uint32 stride = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->stride_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stride(i));
    }
    total_size += 1 * this->stride_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DualUpdateParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DualUpdateParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DualUpdateParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DualUpdateParameter::MergeFrom(const DualUpdateParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  start_pad_.MergeFrom(from.start_pad_);
  end_pad_.MergeFrom(from.end_pad_);
  kernel_size_.MergeFrom(from.kernel_size_);
  stride_.MergeFrom(from.stride_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_sigma()) {
      set_sigma(from.sigma());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DualUpdateParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DualUpdateParameter::CopyFrom(const DualUpdateParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DualUpdateParameter::IsInitialized() const {

  return true;
}

void DualUpdateParameter::Swap(DualUpdateParameter* other) {
  if (other != this) {
    std::swap(num_output_, other->num_output_);
    start_pad_.Swap(&other->start_pad_);
    end_pad_.Swap(&other->end_pad_);
    kernel_size_.Swap(&other->kernel_size_);
    stride_.Swap(&other->stride_);
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(axis_, other->axis_);
    std::swap(sigma_, other->sigma_);
    std::swap(engine_, other->engine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DualUpdateParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DualUpdateParameter_descriptor_;
  metadata.reflection = DualUpdateParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PrimalUpdateParameter_Engine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrimalUpdateParameter_Engine_descriptor_;
}
bool PrimalUpdateParameter_Engine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PrimalUpdateParameter_Engine PrimalUpdateParameter::DEFAULT;
const PrimalUpdateParameter_Engine PrimalUpdateParameter::CAFFE;
const PrimalUpdateParameter_Engine PrimalUpdateParameter::CUDNN;
const PrimalUpdateParameter_Engine PrimalUpdateParameter::Engine_MIN;
const PrimalUpdateParameter_Engine PrimalUpdateParameter::Engine_MAX;
const int PrimalUpdateParameter::Engine_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PrimalUpdateParameter::kNumOutputFieldNumber;
const int PrimalUpdateParameter::kStartPadFieldNumber;
const int PrimalUpdateParameter::kEndPadFieldNumber;
const int PrimalUpdateParameter::kKernelSizeFieldNumber;
const int PrimalUpdateParameter::kStrideFieldNumber;
const int PrimalUpdateParameter::kWeightFillerFieldNumber;
const int PrimalUpdateParameter::kAxisFieldNumber;
const int PrimalUpdateParameter::kTauFieldNumber;
const int PrimalUpdateParameter::kEngineFieldNumber;
#endif  // !_MSC_VER

PrimalUpdateParameter::PrimalUpdateParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PrimalUpdateParameter)
}

void PrimalUpdateParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

PrimalUpdateParameter::PrimalUpdateParameter(const PrimalUpdateParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PrimalUpdateParameter)
}

void PrimalUpdateParameter::SharedCtor() {
  _cached_size_ = 0;
  num_output_ = 0u;
  weight_filler_ = NULL;
  axis_ = 1;
  tau_ = 0;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrimalUpdateParameter::~PrimalUpdateParameter() {
  // @@protoc_insertion_point(destructor:caffe.PrimalUpdateParameter)
  SharedDtor();
}

void PrimalUpdateParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
  }
}

void PrimalUpdateParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrimalUpdateParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrimalUpdateParameter_descriptor_;
}

const PrimalUpdateParameter& PrimalUpdateParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PrimalUpdateParameter* PrimalUpdateParameter::default_instance_ = NULL;

PrimalUpdateParameter* PrimalUpdateParameter::New() const {
  return new PrimalUpdateParameter;
}

void PrimalUpdateParameter::Clear() {
  if (_has_bits_[0 / 32] & 225) {
    num_output_ = 0u;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    axis_ = 1;
    tau_ = 0;
  }
  engine_ = 0;
  start_pad_.Clear();
  end_pad_.Clear();
  kernel_size_.Clear();
  stride_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrimalUpdateParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PrimalUpdateParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_pad;
        break;
      }

      // repeated uint32 start_pad = 2;
      case 2: {
        if (tag == 16) {
         parse_start_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_start_pad())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_start_pad())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_pad;
        if (input->ExpectTag(24)) goto parse_end_pad;
        break;
      }

      // repeated uint32 end_pad = 3;
      case 3: {
        if (tag == 24) {
         parse_end_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_end_pad())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_end_pad())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_pad;
        if (input->ExpectTag(32)) goto parse_kernel_size;
        break;
      }

      // repeated uint32 kernel_size = 4;
      case 4: {
        if (tag == 32) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_kernel_size())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_kernel_size())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kernel_size;
        if (input->ExpectTag(40)) goto parse_stride;
        break;
      }

      // repeated uint32 stride = 5;
      case 5: {
        if (tag == 40) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_stride())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stride())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_stride;
        if (input->ExpectTag(50)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 6;
      case 6: {
        if (tag == 50) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_axis;
        break;
      }

      // optional int32 axis = 7 [default = 1];
      case 7: {
        if (tag == 56) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_tau;
        break;
      }

      // optional float tau = 8;
      case 8: {
        if (tag == 69) {
         parse_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tau_)));
          set_has_tau();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_engine;
        break;
      }

      // optional .caffe.PrimalUpdateParameter.Engine engine = 9 [default = DEFAULT];
      case 9: {
        if (tag == 72) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PrimalUpdateParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::PrimalUpdateParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PrimalUpdateParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PrimalUpdateParameter)
  return false;
#undef DO_
}

void PrimalUpdateParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PrimalUpdateParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // repeated uint32 start_pad = 2;
  for (int i = 0; i < this->start_pad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->start_pad(i), output);
  }

  // repeated uint32 end_pad = 3;
  for (int i = 0; i < this->end_pad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->end_pad(i), output);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0; i < this->kernel_size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->kernel_size(i), output);
  }

  // repeated uint32 stride = 5;
  for (int i = 0; i < this->stride_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->stride(i), output);
  }

  // optional .caffe.FillerParameter weight_filler = 6;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->weight_filler(), output);
  }

  // optional int32 axis = 7 [default = 1];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->axis(), output);
  }

  // optional float tau = 8;
  if (has_tau()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->tau(), output);
  }

  // optional .caffe.PrimalUpdateParameter.Engine engine = 9 [default = DEFAULT];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->engine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PrimalUpdateParameter)
}

::google::protobuf::uint8* PrimalUpdateParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PrimalUpdateParameter)
  // optional uint32 num_output = 1;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // repeated uint32 start_pad = 2;
  for (int i = 0; i < this->start_pad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->start_pad(i), target);
  }

  // repeated uint32 end_pad = 3;
  for (int i = 0; i < this->end_pad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->end_pad(i), target);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0; i < this->kernel_size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->kernel_size(i), target);
  }

  // repeated uint32 stride = 5;
  for (int i = 0; i < this->stride_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->stride(i), target);
  }

  // optional .caffe.FillerParameter weight_filler = 6;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->weight_filler(), target);
  }

  // optional int32 axis = 7 [default = 1];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->axis(), target);
  }

  // optional float tau = 8;
  if (has_tau()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->tau(), target);
  }

  // optional .caffe.PrimalUpdateParameter.Engine engine = 9 [default = DEFAULT];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->engine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PrimalUpdateParameter)
  return target;
}

int PrimalUpdateParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional .caffe.FillerParameter weight_filler = 6;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }

    // optional int32 axis = 7 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional float tau = 8;
    if (has_tau()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .caffe.PrimalUpdateParameter.Engine engine = 9 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  // repeated uint32 start_pad = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->start_pad_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->start_pad(i));
    }
    total_size += 1 * this->start_pad_size() + data_size;
  }

  // repeated uint32 end_pad = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->end_pad_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->end_pad(i));
    }
    total_size += 1 * this->end_pad_size() + data_size;
  }

  // repeated uint32 kernel_size = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->kernel_size_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->kernel_size(i));
    }
    total_size += 1 * this->kernel_size_size() + data_size;
  }

  // repeated uint32 stride = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->stride_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stride(i));
    }
    total_size += 1 * this->stride_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrimalUpdateParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrimalUpdateParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrimalUpdateParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrimalUpdateParameter::MergeFrom(const PrimalUpdateParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  start_pad_.MergeFrom(from.start_pad_);
  end_pad_.MergeFrom(from.end_pad_);
  kernel_size_.MergeFrom(from.kernel_size_);
  stride_.MergeFrom(from.stride_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_tau()) {
      set_tau(from.tau());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrimalUpdateParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrimalUpdateParameter::CopyFrom(const PrimalUpdateParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimalUpdateParameter::IsInitialized() const {

  return true;
}

void PrimalUpdateParameter::Swap(PrimalUpdateParameter* other) {
  if (other != this) {
    std::swap(num_output_, other->num_output_);
    start_pad_.Swap(&other->start_pad_);
    end_pad_.Swap(&other->end_pad_);
    kernel_size_.Swap(&other->kernel_size_);
    stride_.Swap(&other->stride_);
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(axis_, other->axis_);
    std::swap(tau_, other->tau_);
    std::swap(engine_, other->engine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrimalUpdateParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrimalUpdateParameter_descriptor_;
  metadata.reflection = PrimalUpdateParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LagrangianUpdateParameter::kSigmaFieldNumber;
#endif  // !_MSC_VER

LagrangianUpdateParameter::LagrangianUpdateParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LagrangianUpdateParameter)
}

void LagrangianUpdateParameter::InitAsDefaultInstance() {
}

LagrangianUpdateParameter::LagrangianUpdateParameter(const LagrangianUpdateParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.LagrangianUpdateParameter)
}

void LagrangianUpdateParameter::SharedCtor() {
  _cached_size_ = 0;
  sigma_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LagrangianUpdateParameter::~LagrangianUpdateParameter() {
  // @@protoc_insertion_point(destructor:caffe.LagrangianUpdateParameter)
  SharedDtor();
}

void LagrangianUpdateParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LagrangianUpdateParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LagrangianUpdateParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LagrangianUpdateParameter_descriptor_;
}

const LagrangianUpdateParameter& LagrangianUpdateParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

LagrangianUpdateParameter* LagrangianUpdateParameter::default_instance_ = NULL;

LagrangianUpdateParameter* LagrangianUpdateParameter::New() const {
  return new LagrangianUpdateParameter;
}

void LagrangianUpdateParameter::Clear() {
  sigma_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LagrangianUpdateParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LagrangianUpdateParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float sigma = 8;
      case 8: {
        if (tag == 69) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_)));
          set_has_sigma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LagrangianUpdateParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LagrangianUpdateParameter)
  return false;
#undef DO_
}

void LagrangianUpdateParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LagrangianUpdateParameter)
  // optional float sigma = 8;
  if (has_sigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->sigma(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LagrangianUpdateParameter)
}

::google::protobuf::uint8* LagrangianUpdateParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LagrangianUpdateParameter)
  // optional float sigma = 8;
  if (has_sigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->sigma(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LagrangianUpdateParameter)
  return target;
}

int LagrangianUpdateParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float sigma = 8;
    if (has_sigma()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LagrangianUpdateParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LagrangianUpdateParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LagrangianUpdateParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LagrangianUpdateParameter::MergeFrom(const LagrangianUpdateParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sigma()) {
      set_sigma(from.sigma());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LagrangianUpdateParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LagrangianUpdateParameter::CopyFrom(const LagrangianUpdateParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LagrangianUpdateParameter::IsInitialized() const {

  return true;
}

void LagrangianUpdateParameter::Swap(LagrangianUpdateParameter* other) {
  if (other != this) {
    std::swap(sigma_, other->sigma_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LagrangianUpdateParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LagrangianUpdateParameter_descriptor_;
  metadata.reflection = LagrangianUpdateParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrimalDualCrossEntropyLossParameter::kSoftmaxScaleFieldNumber;
const int PrimalDualCrossEntropyLossParameter::kFreespaceWeightedFieldNumber;
const int PrimalDualCrossEntropyLossParameter::kUnknownWeightedFieldNumber;
const int PrimalDualCrossEntropyLossParameter::kClipEpsilonFieldNumber;
#endif  // !_MSC_VER

PrimalDualCrossEntropyLossParameter::PrimalDualCrossEntropyLossParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PrimalDualCrossEntropyLossParameter)
}

void PrimalDualCrossEntropyLossParameter::InitAsDefaultInstance() {
}

PrimalDualCrossEntropyLossParameter::PrimalDualCrossEntropyLossParameter(const PrimalDualCrossEntropyLossParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PrimalDualCrossEntropyLossParameter)
}

void PrimalDualCrossEntropyLossParameter::SharedCtor() {
  _cached_size_ = 0;
  softmax_scale_ = 0;
  freespace_weighted_ = false;
  unknown_weighted_ = false;
  clip_epsilon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrimalDualCrossEntropyLossParameter::~PrimalDualCrossEntropyLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.PrimalDualCrossEntropyLossParameter)
  SharedDtor();
}

void PrimalDualCrossEntropyLossParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrimalDualCrossEntropyLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrimalDualCrossEntropyLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrimalDualCrossEntropyLossParameter_descriptor_;
}

const PrimalDualCrossEntropyLossParameter& PrimalDualCrossEntropyLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PrimalDualCrossEntropyLossParameter* PrimalDualCrossEntropyLossParameter::default_instance_ = NULL;

PrimalDualCrossEntropyLossParameter* PrimalDualCrossEntropyLossParameter::New() const {
  return new PrimalDualCrossEntropyLossParameter;
}

void PrimalDualCrossEntropyLossParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrimalDualCrossEntropyLossParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(softmax_scale_, clip_epsilon_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrimalDualCrossEntropyLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PrimalDualCrossEntropyLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float softmax_scale = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &softmax_scale_)));
          set_has_softmax_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_freespace_weighted;
        break;
      }

      // optional bool freespace_weighted = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_freespace_weighted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &freespace_weighted_)));
          set_has_freespace_weighted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unknown_weighted;
        break;
      }

      // optional bool unknown_weighted = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_unknown_weighted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unknown_weighted_)));
          set_has_unknown_weighted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_clip_epsilon;
        break;
      }

      // optional float clip_epsilon = 4;
      case 4: {
        if (tag == 37) {
         parse_clip_epsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clip_epsilon_)));
          set_has_clip_epsilon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PrimalDualCrossEntropyLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PrimalDualCrossEntropyLossParameter)
  return false;
#undef DO_
}

void PrimalDualCrossEntropyLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PrimalDualCrossEntropyLossParameter)
  // optional float softmax_scale = 1;
  if (has_softmax_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->softmax_scale(), output);
  }

  // optional bool freespace_weighted = 2 [default = false];
  if (has_freespace_weighted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->freespace_weighted(), output);
  }

  // optional bool unknown_weighted = 3 [default = false];
  if (has_unknown_weighted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->unknown_weighted(), output);
  }

  // optional float clip_epsilon = 4;
  if (has_clip_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->clip_epsilon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PrimalDualCrossEntropyLossParameter)
}

::google::protobuf::uint8* PrimalDualCrossEntropyLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PrimalDualCrossEntropyLossParameter)
  // optional float softmax_scale = 1;
  if (has_softmax_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->softmax_scale(), target);
  }

  // optional bool freespace_weighted = 2 [default = false];
  if (has_freespace_weighted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->freespace_weighted(), target);
  }

  // optional bool unknown_weighted = 3 [default = false];
  if (has_unknown_weighted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->unknown_weighted(), target);
  }

  // optional float clip_epsilon = 4;
  if (has_clip_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->clip_epsilon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PrimalDualCrossEntropyLossParameter)
  return target;
}

int PrimalDualCrossEntropyLossParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float softmax_scale = 1;
    if (has_softmax_scale()) {
      total_size += 1 + 4;
    }

    // optional bool freespace_weighted = 2 [default = false];
    if (has_freespace_weighted()) {
      total_size += 1 + 1;
    }

    // optional bool unknown_weighted = 3 [default = false];
    if (has_unknown_weighted()) {
      total_size += 1 + 1;
    }

    // optional float clip_epsilon = 4;
    if (has_clip_epsilon()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrimalDualCrossEntropyLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrimalDualCrossEntropyLossParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrimalDualCrossEntropyLossParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrimalDualCrossEntropyLossParameter::MergeFrom(const PrimalDualCrossEntropyLossParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_softmax_scale()) {
      set_softmax_scale(from.softmax_scale());
    }
    if (from.has_freespace_weighted()) {
      set_freespace_weighted(from.freespace_weighted());
    }
    if (from.has_unknown_weighted()) {
      set_unknown_weighted(from.unknown_weighted());
    }
    if (from.has_clip_epsilon()) {
      set_clip_epsilon(from.clip_epsilon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrimalDualCrossEntropyLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrimalDualCrossEntropyLossParameter::CopyFrom(const PrimalDualCrossEntropyLossParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimalDualCrossEntropyLossParameter::IsInitialized() const {

  return true;
}

void PrimalDualCrossEntropyLossParameter::Swap(PrimalDualCrossEntropyLossParameter* other) {
  if (other != this) {
    std::swap(softmax_scale_, other->softmax_scale_);
    std::swap(freespace_weighted_, other->freespace_weighted_);
    std::swap(unknown_weighted_, other->unknown_weighted_);
    std::swap(clip_epsilon_, other->clip_epsilon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrimalDualCrossEntropyLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrimalDualCrossEntropyLossParameter_descriptor_;
  metadata.reflection = PrimalDualCrossEntropyLossParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrimalDualWeightedCrossEntropyLossParameter::kSoftmaxScaleFieldNumber;
const int PrimalDualWeightedCrossEntropyLossParameter::kClipEpsilonFieldNumber;
const int PrimalDualWeightedCrossEntropyLossParameter::kUnknownLabelFieldNumber;
#endif  // !_MSC_VER

PrimalDualWeightedCrossEntropyLossParameter::PrimalDualWeightedCrossEntropyLossParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PrimalDualWeightedCrossEntropyLossParameter)
}

void PrimalDualWeightedCrossEntropyLossParameter::InitAsDefaultInstance() {
}

PrimalDualWeightedCrossEntropyLossParameter::PrimalDualWeightedCrossEntropyLossParameter(const PrimalDualWeightedCrossEntropyLossParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PrimalDualWeightedCrossEntropyLossParameter)
}

void PrimalDualWeightedCrossEntropyLossParameter::SharedCtor() {
  _cached_size_ = 0;
  softmax_scale_ = 0;
  clip_epsilon_ = 0;
  unknown_label_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrimalDualWeightedCrossEntropyLossParameter::~PrimalDualWeightedCrossEntropyLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.PrimalDualWeightedCrossEntropyLossParameter)
  SharedDtor();
}

void PrimalDualWeightedCrossEntropyLossParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrimalDualWeightedCrossEntropyLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrimalDualWeightedCrossEntropyLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrimalDualWeightedCrossEntropyLossParameter_descriptor_;
}

const PrimalDualWeightedCrossEntropyLossParameter& PrimalDualWeightedCrossEntropyLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PrimalDualWeightedCrossEntropyLossParameter* PrimalDualWeightedCrossEntropyLossParameter::default_instance_ = NULL;

PrimalDualWeightedCrossEntropyLossParameter* PrimalDualWeightedCrossEntropyLossParameter::New() const {
  return new PrimalDualWeightedCrossEntropyLossParameter;
}

void PrimalDualWeightedCrossEntropyLossParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrimalDualWeightedCrossEntropyLossParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(softmax_scale_, unknown_label_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrimalDualWeightedCrossEntropyLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PrimalDualWeightedCrossEntropyLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float softmax_scale = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &softmax_scale_)));
          set_has_softmax_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_clip_epsilon;
        break;
      }

      // optional float clip_epsilon = 2;
      case 2: {
        if (tag == 21) {
         parse_clip_epsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clip_epsilon_)));
          set_has_clip_epsilon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unknown_label;
        break;
      }

      // optional uint32 unknown_label = 3;
      case 3: {
        if (tag == 24) {
         parse_unknown_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_label_)));
          set_has_unknown_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PrimalDualWeightedCrossEntropyLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PrimalDualWeightedCrossEntropyLossParameter)
  return false;
#undef DO_
}

void PrimalDualWeightedCrossEntropyLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PrimalDualWeightedCrossEntropyLossParameter)
  // optional float softmax_scale = 1;
  if (has_softmax_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->softmax_scale(), output);
  }

  // optional float clip_epsilon = 2;
  if (has_clip_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->clip_epsilon(), output);
  }

  // optional uint32 unknown_label = 3;
  if (has_unknown_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unknown_label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PrimalDualWeightedCrossEntropyLossParameter)
}

::google::protobuf::uint8* PrimalDualWeightedCrossEntropyLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PrimalDualWeightedCrossEntropyLossParameter)
  // optional float softmax_scale = 1;
  if (has_softmax_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->softmax_scale(), target);
  }

  // optional float clip_epsilon = 2;
  if (has_clip_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->clip_epsilon(), target);
  }

  // optional uint32 unknown_label = 3;
  if (has_unknown_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unknown_label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PrimalDualWeightedCrossEntropyLossParameter)
  return target;
}

int PrimalDualWeightedCrossEntropyLossParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float softmax_scale = 1;
    if (has_softmax_scale()) {
      total_size += 1 + 4;
    }

    // optional float clip_epsilon = 2;
    if (has_clip_epsilon()) {
      total_size += 1 + 4;
    }

    // optional uint32 unknown_label = 3;
    if (has_unknown_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrimalDualWeightedCrossEntropyLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrimalDualWeightedCrossEntropyLossParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrimalDualWeightedCrossEntropyLossParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrimalDualWeightedCrossEntropyLossParameter::MergeFrom(const PrimalDualWeightedCrossEntropyLossParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_softmax_scale()) {
      set_softmax_scale(from.softmax_scale());
    }
    if (from.has_clip_epsilon()) {
      set_clip_epsilon(from.clip_epsilon());
    }
    if (from.has_unknown_label()) {
      set_unknown_label(from.unknown_label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrimalDualWeightedCrossEntropyLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrimalDualWeightedCrossEntropyLossParameter::CopyFrom(const PrimalDualWeightedCrossEntropyLossParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimalDualWeightedCrossEntropyLossParameter::IsInitialized() const {

  return true;
}

void PrimalDualWeightedCrossEntropyLossParameter::Swap(PrimalDualWeightedCrossEntropyLossParameter* other) {
  if (other != this) {
    std::swap(softmax_scale_, other->softmax_scale_);
    std::swap(clip_epsilon_, other->clip_epsilon_);
    std::swap(unknown_label_, other->unknown_label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrimalDualWeightedCrossEntropyLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrimalDualWeightedCrossEntropyLossParameter_descriptor_;
  metadata.reflection = PrimalDualWeightedCrossEntropyLossParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DenseGridDataWriteParameter::kInputSourceFieldNumber;
#endif  // !_MSC_VER

DenseGridDataWriteParameter::DenseGridDataWriteParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DenseGridDataWriteParameter)
}

void DenseGridDataWriteParameter::InitAsDefaultInstance() {
}

DenseGridDataWriteParameter::DenseGridDataWriteParameter(const DenseGridDataWriteParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.DenseGridDataWriteParameter)
}

void DenseGridDataWriteParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  input_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DenseGridDataWriteParameter::~DenseGridDataWriteParameter() {
  // @@protoc_insertion_point(destructor:caffe.DenseGridDataWriteParameter)
  SharedDtor();
}

void DenseGridDataWriteParameter::SharedDtor() {
  if (input_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete input_source_;
  }
  if (this != default_instance_) {
  }
}

void DenseGridDataWriteParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DenseGridDataWriteParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DenseGridDataWriteParameter_descriptor_;
}

const DenseGridDataWriteParameter& DenseGridDataWriteParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

DenseGridDataWriteParameter* DenseGridDataWriteParameter::default_instance_ = NULL;

DenseGridDataWriteParameter* DenseGridDataWriteParameter::New() const {
  return new DenseGridDataWriteParameter;
}

void DenseGridDataWriteParameter::Clear() {
  if (has_input_source()) {
    if (input_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      input_source_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DenseGridDataWriteParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DenseGridDataWriteParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string input_source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_source().data(), this->input_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input_source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DenseGridDataWriteParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DenseGridDataWriteParameter)
  return false;
#undef DO_
}

void DenseGridDataWriteParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DenseGridDataWriteParameter)
  // optional string input_source = 1;
  if (has_input_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_source().data(), this->input_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DenseGridDataWriteParameter)
}

::google::protobuf::uint8* DenseGridDataWriteParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DenseGridDataWriteParameter)
  // optional string input_source = 1;
  if (has_input_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_source().data(), this->input_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DenseGridDataWriteParameter)
  return target;
}

int DenseGridDataWriteParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string input_source = 1;
    if (has_input_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DenseGridDataWriteParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DenseGridDataWriteParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DenseGridDataWriteParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DenseGridDataWriteParameter::MergeFrom(const DenseGridDataWriteParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input_source()) {
      set_input_source(from.input_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DenseGridDataWriteParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseGridDataWriteParameter::CopyFrom(const DenseGridDataWriteParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseGridDataWriteParameter::IsInitialized() const {

  return true;
}

void DenseGridDataWriteParameter::Swap(DenseGridDataWriteParameter* other) {
  if (other != this) {
    std::swap(input_source_, other->input_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DenseGridDataWriteParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DenseGridDataWriteParameter_descriptor_;
  metadata.reflection = DenseGridDataWriteParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Accuracy3DReconstructionParameter::kFreespaceLabelFieldNumber;
const int Accuracy3DReconstructionParameter::kUnknownLabelFieldNumber;
#endif  // !_MSC_VER

Accuracy3DReconstructionParameter::Accuracy3DReconstructionParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Accuracy3DReconstructionParameter)
}

void Accuracy3DReconstructionParameter::InitAsDefaultInstance() {
}

Accuracy3DReconstructionParameter::Accuracy3DReconstructionParameter(const Accuracy3DReconstructionParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.Accuracy3DReconstructionParameter)
}

void Accuracy3DReconstructionParameter::SharedCtor() {
  _cached_size_ = 0;
  freespace_label_ = 0u;
  unknown_label_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Accuracy3DReconstructionParameter::~Accuracy3DReconstructionParameter() {
  // @@protoc_insertion_point(destructor:caffe.Accuracy3DReconstructionParameter)
  SharedDtor();
}

void Accuracy3DReconstructionParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Accuracy3DReconstructionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Accuracy3DReconstructionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Accuracy3DReconstructionParameter_descriptor_;
}

const Accuracy3DReconstructionParameter& Accuracy3DReconstructionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

Accuracy3DReconstructionParameter* Accuracy3DReconstructionParameter::default_instance_ = NULL;

Accuracy3DReconstructionParameter* Accuracy3DReconstructionParameter::New() const {
  return new Accuracy3DReconstructionParameter;
}

void Accuracy3DReconstructionParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Accuracy3DReconstructionParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(freespace_label_, unknown_label_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Accuracy3DReconstructionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Accuracy3DReconstructionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 freespace_label = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freespace_label_)));
          set_has_freespace_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unknown_label;
        break;
      }

      // optional uint32 unknown_label = 2;
      case 2: {
        if (tag == 16) {
         parse_unknown_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_label_)));
          set_has_unknown_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Accuracy3DReconstructionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Accuracy3DReconstructionParameter)
  return false;
#undef DO_
}

void Accuracy3DReconstructionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Accuracy3DReconstructionParameter)
  // optional uint32 freespace_label = 1 [default = 0];
  if (has_freespace_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->freespace_label(), output);
  }

  // optional uint32 unknown_label = 2;
  if (has_unknown_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unknown_label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Accuracy3DReconstructionParameter)
}

::google::protobuf::uint8* Accuracy3DReconstructionParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Accuracy3DReconstructionParameter)
  // optional uint32 freespace_label = 1 [default = 0];
  if (has_freespace_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->freespace_label(), target);
  }

  // optional uint32 unknown_label = 2;
  if (has_unknown_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unknown_label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Accuracy3DReconstructionParameter)
  return target;
}

int Accuracy3DReconstructionParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 freespace_label = 1 [default = 0];
    if (has_freespace_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freespace_label());
    }

    // optional uint32 unknown_label = 2;
    if (has_unknown_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Accuracy3DReconstructionParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Accuracy3DReconstructionParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Accuracy3DReconstructionParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Accuracy3DReconstructionParameter::MergeFrom(const Accuracy3DReconstructionParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freespace_label()) {
      set_freespace_label(from.freespace_label());
    }
    if (from.has_unknown_label()) {
      set_unknown_label(from.unknown_label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Accuracy3DReconstructionParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accuracy3DReconstructionParameter::CopyFrom(const Accuracy3DReconstructionParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accuracy3DReconstructionParameter::IsInitialized() const {

  return true;
}

void Accuracy3DReconstructionParameter::Swap(Accuracy3DReconstructionParameter* other) {
  if (other != this) {
    std::swap(freespace_label_, other->freespace_label_);
    std::swap(unknown_label_, other->unknown_label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Accuracy3DReconstructionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Accuracy3DReconstructionParameter_descriptor_;
  metadata.reflection = Accuracy3DReconstructionParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScalingParameter::kScaleFieldNumber;
#endif  // !_MSC_VER

ScalingParameter::ScalingParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ScalingParameter)
}

void ScalingParameter::InitAsDefaultInstance() {
}

ScalingParameter::ScalingParameter(const ScalingParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.ScalingParameter)
}

void ScalingParameter::SharedCtor() {
  _cached_size_ = 0;
  scale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScalingParameter::~ScalingParameter() {
  // @@protoc_insertion_point(destructor:caffe.ScalingParameter)
  SharedDtor();
}

void ScalingParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScalingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScalingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScalingParameter_descriptor_;
}

const ScalingParameter& ScalingParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

ScalingParameter* ScalingParameter::default_instance_ = NULL;

ScalingParameter* ScalingParameter::New() const {
  return new ScalingParameter;
}

void ScalingParameter::Clear() {
  scale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScalingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ScalingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ScalingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ScalingParameter)
  return false;
#undef DO_
}

void ScalingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ScalingParameter)
  // optional float scale = 1;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ScalingParameter)
}

::google::protobuf::uint8* ScalingParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ScalingParameter)
  // optional float scale = 1;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ScalingParameter)
  return target;
}

int ScalingParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float scale = 1;
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScalingParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScalingParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScalingParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScalingParameter::MergeFrom(const ScalingParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScalingParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalingParameter::CopyFrom(const ScalingParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalingParameter::IsInitialized() const {

  return true;
}

void ScalingParameter::Swap(ScalingParameter* other) {
  if (other != this) {
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScalingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScalingParameter_descriptor_;
  metadata.reflection = ScalingParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OctDualUpdateParameter::kFilterSizeFieldNumber;
const int OctDualUpdateParameter::kOutputChannelsFieldNumber;
const int OctDualUpdateParameter::kWeightFillerFieldNumber;
const int OctDualUpdateParameter::kSigmaFieldNumber;
#endif  // !_MSC_VER

OctDualUpdateParameter::OctDualUpdateParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OctDualUpdateParameter)
}

void OctDualUpdateParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

OctDualUpdateParameter::OctDualUpdateParameter(const OctDualUpdateParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OctDualUpdateParameter)
}

void OctDualUpdateParameter::SharedCtor() {
  _cached_size_ = 0;
  filter_size_ = 0u;
  output_channels_ = 0u;
  weight_filler_ = NULL;
  sigma_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OctDualUpdateParameter::~OctDualUpdateParameter() {
  // @@protoc_insertion_point(destructor:caffe.OctDualUpdateParameter)
  SharedDtor();
}

void OctDualUpdateParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
  }
}

void OctDualUpdateParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OctDualUpdateParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctDualUpdateParameter_descriptor_;
}

const OctDualUpdateParameter& OctDualUpdateParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

OctDualUpdateParameter* OctDualUpdateParameter::default_instance_ = NULL;

OctDualUpdateParameter* OctDualUpdateParameter::New() const {
  return new OctDualUpdateParameter;
}

void OctDualUpdateParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OctDualUpdateParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(filter_size_, output_channels_);
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    sigma_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OctDualUpdateParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OctDualUpdateParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 filter_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_size_)));
          set_has_filter_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_output_channels;
        break;
      }

      // optional uint32 output_channels = 2;
      case 2: {
        if (tag == 16) {
         parse_output_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_channels_)));
          set_has_output_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (tag == 26) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_sigma;
        break;
      }

      // optional float sigma = 4;
      case 4: {
        if (tag == 37) {
         parse_sigma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_)));
          set_has_sigma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OctDualUpdateParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OctDualUpdateParameter)
  return false;
#undef DO_
}

void OctDualUpdateParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OctDualUpdateParameter)
  // optional uint32 filter_size = 1;
  if (has_filter_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->filter_size(), output);
  }

  // optional uint32 output_channels = 2;
  if (has_output_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->output_channels(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weight_filler(), output);
  }

  // optional float sigma = 4;
  if (has_sigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sigma(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OctDualUpdateParameter)
}

::google::protobuf::uint8* OctDualUpdateParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OctDualUpdateParameter)
  // optional uint32 filter_size = 1;
  if (has_filter_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->filter_size(), target);
  }

  // optional uint32 output_channels = 2;
  if (has_output_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->output_channels(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weight_filler(), target);
  }

  // optional float sigma = 4;
  if (has_sigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sigma(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OctDualUpdateParameter)
  return target;
}

int OctDualUpdateParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 filter_size = 1;
    if (has_filter_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_size());
    }

    // optional uint32 output_channels = 2;
    if (has_output_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_channels());
    }

    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }

    // optional float sigma = 4;
    if (has_sigma()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OctDualUpdateParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OctDualUpdateParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OctDualUpdateParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OctDualUpdateParameter::MergeFrom(const OctDualUpdateParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter_size()) {
      set_filter_size(from.filter_size());
    }
    if (from.has_output_channels()) {
      set_output_channels(from.output_channels());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_sigma()) {
      set_sigma(from.sigma());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OctDualUpdateParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctDualUpdateParameter::CopyFrom(const OctDualUpdateParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctDualUpdateParameter::IsInitialized() const {

  return true;
}

void OctDualUpdateParameter::Swap(OctDualUpdateParameter* other) {
  if (other != this) {
    std::swap(filter_size_, other->filter_size_);
    std::swap(output_channels_, other->output_channels_);
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(sigma_, other->sigma_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OctDualUpdateParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OctDualUpdateParameter_descriptor_;
  metadata.reflection = OctDualUpdateParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OctPrimalUpdateParameter::kFilterSizeFieldNumber;
const int OctPrimalUpdateParameter::kOutputChannelsFieldNumber;
const int OctPrimalUpdateParameter::kWeightFillerFieldNumber;
const int OctPrimalUpdateParameter::kTauFieldNumber;
#endif  // !_MSC_VER

OctPrimalUpdateParameter::OctPrimalUpdateParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OctPrimalUpdateParameter)
}

void OctPrimalUpdateParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

OctPrimalUpdateParameter::OctPrimalUpdateParameter(const OctPrimalUpdateParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OctPrimalUpdateParameter)
}

void OctPrimalUpdateParameter::SharedCtor() {
  _cached_size_ = 0;
  filter_size_ = 0u;
  output_channels_ = 0u;
  weight_filler_ = NULL;
  tau_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OctPrimalUpdateParameter::~OctPrimalUpdateParameter() {
  // @@protoc_insertion_point(destructor:caffe.OctPrimalUpdateParameter)
  SharedDtor();
}

void OctPrimalUpdateParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
  }
}

void OctPrimalUpdateParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OctPrimalUpdateParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctPrimalUpdateParameter_descriptor_;
}

const OctPrimalUpdateParameter& OctPrimalUpdateParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

OctPrimalUpdateParameter* OctPrimalUpdateParameter::default_instance_ = NULL;

OctPrimalUpdateParameter* OctPrimalUpdateParameter::New() const {
  return new OctPrimalUpdateParameter;
}

void OctPrimalUpdateParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OctPrimalUpdateParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(filter_size_, output_channels_);
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    tau_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OctPrimalUpdateParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OctPrimalUpdateParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 filter_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_size_)));
          set_has_filter_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_output_channels;
        break;
      }

      // optional uint32 output_channels = 2;
      case 2: {
        if (tag == 16) {
         parse_output_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_channels_)));
          set_has_output_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (tag == 26) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_tau;
        break;
      }

      // optional float tau = 4;
      case 4: {
        if (tag == 37) {
         parse_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tau_)));
          set_has_tau();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OctPrimalUpdateParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OctPrimalUpdateParameter)
  return false;
#undef DO_
}

void OctPrimalUpdateParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OctPrimalUpdateParameter)
  // optional uint32 filter_size = 1;
  if (has_filter_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->filter_size(), output);
  }

  // optional uint32 output_channels = 2;
  if (has_output_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->output_channels(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weight_filler(), output);
  }

  // optional float tau = 4;
  if (has_tau()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->tau(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OctPrimalUpdateParameter)
}

::google::protobuf::uint8* OctPrimalUpdateParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OctPrimalUpdateParameter)
  // optional uint32 filter_size = 1;
  if (has_filter_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->filter_size(), target);
  }

  // optional uint32 output_channels = 2;
  if (has_output_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->output_channels(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weight_filler(), target);
  }

  // optional float tau = 4;
  if (has_tau()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->tau(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OctPrimalUpdateParameter)
  return target;
}

int OctPrimalUpdateParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 filter_size = 1;
    if (has_filter_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_size());
    }

    // optional uint32 output_channels = 2;
    if (has_output_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_channels());
    }

    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }

    // optional float tau = 4;
    if (has_tau()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OctPrimalUpdateParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OctPrimalUpdateParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OctPrimalUpdateParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OctPrimalUpdateParameter::MergeFrom(const OctPrimalUpdateParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter_size()) {
      set_filter_size(from.filter_size());
    }
    if (from.has_output_channels()) {
      set_output_channels(from.output_channels());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_tau()) {
      set_tau(from.tau());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OctPrimalUpdateParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctPrimalUpdateParameter::CopyFrom(const OctPrimalUpdateParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctPrimalUpdateParameter::IsInitialized() const {

  return true;
}

void OctPrimalUpdateParameter::Swap(OctPrimalUpdateParameter* other) {
  if (other != this) {
    std::swap(filter_size_, other->filter_size_);
    std::swap(output_channels_, other->output_channels_);
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(tau_, other->tau_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OctPrimalUpdateParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OctPrimalUpdateParameter_descriptor_;
  metadata.reflection = OctPrimalUpdateParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OctPropParameter_PropagationMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctPropParameter_PropagationMode_descriptor_;
}
bool OctPropParameter_PropagationMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OctPropParameter_PropagationMode OctPropParameter::PROP_PRED;
const OctPropParameter_PropagationMode OctPropParameter::PROP_KNOWN;
const OctPropParameter_PropagationMode OctPropParameter::PropagationMode_MIN;
const OctPropParameter_PropagationMode OctPropParameter::PropagationMode_MAX;
const int OctPropParameter::PropagationMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OctPropParameter::kKeyLayerFieldNumber;
const int OctPropParameter::kPropModeFieldNumber;
#endif  // !_MSC_VER

OctPropParameter::OctPropParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OctPropParameter)
}

void OctPropParameter::InitAsDefaultInstance() {
}

OctPropParameter::OctPropParameter(const OctPropParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OctPropParameter)
}

void OctPropParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prop_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OctPropParameter::~OctPropParameter() {
  // @@protoc_insertion_point(destructor:caffe.OctPropParameter)
  SharedDtor();
}

void OctPropParameter::SharedDtor() {
  if (key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_layer_;
  }
  if (this != default_instance_) {
  }
}

void OctPropParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OctPropParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctPropParameter_descriptor_;
}

const OctPropParameter& OctPropParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

OctPropParameter* OctPropParameter::default_instance_ = NULL;

OctPropParameter* OctPropParameter::New() const {
  return new OctPropParameter;
}

void OctPropParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key_layer()) {
      if (key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_layer_->clear();
      }
    }
    prop_mode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OctPropParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OctPropParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key_layer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_layer().data(), this->key_layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key_layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prop_mode;
        break;
      }

      // optional .caffe.OctPropParameter.PropagationMode prop_mode = 2;
      case 2: {
        if (tag == 16) {
         parse_prop_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::OctPropParameter_PropagationMode_IsValid(value)) {
            set_prop_mode(static_cast< ::caffe::OctPropParameter_PropagationMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OctPropParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OctPropParameter)
  return false;
#undef DO_
}

void OctPropParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OctPropParameter)
  // optional string key_layer = 1;
  if (has_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_layer().data(), this->key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key_layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_layer(), output);
  }

  // optional .caffe.OctPropParameter.PropagationMode prop_mode = 2;
  if (has_prop_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->prop_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OctPropParameter)
}

::google::protobuf::uint8* OctPropParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OctPropParameter)
  // optional string key_layer = 1;
  if (has_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_layer().data(), this->key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key_layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_layer(), target);
  }

  // optional .caffe.OctPropParameter.PropagationMode prop_mode = 2;
  if (has_prop_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->prop_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OctPropParameter)
  return target;
}

int OctPropParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key_layer = 1;
    if (has_key_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_layer());
    }

    // optional .caffe.OctPropParameter.PropagationMode prop_mode = 2;
    if (has_prop_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prop_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OctPropParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OctPropParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OctPropParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OctPropParameter::MergeFrom(const OctPropParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_layer()) {
      set_key_layer(from.key_layer());
    }
    if (from.has_prop_mode()) {
      set_prop_mode(from.prop_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OctPropParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctPropParameter::CopyFrom(const OctPropParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctPropParameter::IsInitialized() const {

  return true;
}

void OctPropParameter::Swap(OctPropParameter* other) {
  if (other != this) {
    std::swap(key_layer_, other->key_layer_);
    std::swap(prop_mode_, other->prop_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OctPropParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OctPropParameter_descriptor_;
  metadata.reflection = OctPropParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OctPropLossPrepParameter::kGtKeyLayerFieldNumber;
const int OctPropLossPrepParameter::kPrKeyLayerFieldNumber;
const int OctPropLossPrepParameter::kUseVoxelGridFieldNumber;
#endif  // !_MSC_VER

OctPropLossPrepParameter::OctPropLossPrepParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OctPropLossPrepParameter)
}

void OctPropLossPrepParameter::InitAsDefaultInstance() {
}

OctPropLossPrepParameter::OctPropLossPrepParameter(const OctPropLossPrepParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OctPropLossPrepParameter)
}

void OctPropLossPrepParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gt_key_layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pr_key_layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_voxel_grid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OctPropLossPrepParameter::~OctPropLossPrepParameter() {
  // @@protoc_insertion_point(destructor:caffe.OctPropLossPrepParameter)
  SharedDtor();
}

void OctPropLossPrepParameter::SharedDtor() {
  if (gt_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gt_key_layer_;
  }
  if (pr_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pr_key_layer_;
  }
  if (this != default_instance_) {
  }
}

void OctPropLossPrepParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OctPropLossPrepParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctPropLossPrepParameter_descriptor_;
}

const OctPropLossPrepParameter& OctPropLossPrepParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

OctPropLossPrepParameter* OctPropLossPrepParameter::default_instance_ = NULL;

OctPropLossPrepParameter* OctPropLossPrepParameter::New() const {
  return new OctPropLossPrepParameter;
}

void OctPropLossPrepParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_gt_key_layer()) {
      if (gt_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gt_key_layer_->clear();
      }
    }
    if (has_pr_key_layer()) {
      if (pr_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pr_key_layer_->clear();
      }
    }
    use_voxel_grid_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OctPropLossPrepParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OctPropLossPrepParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gt_key_layer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gt_key_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gt_key_layer().data(), this->gt_key_layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gt_key_layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pr_key_layer;
        break;
      }

      // optional string pr_key_layer = 2;
      case 2: {
        if (tag == 18) {
         parse_pr_key_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pr_key_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pr_key_layer().data(), this->pr_key_layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pr_key_layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_use_voxel_grid;
        break;
      }

      // optional bool use_voxel_grid = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_use_voxel_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_voxel_grid_)));
          set_has_use_voxel_grid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OctPropLossPrepParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OctPropLossPrepParameter)
  return false;
#undef DO_
}

void OctPropLossPrepParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OctPropLossPrepParameter)
  // optional string gt_key_layer = 1;
  if (has_gt_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gt_key_layer().data(), this->gt_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gt_key_layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gt_key_layer(), output);
  }

  // optional string pr_key_layer = 2;
  if (has_pr_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pr_key_layer().data(), this->pr_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pr_key_layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pr_key_layer(), output);
  }

  // optional bool use_voxel_grid = 3 [default = false];
  if (has_use_voxel_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_voxel_grid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OctPropLossPrepParameter)
}

::google::protobuf::uint8* OctPropLossPrepParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OctPropLossPrepParameter)
  // optional string gt_key_layer = 1;
  if (has_gt_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gt_key_layer().data(), this->gt_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gt_key_layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gt_key_layer(), target);
  }

  // optional string pr_key_layer = 2;
  if (has_pr_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pr_key_layer().data(), this->pr_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pr_key_layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pr_key_layer(), target);
  }

  // optional bool use_voxel_grid = 3 [default = false];
  if (has_use_voxel_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_voxel_grid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OctPropLossPrepParameter)
  return target;
}

int OctPropLossPrepParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gt_key_layer = 1;
    if (has_gt_key_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gt_key_layer());
    }

    // optional string pr_key_layer = 2;
    if (has_pr_key_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pr_key_layer());
    }

    // optional bool use_voxel_grid = 3 [default = false];
    if (has_use_voxel_grid()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OctPropLossPrepParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OctPropLossPrepParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OctPropLossPrepParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OctPropLossPrepParameter::MergeFrom(const OctPropLossPrepParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gt_key_layer()) {
      set_gt_key_layer(from.gt_key_layer());
    }
    if (from.has_pr_key_layer()) {
      set_pr_key_layer(from.pr_key_layer());
    }
    if (from.has_use_voxel_grid()) {
      set_use_voxel_grid(from.use_voxel_grid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OctPropLossPrepParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctPropLossPrepParameter::CopyFrom(const OctPropLossPrepParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctPropLossPrepParameter::IsInitialized() const {

  return true;
}

void OctPropLossPrepParameter::Swap(OctPropLossPrepParameter* other) {
  if (other != this) {
    std::swap(gt_key_layer_, other->gt_key_layer_);
    std::swap(pr_key_layer_, other->pr_key_layer_);
    std::swap(use_voxel_grid_, other->use_voxel_grid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OctPropLossPrepParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OctPropLossPrepParameter_descriptor_;
  metadata.reflection = OctPropLossPrepParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OctLevelSamplingParameter::kInputKeyLayerFieldNumber;
const int OctLevelSamplingParameter::kRefKeyLayerFieldNumber;
const int OctLevelSamplingParameter::kInputMaxLevelFieldNumber;
#endif  // !_MSC_VER

OctLevelSamplingParameter::OctLevelSamplingParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OctLevelSamplingParameter)
}

void OctLevelSamplingParameter::InitAsDefaultInstance() {
}

OctLevelSamplingParameter::OctLevelSamplingParameter(const OctLevelSamplingParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OctLevelSamplingParameter)
}

void OctLevelSamplingParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  input_key_layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_key_layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_max_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OctLevelSamplingParameter::~OctLevelSamplingParameter() {
  // @@protoc_insertion_point(destructor:caffe.OctLevelSamplingParameter)
  SharedDtor();
}

void OctLevelSamplingParameter::SharedDtor() {
  if (input_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete input_key_layer_;
  }
  if (ref_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ref_key_layer_;
  }
  if (this != default_instance_) {
  }
}

void OctLevelSamplingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OctLevelSamplingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctLevelSamplingParameter_descriptor_;
}

const OctLevelSamplingParameter& OctLevelSamplingParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

OctLevelSamplingParameter* OctLevelSamplingParameter::default_instance_ = NULL;

OctLevelSamplingParameter* OctLevelSamplingParameter::New() const {
  return new OctLevelSamplingParameter;
}

void OctLevelSamplingParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_input_key_layer()) {
      if (input_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        input_key_layer_->clear();
      }
    }
    if (has_ref_key_layer()) {
      if (ref_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ref_key_layer_->clear();
      }
    }
    input_max_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OctLevelSamplingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OctLevelSamplingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string input_key_layer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_key_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_key_layer().data(), this->input_key_layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input_key_layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ref_key_layer;
        break;
      }

      // optional string ref_key_layer = 2;
      case 2: {
        if (tag == 18) {
         parse_ref_key_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref_key_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ref_key_layer().data(), this->ref_key_layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ref_key_layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_input_max_level;
        break;
      }

      // optional uint32 input_max_level = 3;
      case 3: {
        if (tag == 24) {
         parse_input_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_max_level_)));
          set_has_input_max_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OctLevelSamplingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OctLevelSamplingParameter)
  return false;
#undef DO_
}

void OctLevelSamplingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OctLevelSamplingParameter)
  // optional string input_key_layer = 1;
  if (has_input_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_key_layer().data(), this->input_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_key_layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input_key_layer(), output);
  }

  // optional string ref_key_layer = 2;
  if (has_ref_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref_key_layer().data(), this->ref_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ref_key_layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ref_key_layer(), output);
  }

  // optional uint32 input_max_level = 3;
  if (has_input_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->input_max_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OctLevelSamplingParameter)
}

::google::protobuf::uint8* OctLevelSamplingParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OctLevelSamplingParameter)
  // optional string input_key_layer = 1;
  if (has_input_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_key_layer().data(), this->input_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_key_layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input_key_layer(), target);
  }

  // optional string ref_key_layer = 2;
  if (has_ref_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref_key_layer().data(), this->ref_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ref_key_layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ref_key_layer(), target);
  }

  // optional uint32 input_max_level = 3;
  if (has_input_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->input_max_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OctLevelSamplingParameter)
  return target;
}

int OctLevelSamplingParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string input_key_layer = 1;
    if (has_input_key_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_key_layer());
    }

    // optional string ref_key_layer = 2;
    if (has_ref_key_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref_key_layer());
    }

    // optional uint32 input_max_level = 3;
    if (has_input_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_max_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OctLevelSamplingParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OctLevelSamplingParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OctLevelSamplingParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OctLevelSamplingParameter::MergeFrom(const OctLevelSamplingParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input_key_layer()) {
      set_input_key_layer(from.input_key_layer());
    }
    if (from.has_ref_key_layer()) {
      set_ref_key_layer(from.ref_key_layer());
    }
    if (from.has_input_max_level()) {
      set_input_max_level(from.input_max_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OctLevelSamplingParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctLevelSamplingParameter::CopyFrom(const OctLevelSamplingParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctLevelSamplingParameter::IsInitialized() const {

  return true;
}

void OctLevelSamplingParameter::Swap(OctLevelSamplingParameter* other) {
  if (other != this) {
    std::swap(input_key_layer_, other->input_key_layer_);
    std::swap(ref_key_layer_, other->ref_key_layer_);
    std::swap(input_max_level_, other->input_max_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OctLevelSamplingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OctLevelSamplingParameter_descriptor_;
  metadata.reflection = OctLevelSamplingParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OctUpSamplingParameter::kKeyLayerFieldNumber;
const int OctUpSamplingParameter::kNbhSizeFieldNumber;
#endif  // !_MSC_VER

OctUpSamplingParameter::OctUpSamplingParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OctUpSamplingParameter)
}

void OctUpSamplingParameter::InitAsDefaultInstance() {
}

OctUpSamplingParameter::OctUpSamplingParameter(const OctUpSamplingParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OctUpSamplingParameter)
}

void OctUpSamplingParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nbh_size_ = 2u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OctUpSamplingParameter::~OctUpSamplingParameter() {
  // @@protoc_insertion_point(destructor:caffe.OctUpSamplingParameter)
  SharedDtor();
}

void OctUpSamplingParameter::SharedDtor() {
  if (key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_layer_;
  }
  if (this != default_instance_) {
  }
}

void OctUpSamplingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OctUpSamplingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctUpSamplingParameter_descriptor_;
}

const OctUpSamplingParameter& OctUpSamplingParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

OctUpSamplingParameter* OctUpSamplingParameter::default_instance_ = NULL;

OctUpSamplingParameter* OctUpSamplingParameter::New() const {
  return new OctUpSamplingParameter;
}

void OctUpSamplingParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key_layer()) {
      if (key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_layer_->clear();
      }
    }
    nbh_size_ = 2u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OctUpSamplingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OctUpSamplingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key_layer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_layer().data(), this->key_layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key_layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nbh_size;
        break;
      }

      // optional uint32 nbh_size = 2 [default = 2];
      case 2: {
        if (tag == 16) {
         parse_nbh_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nbh_size_)));
          set_has_nbh_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OctUpSamplingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OctUpSamplingParameter)
  return false;
#undef DO_
}

void OctUpSamplingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OctUpSamplingParameter)
  // optional string key_layer = 1;
  if (has_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_layer().data(), this->key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key_layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_layer(), output);
  }

  // optional uint32 nbh_size = 2 [default = 2];
  if (has_nbh_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nbh_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OctUpSamplingParameter)
}

::google::protobuf::uint8* OctUpSamplingParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OctUpSamplingParameter)
  // optional string key_layer = 1;
  if (has_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_layer().data(), this->key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key_layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_layer(), target);
  }

  // optional uint32 nbh_size = 2 [default = 2];
  if (has_nbh_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nbh_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OctUpSamplingParameter)
  return target;
}

int OctUpSamplingParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key_layer = 1;
    if (has_key_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_layer());
    }

    // optional uint32 nbh_size = 2 [default = 2];
    if (has_nbh_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nbh_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OctUpSamplingParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OctUpSamplingParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OctUpSamplingParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OctUpSamplingParameter::MergeFrom(const OctUpSamplingParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_layer()) {
      set_key_layer(from.key_layer());
    }
    if (from.has_nbh_size()) {
      set_nbh_size(from.nbh_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OctUpSamplingParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctUpSamplingParameter::CopyFrom(const OctUpSamplingParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctUpSamplingParameter::IsInitialized() const {

  return true;
}

void OctUpSamplingParameter::Swap(OctUpSamplingParameter* other) {
  if (other != this) {
    std::swap(key_layer_, other->key_layer_);
    std::swap(nbh_size_, other->nbh_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OctUpSamplingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OctUpSamplingParameter_descriptor_;
  metadata.reflection = OctUpSamplingParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OctConvParameter::kFilterSizeFieldNumber;
const int OctConvParameter::kOutputChannelsFieldNumber;
const int OctConvParameter::kWeightFillerFieldNumber;
const int OctConvParameter::kBiasFillerFieldNumber;
#endif  // !_MSC_VER

OctConvParameter::OctConvParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OctConvParameter)
}

void OctConvParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

OctConvParameter::OctConvParameter(const OctConvParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OctConvParameter)
}

void OctConvParameter::SharedCtor() {
  _cached_size_ = 0;
  filter_size_ = 0u;
  output_channels_ = 0u;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OctConvParameter::~OctConvParameter() {
  // @@protoc_insertion_point(destructor:caffe.OctConvParameter)
  SharedDtor();
}

void OctConvParameter::SharedDtor() {
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
  }
}

void OctConvParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OctConvParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctConvParameter_descriptor_;
}

const OctConvParameter& OctConvParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

OctConvParameter* OctConvParameter::default_instance_ = NULL;

OctConvParameter* OctConvParameter::New() const {
  return new OctConvParameter;
}

void OctConvParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OctConvParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(filter_size_, output_channels_);
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OctConvParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OctConvParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 filter_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_size_)));
          set_has_filter_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_output_channels;
        break;
      }

      // optional uint32 output_channels = 2;
      case 2: {
        if (tag == 16) {
         parse_output_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_channels_)));
          set_has_output_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (tag == 26) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 4;
      case 4: {
        if (tag == 34) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OctConvParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OctConvParameter)
  return false;
#undef DO_
}

void OctConvParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OctConvParameter)
  // optional uint32 filter_size = 1;
  if (has_filter_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->filter_size(), output);
  }

  // optional uint32 output_channels = 2;
  if (has_output_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->output_channels(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weight_filler(), output);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bias_filler(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OctConvParameter)
}

::google::protobuf::uint8* OctConvParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OctConvParameter)
  // optional uint32 filter_size = 1;
  if (has_filter_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->filter_size(), target);
  }

  // optional uint32 output_channels = 2;
  if (has_output_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->output_channels(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weight_filler(), target);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bias_filler(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OctConvParameter)
  return target;
}

int OctConvParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 filter_size = 1;
    if (has_filter_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_size());
    }

    // optional uint32 output_channels = 2;
    if (has_output_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_channels());
    }

    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }

    // optional .caffe.FillerParameter bias_filler = 4;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_filler());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OctConvParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OctConvParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OctConvParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OctConvParameter::MergeFrom(const OctConvParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter_size()) {
      set_filter_size(from.filter_size());
    }
    if (from.has_output_channels()) {
      set_output_channels(from.output_channels());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OctConvParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctConvParameter::CopyFrom(const OctConvParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctConvParameter::IsInitialized() const {

  return true;
}

void OctConvParameter::Swap(OctConvParameter* other) {
  if (other != this) {
    std::swap(filter_size_, other->filter_size_);
    std::swap(output_channels_, other->output_channels_);
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(bias_filler_, other->bias_filler_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OctConvParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OctConvParameter_descriptor_;
  metadata.reflection = OctConvParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OctInputParameter::kBatchSizeFieldNumber;
const int OctInputParameter::kSourceFieldNumber;
const int OctInputParameter::kNumClassesFieldNumber;
const int OctInputParameter::kPreloadDataFieldNumber;
#endif  // !_MSC_VER

OctInputParameter::OctInputParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OctInputParameter)
}

void OctInputParameter::InitAsDefaultInstance() {
}

OctInputParameter::OctInputParameter(const OctInputParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OctInputParameter)
}

void OctInputParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  batch_size_ = 0u;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_classes_ = 0u;
  preload_data_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OctInputParameter::~OctInputParameter() {
  // @@protoc_insertion_point(destructor:caffe.OctInputParameter)
  SharedDtor();
}

void OctInputParameter::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void OctInputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OctInputParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctInputParameter_descriptor_;
}

const OctInputParameter& OctInputParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

OctInputParameter* OctInputParameter::default_instance_ = NULL;

OctInputParameter* OctInputParameter::New() const {
  return new OctInputParameter;
}

void OctInputParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OctInputParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(batch_size_, num_classes_);
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    preload_data_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OctInputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OctInputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 batch_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_source;
        break;
      }

      // optional string source = 2;
      case 2: {
        if (tag == 18) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_classes;
        break;
      }

      // optional uint32 num_classes = 3;
      case 3: {
        if (tag == 24) {
         parse_num_classes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_classes_)));
          set_has_num_classes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_preload_data;
        break;
      }

      // optional bool preload_data = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_preload_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preload_data_)));
          set_has_preload_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OctInputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OctInputParameter)
  return false;
#undef DO_
}

void OctInputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OctInputParameter)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->batch_size(), output);
  }

  // optional string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source(), output);
  }

  // optional uint32 num_classes = 3;
  if (has_num_classes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_classes(), output);
  }

  // optional bool preload_data = 4 [default = true];
  if (has_preload_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->preload_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OctInputParameter)
}

::google::protobuf::uint8* OctInputParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OctInputParameter)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->batch_size(), target);
  }

  // optional string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // optional uint32 num_classes = 3;
  if (has_num_classes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_classes(), target);
  }

  // optional bool preload_data = 4 [default = true];
  if (has_preload_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->preload_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OctInputParameter)
  return target;
}

int OctInputParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 batch_size = 1;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional string source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 num_classes = 3;
    if (has_num_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_classes());
    }

    // optional bool preload_data = 4 [default = true];
    if (has_preload_data()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OctInputParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OctInputParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OctInputParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OctInputParameter::MergeFrom(const OctInputParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_num_classes()) {
      set_num_classes(from.num_classes());
    }
    if (from.has_preload_data()) {
      set_preload_data(from.preload_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OctInputParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctInputParameter::CopyFrom(const OctInputParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctInputParameter::IsInitialized() const {

  return true;
}

void OctInputParameter::Swap(OctInputParameter* other) {
  if (other != this) {
    std::swap(batch_size_, other->batch_size_);
    std::swap(source_, other->source_);
    std::swap(num_classes_, other->num_classes_);
    std::swap(preload_data_, other->preload_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OctInputParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OctInputParameter_descriptor_;
  metadata.reflection = OctInputParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OctConvertParameter::kMinLevelFieldNumber;
const int OctConvertParameter::kUseMaxIndFieldNumber;
#endif  // !_MSC_VER

OctConvertParameter::OctConvertParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OctConvertParameter)
}

void OctConvertParameter::InitAsDefaultInstance() {
}

OctConvertParameter::OctConvertParameter(const OctConvertParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OctConvertParameter)
}

void OctConvertParameter::SharedCtor() {
  _cached_size_ = 0;
  min_level_ = 0u;
  use_max_ind_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OctConvertParameter::~OctConvertParameter() {
  // @@protoc_insertion_point(destructor:caffe.OctConvertParameter)
  SharedDtor();
}

void OctConvertParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OctConvertParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OctConvertParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctConvertParameter_descriptor_;
}

const OctConvertParameter& OctConvertParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

OctConvertParameter* OctConvertParameter::default_instance_ = NULL;

OctConvertParameter* OctConvertParameter::New() const {
  return new OctConvertParameter;
}

void OctConvertParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OctConvertParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(min_level_, use_max_ind_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OctConvertParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OctConvertParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 min_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_use_max_ind;
        break;
      }

      // optional bool use_max_ind = 2;
      case 2: {
        if (tag == 16) {
         parse_use_max_ind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_max_ind_)));
          set_has_use_max_ind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OctConvertParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OctConvertParameter)
  return false;
#undef DO_
}

void OctConvertParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OctConvertParameter)
  // optional uint32 min_level = 1;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->min_level(), output);
  }

  // optional bool use_max_ind = 2;
  if (has_use_max_ind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_max_ind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OctConvertParameter)
}

::google::protobuf::uint8* OctConvertParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OctConvertParameter)
  // optional uint32 min_level = 1;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->min_level(), target);
  }

  // optional bool use_max_ind = 2;
  if (has_use_max_ind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_max_ind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OctConvertParameter)
  return target;
}

int OctConvertParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 min_level = 1;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_level());
    }

    // optional bool use_max_ind = 2;
    if (has_use_max_ind()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OctConvertParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OctConvertParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OctConvertParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OctConvertParameter::MergeFrom(const OctConvertParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_use_max_ind()) {
      set_use_max_ind(from.use_max_ind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OctConvertParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctConvertParameter::CopyFrom(const OctConvertParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctConvertParameter::IsInitialized() const {

  return true;
}

void OctConvertParameter::Swap(OctConvertParameter* other) {
  if (other != this) {
    std::swap(min_level_, other->min_level_);
    std::swap(use_max_ind_, other->use_max_ind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OctConvertParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OctConvertParameter_descriptor_;
  metadata.reflection = OctConvertParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OctInputPrimalDualParameter::kBatchSizeFieldNumber;
const int OctInputPrimalDualParameter::kNumClassesFieldNumber;
const int OctInputPrimalDualParameter::kHeightFieldNumber;
const int OctInputPrimalDualParameter::kWidthFieldNumber;
const int OctInputPrimalDualParameter::kDepthFieldNumber;
const int OctInputPrimalDualParameter::kNbhSizeFieldNumber;
#endif  // !_MSC_VER

OctInputPrimalDualParameter::OctInputPrimalDualParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OctInputPrimalDualParameter)
}

void OctInputPrimalDualParameter::InitAsDefaultInstance() {
}

OctInputPrimalDualParameter::OctInputPrimalDualParameter(const OctInputPrimalDualParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OctInputPrimalDualParameter)
}

void OctInputPrimalDualParameter::SharedCtor() {
  _cached_size_ = 0;
  batch_size_ = 0u;
  num_classes_ = 0u;
  height_ = 0u;
  width_ = 0u;
  depth_ = 0u;
  nbh_size_ = 2u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OctInputPrimalDualParameter::~OctInputPrimalDualParameter() {
  // @@protoc_insertion_point(destructor:caffe.OctInputPrimalDualParameter)
  SharedDtor();
}

void OctInputPrimalDualParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OctInputPrimalDualParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OctInputPrimalDualParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctInputPrimalDualParameter_descriptor_;
}

const OctInputPrimalDualParameter& OctInputPrimalDualParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

OctInputPrimalDualParameter* OctInputPrimalDualParameter::default_instance_ = NULL;

OctInputPrimalDualParameter* OctInputPrimalDualParameter::New() const {
  return new OctInputPrimalDualParameter;
}

void OctInputPrimalDualParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OctInputPrimalDualParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(batch_size_, depth_);
    nbh_size_ = 2u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OctInputPrimalDualParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OctInputPrimalDualParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 batch_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_classes;
        break;
      }

      // optional uint32 num_classes = 2;
      case 2: {
        if (tag == 16) {
         parse_num_classes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_classes_)));
          set_has_num_classes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_depth;
        break;
      }

      // optional uint32 depth = 5;
      case 5: {
        if (tag == 40) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nbh_size;
        break;
      }

      // optional uint32 nbh_size = 6 [default = 2];
      case 6: {
        if (tag == 48) {
         parse_nbh_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nbh_size_)));
          set_has_nbh_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OctInputPrimalDualParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OctInputPrimalDualParameter)
  return false;
#undef DO_
}

void OctInputPrimalDualParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OctInputPrimalDualParameter)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->batch_size(), output);
  }

  // optional uint32 num_classes = 2;
  if (has_num_classes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_classes(), output);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // optional uint32 depth = 5;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->depth(), output);
  }

  // optional uint32 nbh_size = 6 [default = 2];
  if (has_nbh_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nbh_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OctInputPrimalDualParameter)
}

::google::protobuf::uint8* OctInputPrimalDualParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OctInputPrimalDualParameter)
  // optional uint32 batch_size = 1;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->batch_size(), target);
  }

  // optional uint32 num_classes = 2;
  if (has_num_classes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_classes(), target);
  }

  // optional uint32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // optional uint32 depth = 5;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->depth(), target);
  }

  // optional uint32 nbh_size = 6 [default = 2];
  if (has_nbh_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->nbh_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OctInputPrimalDualParameter)
  return target;
}

int OctInputPrimalDualParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 batch_size = 1;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 num_classes = 2;
    if (has_num_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_classes());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 depth = 5;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depth());
    }

    // optional uint32 nbh_size = 6 [default = 2];
    if (has_nbh_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nbh_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OctInputPrimalDualParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OctInputPrimalDualParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OctInputPrimalDualParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OctInputPrimalDualParameter::MergeFrom(const OctInputPrimalDualParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_num_classes()) {
      set_num_classes(from.num_classes());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_nbh_size()) {
      set_nbh_size(from.nbh_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OctInputPrimalDualParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctInputPrimalDualParameter::CopyFrom(const OctInputPrimalDualParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctInputPrimalDualParameter::IsInitialized() const {

  return true;
}

void OctInputPrimalDualParameter::Swap(OctInputPrimalDualParameter* other) {
  if (other != this) {
    std::swap(batch_size_, other->batch_size_);
    std::swap(num_classes_, other->num_classes_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(depth_, other->depth_);
    std::swap(nbh_size_, other->nbh_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OctInputPrimalDualParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OctInputPrimalDualParameter_descriptor_;
  metadata.reflection = OctInputPrimalDualParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OctAccuracy3DReconstructionParameter::kFreespaceLabelFieldNumber;
const int OctAccuracy3DReconstructionParameter::kUnknownLabelFieldNumber;
const int OctAccuracy3DReconstructionParameter::kGtKeyLayerFieldNumber;
const int OctAccuracy3DReconstructionParameter::kPrKeyLayerFieldNumber;
const int OctAccuracy3DReconstructionParameter::kMaxLevelFieldNumber;
const int OctAccuracy3DReconstructionParameter::kIgnoreLabelFieldNumber;
#endif  // !_MSC_VER

OctAccuracy3DReconstructionParameter::OctAccuracy3DReconstructionParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OctAccuracy3DReconstructionParameter)
}

void OctAccuracy3DReconstructionParameter::InitAsDefaultInstance() {
}

OctAccuracy3DReconstructionParameter::OctAccuracy3DReconstructionParameter(const OctAccuracy3DReconstructionParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OctAccuracy3DReconstructionParameter)
}

void OctAccuracy3DReconstructionParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  freespace_label_ = 0u;
  unknown_label_ = 0u;
  gt_key_layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pr_key_layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_level_ = 0u;
  ignore_label_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OctAccuracy3DReconstructionParameter::~OctAccuracy3DReconstructionParameter() {
  // @@protoc_insertion_point(destructor:caffe.OctAccuracy3DReconstructionParameter)
  SharedDtor();
}

void OctAccuracy3DReconstructionParameter::SharedDtor() {
  if (gt_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gt_key_layer_;
  }
  if (pr_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pr_key_layer_;
  }
  if (this != default_instance_) {
  }
}

void OctAccuracy3DReconstructionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OctAccuracy3DReconstructionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctAccuracy3DReconstructionParameter_descriptor_;
}

const OctAccuracy3DReconstructionParameter& OctAccuracy3DReconstructionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

OctAccuracy3DReconstructionParameter* OctAccuracy3DReconstructionParameter::default_instance_ = NULL;

OctAccuracy3DReconstructionParameter* OctAccuracy3DReconstructionParameter::New() const {
  return new OctAccuracy3DReconstructionParameter;
}

void OctAccuracy3DReconstructionParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OctAccuracy3DReconstructionParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(freespace_label_, unknown_label_);
    ZR_(max_level_, ignore_label_);
    if (has_gt_key_layer()) {
      if (gt_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gt_key_layer_->clear();
      }
    }
    if (has_pr_key_layer()) {
      if (pr_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pr_key_layer_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OctAccuracy3DReconstructionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OctAccuracy3DReconstructionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 freespace_label = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freespace_label_)));
          set_has_freespace_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unknown_label;
        break;
      }

      // optional uint32 unknown_label = 2;
      case 2: {
        if (tag == 16) {
         parse_unknown_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_label_)));
          set_has_unknown_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gt_key_layer;
        break;
      }

      // optional string gt_key_layer = 3;
      case 3: {
        if (tag == 26) {
         parse_gt_key_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gt_key_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gt_key_layer().data(), this->gt_key_layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gt_key_layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pr_key_layer;
        break;
      }

      // optional string pr_key_layer = 4;
      case 4: {
        if (tag == 34) {
         parse_pr_key_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pr_key_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pr_key_layer().data(), this->pr_key_layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pr_key_layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_level;
        break;
      }

      // optional uint32 max_level = 5;
      case 5: {
        if (tag == 40) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ignore_label;
        break;
      }

      // optional uint32 ignore_label = 6;
      case 6: {
        if (tag == 48) {
         parse_ignore_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignore_label_)));
          set_has_ignore_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OctAccuracy3DReconstructionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OctAccuracy3DReconstructionParameter)
  return false;
#undef DO_
}

void OctAccuracy3DReconstructionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OctAccuracy3DReconstructionParameter)
  // optional uint32 freespace_label = 1 [default = 0];
  if (has_freespace_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->freespace_label(), output);
  }

  // optional uint32 unknown_label = 2;
  if (has_unknown_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unknown_label(), output);
  }

  // optional string gt_key_layer = 3;
  if (has_gt_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gt_key_layer().data(), this->gt_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gt_key_layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gt_key_layer(), output);
  }

  // optional string pr_key_layer = 4;
  if (has_pr_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pr_key_layer().data(), this->pr_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pr_key_layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pr_key_layer(), output);
  }

  // optional uint32 max_level = 5;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_level(), output);
  }

  // optional uint32 ignore_label = 6;
  if (has_ignore_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ignore_label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OctAccuracy3DReconstructionParameter)
}

::google::protobuf::uint8* OctAccuracy3DReconstructionParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OctAccuracy3DReconstructionParameter)
  // optional uint32 freespace_label = 1 [default = 0];
  if (has_freespace_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->freespace_label(), target);
  }

  // optional uint32 unknown_label = 2;
  if (has_unknown_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unknown_label(), target);
  }

  // optional string gt_key_layer = 3;
  if (has_gt_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gt_key_layer().data(), this->gt_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gt_key_layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gt_key_layer(), target);
  }

  // optional string pr_key_layer = 4;
  if (has_pr_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pr_key_layer().data(), this->pr_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pr_key_layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pr_key_layer(), target);
  }

  // optional uint32 max_level = 5;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_level(), target);
  }

  // optional uint32 ignore_label = 6;
  if (has_ignore_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ignore_label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OctAccuracy3DReconstructionParameter)
  return target;
}

int OctAccuracy3DReconstructionParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 freespace_label = 1 [default = 0];
    if (has_freespace_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freespace_label());
    }

    // optional uint32 unknown_label = 2;
    if (has_unknown_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_label());
    }

    // optional string gt_key_layer = 3;
    if (has_gt_key_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gt_key_layer());
    }

    // optional string pr_key_layer = 4;
    if (has_pr_key_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pr_key_layer());
    }

    // optional uint32 max_level = 5;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_level());
    }

    // optional uint32 ignore_label = 6;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ignore_label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OctAccuracy3DReconstructionParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OctAccuracy3DReconstructionParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OctAccuracy3DReconstructionParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OctAccuracy3DReconstructionParameter::MergeFrom(const OctAccuracy3DReconstructionParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freespace_label()) {
      set_freespace_label(from.freespace_label());
    }
    if (from.has_unknown_label()) {
      set_unknown_label(from.unknown_label());
    }
    if (from.has_gt_key_layer()) {
      set_gt_key_layer(from.gt_key_layer());
    }
    if (from.has_pr_key_layer()) {
      set_pr_key_layer(from.pr_key_layer());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
    if (from.has_ignore_label()) {
      set_ignore_label(from.ignore_label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OctAccuracy3DReconstructionParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctAccuracy3DReconstructionParameter::CopyFrom(const OctAccuracy3DReconstructionParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctAccuracy3DReconstructionParameter::IsInitialized() const {

  return true;
}

void OctAccuracy3DReconstructionParameter::Swap(OctAccuracy3DReconstructionParameter* other) {
  if (other != this) {
    std::swap(freespace_label_, other->freespace_label_);
    std::swap(unknown_label_, other->unknown_label_);
    std::swap(gt_key_layer_, other->gt_key_layer_);
    std::swap(pr_key_layer_, other->pr_key_layer_);
    std::swap(max_level_, other->max_level_);
    std::swap(ignore_label_, other->ignore_label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OctAccuracy3DReconstructionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OctAccuracy3DReconstructionParameter_descriptor_;
  metadata.reflection = OctAccuracy3DReconstructionParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OctOutputParameter_PropagationMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctOutputParameter_PropagationMode_descriptor_;
}
bool OctOutputParameter_PropagationMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OctOutputParameter_PropagationMode OctOutputParameter::PROP_PRED;
const OctOutputParameter_PropagationMode OctOutputParameter::PROP_KNOWN;
const OctOutputParameter_PropagationMode OctOutputParameter::PropagationMode_MIN;
const OctOutputParameter_PropagationMode OctOutputParameter::PropagationMode_MAX;
const int OctOutputParameter::PropagationMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OctOutputParameter::kKeyLayerFieldNumber;
const int OctOutputParameter::kMinLevelFieldNumber;
const int OctOutputParameter::kPropModeFieldNumber;
#endif  // !_MSC_VER

OctOutputParameter::OctOutputParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OctOutputParameter)
}

void OctOutputParameter::InitAsDefaultInstance() {
}

OctOutputParameter::OctOutputParameter(const OctOutputParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OctOutputParameter)
}

void OctOutputParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  min_level_ = 0u;
  prop_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OctOutputParameter::~OctOutputParameter() {
  // @@protoc_insertion_point(destructor:caffe.OctOutputParameter)
  SharedDtor();
}

void OctOutputParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OctOutputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OctOutputParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctOutputParameter_descriptor_;
}

const OctOutputParameter& OctOutputParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

OctOutputParameter* OctOutputParameter::default_instance_ = NULL;

OctOutputParameter* OctOutputParameter::New() const {
  return new OctOutputParameter;
}

void OctOutputParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OctOutputParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(min_level_, prop_mode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  key_layer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OctOutputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OctOutputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string key_layer = 1;
      case 1: {
        if (tag == 10) {
         parse_key_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_key_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_layer(this->key_layer_size() - 1).data(),
            this->key_layer(this->key_layer_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key_layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_key_layer;
        if (input->ExpectTag(16)) goto parse_min_level;
        break;
      }

      // optional uint32 min_level = 2;
      case 2: {
        if (tag == 16) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_prop_mode;
        break;
      }

      // optional .caffe.OctOutputParameter.PropagationMode prop_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_prop_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::OctOutputParameter_PropagationMode_IsValid(value)) {
            set_prop_mode(static_cast< ::caffe::OctOutputParameter_PropagationMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OctOutputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OctOutputParameter)
  return false;
#undef DO_
}

void OctOutputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OctOutputParameter)
  // repeated string key_layer = 1;
  for (int i = 0; i < this->key_layer_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->key_layer(i).data(), this->key_layer(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "key_layer");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key_layer(i), output);
  }

  // optional uint32 min_level = 2;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_level(), output);
  }

  // optional .caffe.OctOutputParameter.PropagationMode prop_mode = 3;
  if (has_prop_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->prop_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OctOutputParameter)
}

::google::protobuf::uint8* OctOutputParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OctOutputParameter)
  // repeated string key_layer = 1;
  for (int i = 0; i < this->key_layer_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_layer(i).data(), this->key_layer(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key_layer");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->key_layer(i), target);
  }

  // optional uint32 min_level = 2;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_level(), target);
  }

  // optional .caffe.OctOutputParameter.PropagationMode prop_mode = 3;
  if (has_prop_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->prop_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OctOutputParameter)
  return target;
}

int OctOutputParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 min_level = 2;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_level());
    }

    // optional .caffe.OctOutputParameter.PropagationMode prop_mode = 3;
    if (has_prop_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prop_mode());
    }

  }
  // repeated string key_layer = 1;
  total_size += 1 * this->key_layer_size();
  for (int i = 0; i < this->key_layer_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->key_layer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OctOutputParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OctOutputParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OctOutputParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OctOutputParameter::MergeFrom(const OctOutputParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_layer_.MergeFrom(from.key_layer_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_prop_mode()) {
      set_prop_mode(from.prop_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OctOutputParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctOutputParameter::CopyFrom(const OctOutputParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctOutputParameter::IsInitialized() const {

  return true;
}

void OctOutputParameter::Swap(OctOutputParameter* other) {
  if (other != this) {
    key_layer_.Swap(&other->key_layer_);
    std::swap(min_level_, other->min_level_);
    std::swap(prop_mode_, other->prop_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OctOutputParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OctOutputParameter_descriptor_;
  metadata.reflection = OctOutputParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DenseConvertParameter::kKeyLayerFieldNumber;
const int DenseConvertParameter::kMaxLevelFieldNumber;
#endif  // !_MSC_VER

DenseConvertParameter::DenseConvertParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DenseConvertParameter)
}

void DenseConvertParameter::InitAsDefaultInstance() {
}

DenseConvertParameter::DenseConvertParameter(const DenseConvertParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.DenseConvertParameter)
}

void DenseConvertParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DenseConvertParameter::~DenseConvertParameter() {
  // @@protoc_insertion_point(destructor:caffe.DenseConvertParameter)
  SharedDtor();
}

void DenseConvertParameter::SharedDtor() {
  if (key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_layer_;
  }
  if (this != default_instance_) {
  }
}

void DenseConvertParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DenseConvertParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DenseConvertParameter_descriptor_;
}

const DenseConvertParameter& DenseConvertParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

DenseConvertParameter* DenseConvertParameter::default_instance_ = NULL;

DenseConvertParameter* DenseConvertParameter::New() const {
  return new DenseConvertParameter;
}

void DenseConvertParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key_layer()) {
      if (key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_layer_->clear();
      }
    }
    max_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DenseConvertParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DenseConvertParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key_layer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_layer().data(), this->key_layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key_layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_level;
        break;
      }

      // optional uint32 max_level = 2;
      case 2: {
        if (tag == 16) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DenseConvertParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DenseConvertParameter)
  return false;
#undef DO_
}

void DenseConvertParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DenseConvertParameter)
  // optional string key_layer = 1;
  if (has_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_layer().data(), this->key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key_layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_layer(), output);
  }

  // optional uint32 max_level = 2;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DenseConvertParameter)
}

::google::protobuf::uint8* DenseConvertParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DenseConvertParameter)
  // optional string key_layer = 1;
  if (has_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_layer().data(), this->key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key_layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_layer(), target);
  }

  // optional uint32 max_level = 2;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DenseConvertParameter)
  return target;
}

int DenseConvertParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key_layer = 1;
    if (has_key_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_layer());
    }

    // optional uint32 max_level = 2;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DenseConvertParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DenseConvertParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DenseConvertParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DenseConvertParameter::MergeFrom(const DenseConvertParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_layer()) {
      set_key_layer(from.key_layer());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DenseConvertParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseConvertParameter::CopyFrom(const DenseConvertParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseConvertParameter::IsInitialized() const {

  return true;
}

void DenseConvertParameter::Swap(DenseConvertParameter* other) {
  if (other != this) {
    std::swap(key_layer_, other->key_layer_);
    std::swap(max_level_, other->max_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DenseConvertParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DenseConvertParameter_descriptor_;
  metadata.reflection = DenseConvertParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OctSegLossPrepParameter::kInputKeyLayerFieldNumber;
const int OctSegLossPrepParameter::kRefKeyLayerFieldNumber;
const int OctSegLossPrepParameter::kIgnoreLabelFieldNumber;
#endif  // !_MSC_VER

OctSegLossPrepParameter::OctSegLossPrepParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.OctSegLossPrepParameter)
}

void OctSegLossPrepParameter::InitAsDefaultInstance() {
}

OctSegLossPrepParameter::OctSegLossPrepParameter(const OctSegLossPrepParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.OctSegLossPrepParameter)
}

void OctSegLossPrepParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  input_key_layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_key_layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ignore_label_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OctSegLossPrepParameter::~OctSegLossPrepParameter() {
  // @@protoc_insertion_point(destructor:caffe.OctSegLossPrepParameter)
  SharedDtor();
}

void OctSegLossPrepParameter::SharedDtor() {
  if (input_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete input_key_layer_;
  }
  if (ref_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ref_key_layer_;
  }
  if (this != default_instance_) {
  }
}

void OctSegLossPrepParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OctSegLossPrepParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OctSegLossPrepParameter_descriptor_;
}

const OctSegLossPrepParameter& OctSegLossPrepParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

OctSegLossPrepParameter* OctSegLossPrepParameter::default_instance_ = NULL;

OctSegLossPrepParameter* OctSegLossPrepParameter::New() const {
  return new OctSegLossPrepParameter;
}

void OctSegLossPrepParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_input_key_layer()) {
      if (input_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        input_key_layer_->clear();
      }
    }
    if (has_ref_key_layer()) {
      if (ref_key_layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ref_key_layer_->clear();
      }
    }
    ignore_label_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OctSegLossPrepParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.OctSegLossPrepParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string input_key_layer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_key_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_key_layer().data(), this->input_key_layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input_key_layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ref_key_layer;
        break;
      }

      // optional string ref_key_layer = 2;
      case 2: {
        if (tag == 18) {
         parse_ref_key_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref_key_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ref_key_layer().data(), this->ref_key_layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ref_key_layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ignore_label;
        break;
      }

      // optional uint32 ignore_label = 3;
      case 3: {
        if (tag == 24) {
         parse_ignore_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignore_label_)));
          set_has_ignore_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.OctSegLossPrepParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.OctSegLossPrepParameter)
  return false;
#undef DO_
}

void OctSegLossPrepParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.OctSegLossPrepParameter)
  // optional string input_key_layer = 1;
  if (has_input_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_key_layer().data(), this->input_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_key_layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input_key_layer(), output);
  }

  // optional string ref_key_layer = 2;
  if (has_ref_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref_key_layer().data(), this->ref_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ref_key_layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ref_key_layer(), output);
  }

  // optional uint32 ignore_label = 3;
  if (has_ignore_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ignore_label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.OctSegLossPrepParameter)
}

::google::protobuf::uint8* OctSegLossPrepParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.OctSegLossPrepParameter)
  // optional string input_key_layer = 1;
  if (has_input_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_key_layer().data(), this->input_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_key_layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input_key_layer(), target);
  }

  // optional string ref_key_layer = 2;
  if (has_ref_key_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref_key_layer().data(), this->ref_key_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ref_key_layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ref_key_layer(), target);
  }

  // optional uint32 ignore_label = 3;
  if (has_ignore_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ignore_label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.OctSegLossPrepParameter)
  return target;
}

int OctSegLossPrepParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string input_key_layer = 1;
    if (has_input_key_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_key_layer());
    }

    // optional string ref_key_layer = 2;
    if (has_ref_key_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref_key_layer());
    }

    // optional uint32 ignore_label = 3;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ignore_label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OctSegLossPrepParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OctSegLossPrepParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OctSegLossPrepParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OctSegLossPrepParameter::MergeFrom(const OctSegLossPrepParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input_key_layer()) {
      set_input_key_layer(from.input_key_layer());
    }
    if (from.has_ref_key_layer()) {
      set_ref_key_layer(from.ref_key_layer());
    }
    if (from.has_ignore_label()) {
      set_ignore_label(from.ignore_label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OctSegLossPrepParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OctSegLossPrepParameter::CopyFrom(const OctSegLossPrepParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OctSegLossPrepParameter::IsInitialized() const {

  return true;
}

void OctSegLossPrepParameter::Swap(OctSegLossPrepParameter* other) {
  if (other != this) {
    std::swap(input_key_layer_, other->input_key_layer_);
    std::swap(ref_key_layer_, other->ref_key_layer_);
    std::swap(ignore_label_, other->ignore_label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OctSegLossPrepParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OctSegLossPrepParameter_descriptor_;
  metadata.reflection = OctSegLossPrepParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SegCrossEntropyLossParameter::kUnknownLabelFieldNumber;
const int SegCrossEntropyLossParameter::kIgnoreLabelFieldNumber;
#endif  // !_MSC_VER

SegCrossEntropyLossParameter::SegCrossEntropyLossParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SegCrossEntropyLossParameter)
}

void SegCrossEntropyLossParameter::InitAsDefaultInstance() {
}

SegCrossEntropyLossParameter::SegCrossEntropyLossParameter(const SegCrossEntropyLossParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.SegCrossEntropyLossParameter)
}

void SegCrossEntropyLossParameter::SharedCtor() {
  _cached_size_ = 0;
  unknown_label_ = 0u;
  ignore_label_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegCrossEntropyLossParameter::~SegCrossEntropyLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.SegCrossEntropyLossParameter)
  SharedDtor();
}

void SegCrossEntropyLossParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegCrossEntropyLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegCrossEntropyLossParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegCrossEntropyLossParameter_descriptor_;
}

const SegCrossEntropyLossParameter& SegCrossEntropyLossParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

SegCrossEntropyLossParameter* SegCrossEntropyLossParameter::default_instance_ = NULL;

SegCrossEntropyLossParameter* SegCrossEntropyLossParameter::New() const {
  return new SegCrossEntropyLossParameter;
}

void SegCrossEntropyLossParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SegCrossEntropyLossParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(unknown_label_, ignore_label_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegCrossEntropyLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SegCrossEntropyLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unknown_label = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unknown_label_)));
          set_has_unknown_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ignore_label;
        break;
      }

      // optional uint32 ignore_label = 2;
      case 2: {
        if (tag == 16) {
         parse_ignore_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignore_label_)));
          set_has_ignore_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SegCrossEntropyLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SegCrossEntropyLossParameter)
  return false;
#undef DO_
}

void SegCrossEntropyLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SegCrossEntropyLossParameter)
  // optional uint32 unknown_label = 1;
  if (has_unknown_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unknown_label(), output);
  }

  // optional uint32 ignore_label = 2;
  if (has_ignore_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ignore_label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SegCrossEntropyLossParameter)
}

::google::protobuf::uint8* SegCrossEntropyLossParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SegCrossEntropyLossParameter)
  // optional uint32 unknown_label = 1;
  if (has_unknown_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unknown_label(), target);
  }

  // optional uint32 ignore_label = 2;
  if (has_ignore_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ignore_label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SegCrossEntropyLossParameter)
  return target;
}

int SegCrossEntropyLossParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unknown_label = 1;
    if (has_unknown_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unknown_label());
    }

    // optional uint32 ignore_label = 2;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ignore_label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegCrossEntropyLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegCrossEntropyLossParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegCrossEntropyLossParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegCrossEntropyLossParameter::MergeFrom(const SegCrossEntropyLossParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unknown_label()) {
      set_unknown_label(from.unknown_label());
    }
    if (from.has_ignore_label()) {
      set_ignore_label(from.ignore_label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegCrossEntropyLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegCrossEntropyLossParameter::CopyFrom(const SegCrossEntropyLossParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegCrossEntropyLossParameter::IsInitialized() const {

  return true;
}

void SegCrossEntropyLossParameter::Swap(SegCrossEntropyLossParameter* other) {
  if (other != this) {
    std::swap(unknown_label_, other->unknown_label_);
    std::swap(ignore_label_, other->ignore_label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegCrossEntropyLossParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegCrossEntropyLossParameter_descriptor_;
  metadata.reflection = SegCrossEntropyLossParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V1LayerParameter_LayerType_descriptor_;
}
bool V1LayerParameter_LayerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const V1LayerParameter_LayerType V1LayerParameter::NONE;
const V1LayerParameter_LayerType V1LayerParameter::ABSVAL;
const V1LayerParameter_LayerType V1LayerParameter::ACCURACY;
const V1LayerParameter_LayerType V1LayerParameter::ARGMAX;
const V1LayerParameter_LayerType V1LayerParameter::BNLL;
const V1LayerParameter_LayerType V1LayerParameter::CONCAT;
const V1LayerParameter_LayerType V1LayerParameter::CONTRASTIVE_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::CONVOLUTION;
const V1LayerParameter_LayerType V1LayerParameter::DATA;
const V1LayerParameter_LayerType V1LayerParameter::DECONVOLUTION;
const V1LayerParameter_LayerType V1LayerParameter::DROPOUT;
const V1LayerParameter_LayerType V1LayerParameter::DUMMY_DATA;
const V1LayerParameter_LayerType V1LayerParameter::EUCLIDEAN_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::ELTWISE;
const V1LayerParameter_LayerType V1LayerParameter::EXP;
const V1LayerParameter_LayerType V1LayerParameter::FLATTEN;
const V1LayerParameter_LayerType V1LayerParameter::HDF5_DATA;
const V1LayerParameter_LayerType V1LayerParameter::HDF5_OUTPUT;
const V1LayerParameter_LayerType V1LayerParameter::HINGE_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::IM2COL;
const V1LayerParameter_LayerType V1LayerParameter::IMAGE_DATA;
const V1LayerParameter_LayerType V1LayerParameter::INFOGAIN_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::INNER_PRODUCT;
const V1LayerParameter_LayerType V1LayerParameter::LRN;
const V1LayerParameter_LayerType V1LayerParameter::MEMORY_DATA;
const V1LayerParameter_LayerType V1LayerParameter::MULTINOMIAL_LOGISTIC_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::MVN;
const V1LayerParameter_LayerType V1LayerParameter::POOLING;
const V1LayerParameter_LayerType V1LayerParameter::POWER;
const V1LayerParameter_LayerType V1LayerParameter::RELU;
const V1LayerParameter_LayerType V1LayerParameter::SIGMOID;
const V1LayerParameter_LayerType V1LayerParameter::SIGMOID_CROSS_ENTROPY_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::SILENCE;
const V1LayerParameter_LayerType V1LayerParameter::SOFTMAX;
const V1LayerParameter_LayerType V1LayerParameter::SOFTMAX_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::SPLIT;
const V1LayerParameter_LayerType V1LayerParameter::SLICE;
const V1LayerParameter_LayerType V1LayerParameter::TANH;
const V1LayerParameter_LayerType V1LayerParameter::WINDOW_DATA;
const V1LayerParameter_LayerType V1LayerParameter::THRESHOLD;
const V1LayerParameter_LayerType V1LayerParameter::LayerType_MIN;
const V1LayerParameter_LayerType V1LayerParameter::LayerType_MAX;
const int V1LayerParameter::LayerType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V1LayerParameter_DimCheckMode_descriptor_;
}
bool V1LayerParameter_DimCheckMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const V1LayerParameter_DimCheckMode V1LayerParameter::STRICT;
const V1LayerParameter_DimCheckMode V1LayerParameter::PERMISSIVE;
const V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MIN;
const V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MAX;
const int V1LayerParameter::DimCheckMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int V1LayerParameter::kBottomFieldNumber;
const int V1LayerParameter::kTopFieldNumber;
const int V1LayerParameter::kNameFieldNumber;
const int V1LayerParameter::kIncludeFieldNumber;
const int V1LayerParameter::kExcludeFieldNumber;
const int V1LayerParameter::kTypeFieldNumber;
const int V1LayerParameter::kBlobsFieldNumber;
const int V1LayerParameter::kParamFieldNumber;
const int V1LayerParameter::kBlobShareModeFieldNumber;
const int V1LayerParameter::kBlobsLrFieldNumber;
const int V1LayerParameter::kWeightDecayFieldNumber;
const int V1LayerParameter::kLossWeightFieldNumber;
const int V1LayerParameter::kAccuracyParamFieldNumber;
const int V1LayerParameter::kArgmaxParamFieldNumber;
const int V1LayerParameter::kConcatParamFieldNumber;
const int V1LayerParameter::kContrastiveLossParamFieldNumber;
const int V1LayerParameter::kConvolutionParamFieldNumber;
const int V1LayerParameter::kDataParamFieldNumber;
const int V1LayerParameter::kDropoutParamFieldNumber;
const int V1LayerParameter::kDummyDataParamFieldNumber;
const int V1LayerParameter::kEltwiseParamFieldNumber;
const int V1LayerParameter::kExpParamFieldNumber;
const int V1LayerParameter::kHdf5DataParamFieldNumber;
const int V1LayerParameter::kHdf5OutputParamFieldNumber;
const int V1LayerParameter::kHingeLossParamFieldNumber;
const int V1LayerParameter::kImageDataParamFieldNumber;
const int V1LayerParameter::kInfogainLossParamFieldNumber;
const int V1LayerParameter::kInnerProductParamFieldNumber;
const int V1LayerParameter::kLrnParamFieldNumber;
const int V1LayerParameter::kMemoryDataParamFieldNumber;
const int V1LayerParameter::kMvnParamFieldNumber;
const int V1LayerParameter::kPoolingParamFieldNumber;
const int V1LayerParameter::kPowerParamFieldNumber;
const int V1LayerParameter::kReluParamFieldNumber;
const int V1LayerParameter::kSigmoidParamFieldNumber;
const int V1LayerParameter::kSoftmaxParamFieldNumber;
const int V1LayerParameter::kSliceParamFieldNumber;
const int V1LayerParameter::kTanhParamFieldNumber;
const int V1LayerParameter::kThresholdParamFieldNumber;
const int V1LayerParameter::kWindowDataParamFieldNumber;
const int V1LayerParameter::kTransformParamFieldNumber;
const int V1LayerParameter::kLossParamFieldNumber;
const int V1LayerParameter::kLayerFieldNumber;
#endif  // !_MSC_VER

V1LayerParameter::V1LayerParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.V1LayerParameter)
}

void V1LayerParameter::InitAsDefaultInstance() {
  accuracy_param_ = const_cast< ::caffe::AccuracyParameter*>(&::caffe::AccuracyParameter::default_instance());
  argmax_param_ = const_cast< ::caffe::ArgMaxParameter*>(&::caffe::ArgMaxParameter::default_instance());
  concat_param_ = const_cast< ::caffe::ConcatParameter*>(&::caffe::ConcatParameter::default_instance());
  contrastive_loss_param_ = const_cast< ::caffe::ContrastiveLossParameter*>(&::caffe::ContrastiveLossParameter::default_instance());
  convolution_param_ = const_cast< ::caffe::ConvolutionParameter*>(&::caffe::ConvolutionParameter::default_instance());
  data_param_ = const_cast< ::caffe::DataParameter*>(&::caffe::DataParameter::default_instance());
  dropout_param_ = const_cast< ::caffe::DropoutParameter*>(&::caffe::DropoutParameter::default_instance());
  dummy_data_param_ = const_cast< ::caffe::DummyDataParameter*>(&::caffe::DummyDataParameter::default_instance());
  eltwise_param_ = const_cast< ::caffe::EltwiseParameter*>(&::caffe::EltwiseParameter::default_instance());
  exp_param_ = const_cast< ::caffe::ExpParameter*>(&::caffe::ExpParameter::default_instance());
  hdf5_data_param_ = const_cast< ::caffe::HDF5DataParameter*>(&::caffe::HDF5DataParameter::default_instance());
  hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(&::caffe::HDF5OutputParameter::default_instance());
  hinge_loss_param_ = const_cast< ::caffe::HingeLossParameter*>(&::caffe::HingeLossParameter::default_instance());
  image_data_param_ = const_cast< ::caffe::ImageDataParameter*>(&::caffe::ImageDataParameter::default_instance());
  infogain_loss_param_ = const_cast< ::caffe::InfogainLossParameter*>(&::caffe::InfogainLossParameter::default_instance());
  inner_product_param_ = const_cast< ::caffe::InnerProductParameter*>(&::caffe::InnerProductParameter::default_instance());
  lrn_param_ = const_cast< ::caffe::LRNParameter*>(&::caffe::LRNParameter::default_instance());
  memory_data_param_ = const_cast< ::caffe::MemoryDataParameter*>(&::caffe::MemoryDataParameter::default_instance());
  mvn_param_ = const_cast< ::caffe::MVNParameter*>(&::caffe::MVNParameter::default_instance());
  pooling_param_ = const_cast< ::caffe::PoolingParameter*>(&::caffe::PoolingParameter::default_instance());
  power_param_ = const_cast< ::caffe::PowerParameter*>(&::caffe::PowerParameter::default_instance());
  relu_param_ = const_cast< ::caffe::ReLUParameter*>(&::caffe::ReLUParameter::default_instance());
  sigmoid_param_ = const_cast< ::caffe::SigmoidParameter*>(&::caffe::SigmoidParameter::default_instance());
  softmax_param_ = const_cast< ::caffe::SoftmaxParameter*>(&::caffe::SoftmaxParameter::default_instance());
  slice_param_ = const_cast< ::caffe::SliceParameter*>(&::caffe::SliceParameter::default_instance());
  tanh_param_ = const_cast< ::caffe::TanHParameter*>(&::caffe::TanHParameter::default_instance());
  threshold_param_ = const_cast< ::caffe::ThresholdParameter*>(&::caffe::ThresholdParameter::default_instance());
  window_data_param_ = const_cast< ::caffe::WindowDataParameter*>(&::caffe::WindowDataParameter::default_instance());
  transform_param_ = const_cast< ::caffe::TransformationParameter*>(&::caffe::TransformationParameter::default_instance());
  loss_param_ = const_cast< ::caffe::LossParameter*>(&::caffe::LossParameter::default_instance());
  layer_ = const_cast< ::caffe::V0LayerParameter*>(&::caffe::V0LayerParameter::default_instance());
}

V1LayerParameter::V1LayerParameter(const V1LayerParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.V1LayerParameter)
}

void V1LayerParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  accuracy_param_ = NULL;
  argmax_param_ = NULL;
  concat_param_ = NULL;
  contrastive_loss_param_ = NULL;
  convolution_param_ = NULL;
  data_param_ = NULL;
  dropout_param_ = NULL;
  dummy_data_param_ = NULL;
  eltwise_param_ = NULL;
  exp_param_ = NULL;
  hdf5_data_param_ = NULL;
  hdf5_output_param_ = NULL;
  hinge_loss_param_ = NULL;
  image_data_param_ = NULL;
  infogain_loss_param_ = NULL;
  inner_product_param_ = NULL;
  lrn_param_ = NULL;
  memory_data_param_ = NULL;
  mvn_param_ = NULL;
  pooling_param_ = NULL;
  power_param_ = NULL;
  relu_param_ = NULL;
  sigmoid_param_ = NULL;
  softmax_param_ = NULL;
  slice_param_ = NULL;
  tanh_param_ = NULL;
  threshold_param_ = NULL;
  window_data_param_ = NULL;
  transform_param_ = NULL;
  loss_param_ = NULL;
  layer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

V1LayerParameter::~V1LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.V1LayerParameter)
  SharedDtor();
}

void V1LayerParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete accuracy_param_;
    delete argmax_param_;
    delete concat_param_;
    delete contrastive_loss_param_;
    delete convolution_param_;
    delete data_param_;
    delete dropout_param_;
    delete dummy_data_param_;
    delete eltwise_param_;
    delete exp_param_;
    delete hdf5_data_param_;
    delete hdf5_output_param_;
    delete hinge_loss_param_;
    delete image_data_param_;
    delete infogain_loss_param_;
    delete inner_product_param_;
    delete lrn_param_;
    delete memory_data_param_;
    delete mvn_param_;
    delete pooling_param_;
    delete power_param_;
    delete relu_param_;
    delete sigmoid_param_;
    delete softmax_param_;
    delete slice_param_;
    delete tanh_param_;
    delete threshold_param_;
    delete window_data_param_;
    delete transform_param_;
    delete loss_param_;
    delete layer_;
  }
}

void V1LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* V1LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V1LayerParameter_descriptor_;
}

const V1LayerParameter& V1LayerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

V1LayerParameter* V1LayerParameter::default_instance_ = NULL;

V1LayerParameter* V1LayerParameter::New() const {
  return new V1LayerParameter;
}

void V1LayerParameter::Clear() {
  if (_has_bits_[0 / 32] & 36) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 0;
  }
  if (_has_bits_[8 / 32] & 61440) {
    if (has_accuracy_param()) {
      if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
    }
    if (has_argmax_param()) {
      if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
    }
    if (has_concat_param()) {
      if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
    }
    if (has_contrastive_loss_param()) {
      if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_convolution_param()) {
      if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
    }
    if (has_data_param()) {
      if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
    }
    if (has_dropout_param()) {
      if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
    }
    if (has_dummy_data_param()) {
      if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
    }
    if (has_eltwise_param()) {
      if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
    }
    if (has_exp_param()) {
      if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
    }
    if (has_hdf5_data_param()) {
      if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
    }
    if (has_hdf5_output_param()) {
      if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has_hinge_loss_param()) {
      if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
    }
    if (has_image_data_param()) {
      if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
    }
    if (has_infogain_loss_param()) {
      if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
    }
    if (has_inner_product_param()) {
      if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
    }
    if (has_lrn_param()) {
      if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
    }
    if (has_memory_data_param()) {
      if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
    }
    if (has_mvn_param()) {
      if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
    }
    if (has_pooling_param()) {
      if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_power_param()) {
      if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
    }
    if (has_relu_param()) {
      if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
    }
    if (has_sigmoid_param()) {
      if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
    }
    if (has_softmax_param()) {
      if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
    }
    if (has_slice_param()) {
      if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
    }
    if (has_tanh_param()) {
      if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
    }
    if (has_threshold_param()) {
      if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
    }
    if (has_window_data_param()) {
      if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 1792) {
    if (has_transform_param()) {
      if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
    }
    if (has_loss_param()) {
      if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
    }
    if (has_layer()) {
      if (layer_ != NULL) layer_->::caffe::V0LayerParameter::Clear();
    }
  }
  bottom_.Clear();
  top_.Clear();
  include_.Clear();
  exclude_.Clear();
  blobs_.Clear();
  param_.Clear();
  blob_share_mode_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  loss_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool V1LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.V1LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.V0LayerParameter layer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bottom;
        break;
      }

      // repeated string bottom = 2;
      case 2: {
        if (tag == 18) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bottom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bottom;
        if (input->ExpectTag(26)) goto parse_top;
        break;
      }

      // repeated string top = 3;
      case 3: {
        if (tag == 26) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top(this->top_size() - 1).data(),
            this->top(this->top_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "top");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_top;
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .caffe.V1LayerParameter.LayerType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V1LayerParameter_LayerType_IsValid(value)) {
            set_type(static_cast< ::caffe::V1LayerParameter_LayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_blobs;
        break;
      }

      // repeated .caffe.BlobProto blobs = 6;
      case 6: {
        if (tag == 50) {
         parse_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_blobs;
        if (input->ExpectTag(61)) goto parse_blobs_lr;
        break;
      }

      // repeated float blobs_lr = 7;
      case 7: {
        if (tag == 61) {
         parse_blobs_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_blobs_lr())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_blobs_lr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_blobs_lr;
        if (input->ExpectTag(69)) goto parse_weight_decay;
        break;
      }

      // repeated float weight_decay = 8;
      case 8: {
        if (tag == 69) {
         parse_weight_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69, input, this->mutable_weight_decay())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight_decay())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_weight_decay;
        if (input->ExpectTag(74)) goto parse_concat_param;
        break;
      }

      // optional .caffe.ConcatParameter concat_param = 9;
      case 9: {
        if (tag == 74) {
         parse_concat_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_convolution_param;
        break;
      }

      // optional .caffe.ConvolutionParameter convolution_param = 10;
      case 10: {
        if (tag == 82) {
         parse_convolution_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_data_param;
        break;
      }

      // optional .caffe.DataParameter data_param = 11;
      case 11: {
        if (tag == 90) {
         parse_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_dropout_param;
        break;
      }

      // optional .caffe.DropoutParameter dropout_param = 12;
      case 12: {
        if (tag == 98) {
         parse_dropout_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_hdf5_data_param;
        break;
      }

      // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
      case 13: {
        if (tag == 106) {
         parse_hdf5_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_hdf5_output_param;
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
      case 14: {
        if (tag == 114) {
         parse_hdf5_output_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_image_data_param;
        break;
      }

      // optional .caffe.ImageDataParameter image_data_param = 15;
      case 15: {
        if (tag == 122) {
         parse_image_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_infogain_loss_param;
        break;
      }

      // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
      case 16: {
        if (tag == 130) {
         parse_infogain_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infogain_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_inner_product_param;
        break;
      }

      // optional .caffe.InnerProductParameter inner_product_param = 17;
      case 17: {
        if (tag == 138) {
         parse_inner_product_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_lrn_param;
        break;
      }

      // optional .caffe.LRNParameter lrn_param = 18;
      case 18: {
        if (tag == 146) {
         parse_lrn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_pooling_param;
        break;
      }

      // optional .caffe.PoolingParameter pooling_param = 19;
      case 19: {
        if (tag == 154) {
         parse_pooling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_window_data_param;
        break;
      }

      // optional .caffe.WindowDataParameter window_data_param = 20;
      case 20: {
        if (tag == 162) {
         parse_window_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_power_param;
        break;
      }

      // optional .caffe.PowerParameter power_param = 21;
      case 21: {
        if (tag == 170) {
         parse_power_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_memory_data_param;
        break;
      }

      // optional .caffe.MemoryDataParameter memory_data_param = 22;
      case 22: {
        if (tag == 178) {
         parse_memory_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_argmax_param;
        break;
      }

      // optional .caffe.ArgMaxParameter argmax_param = 23;
      case 23: {
        if (tag == 186) {
         parse_argmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_eltwise_param;
        break;
      }

      // optional .caffe.EltwiseParameter eltwise_param = 24;
      case 24: {
        if (tag == 194) {
         parse_eltwise_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_threshold_param;
        break;
      }

      // optional .caffe.ThresholdParameter threshold_param = 25;
      case 25: {
        if (tag == 202) {
         parse_threshold_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_threshold_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_dummy_data_param;
        break;
      }

      // optional .caffe.DummyDataParameter dummy_data_param = 26;
      case 26: {
        if (tag == 210) {
         parse_dummy_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dummy_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_accuracy_param;
        break;
      }

      // optional .caffe.AccuracyParameter accuracy_param = 27;
      case 27: {
        if (tag == 218) {
         parse_accuracy_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accuracy_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_hinge_loss_param;
        break;
      }

      // optional .caffe.HingeLossParameter hinge_loss_param = 29;
      case 29: {
        if (tag == 234) {
         parse_hinge_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hinge_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_relu_param;
        break;
      }

      // optional .caffe.ReLUParameter relu_param = 30;
      case 30: {
        if (tag == 242) {
         parse_relu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_slice_param;
        break;
      }

      // optional .caffe.SliceParameter slice_param = 31;
      case 31: {
        if (tag == 250) {
         parse_slice_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_include;
        break;
      }

      // repeated .caffe.NetStateRule include = 32;
      case 32: {
        if (tag == 258) {
         parse_include:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_include()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_include;
        if (input->ExpectTag(266)) goto parse_exclude;
        break;
      }

      // repeated .caffe.NetStateRule exclude = 33;
      case 33: {
        if (tag == 266) {
         parse_exclude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exclude()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_exclude;
        if (input->ExpectTag(274)) goto parse_mvn_param;
        break;
      }

      // optional .caffe.MVNParameter mvn_param = 34;
      case 34: {
        if (tag == 274) {
         parse_mvn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mvn_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(285)) goto parse_loss_weight;
        break;
      }

      // repeated float loss_weight = 35;
      case 35: {
        if (tag == 285) {
         parse_loss_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 285, input, this->mutable_loss_weight())));
        } else if (tag == 282) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_loss_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(285)) goto parse_loss_weight;
        if (input->ExpectTag(290)) goto parse_transform_param;
        break;
      }

      // optional .caffe.TransformationParameter transform_param = 36;
      case 36: {
        if (tag == 290) {
         parse_transform_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_tanh_param;
        break;
      }

      // optional .caffe.TanHParameter tanh_param = 37;
      case 37: {
        if (tag == 298) {
         parse_tanh_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tanh_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_sigmoid_param;
        break;
      }

      // optional .caffe.SigmoidParameter sigmoid_param = 38;
      case 38: {
        if (tag == 306) {
         parse_sigmoid_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigmoid_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_softmax_param;
        break;
      }

      // optional .caffe.SoftmaxParameter softmax_param = 39;
      case 39: {
        if (tag == 314) {
         parse_softmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_contrastive_loss_param;
        break;
      }

      // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
      case 40: {
        if (tag == 322) {
         parse_contrastive_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contrastive_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_exp_param;
        break;
      }

      // optional .caffe.ExpParameter exp_param = 41;
      case 41: {
        if (tag == 330) {
         parse_exp_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_loss_param;
        break;
      }

      // optional .caffe.LossParameter loss_param = 42;
      case 42: {
        if (tag == 338) {
         parse_loss_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_param;
        break;
      }

      // repeated string param = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param(this->param_size() - 1).data(),
            this->param(this->param_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_param;
        if (input->ExpectTag(8016)) goto parse_blob_share_mode;
        break;
      }

      // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
      case 1002: {
        if (tag == 8016) {
         parse_blob_share_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V1LayerParameter_DimCheckMode_IsValid(value)) {
            add_blob_share_mode(static_cast< ::caffe::V1LayerParameter_DimCheckMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1002, value);
          }
        } else if (tag == 8018) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::caffe::V1LayerParameter_DimCheckMode_IsValid,
                 this->mutable_blob_share_mode())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8016)) goto parse_blob_share_mode;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.V1LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.V1LayerParameter)
  return false;
#undef DO_
}

void V1LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.V1LayerParameter)
  // optional .caffe.V0LayerParameter layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->layer(), output);
  }

  // repeated string bottom = 2;
  for (int i = 0; i < this->bottom_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->bottom(i).data(), this->bottom(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bottom(i), output);
  }

  // repeated string top = 3;
  for (int i = 0; i < this->top_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->top(i).data(), this->top(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "top");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->top(i), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional .caffe.V1LayerParameter.LayerType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // repeated .caffe.BlobProto blobs = 6;
  for (int i = 0; i < this->blobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->blobs(i), output);
  }

  // repeated float blobs_lr = 7;
  for (int i = 0; i < this->blobs_lr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->blobs_lr(i), output);
  }

  // repeated float weight_decay = 8;
  for (int i = 0; i < this->weight_decay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->weight_decay(i), output);
  }

  // optional .caffe.ConcatParameter concat_param = 9;
  if (has_concat_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->concat_param(), output);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  if (has_convolution_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->convolution_param(), output);
  }

  // optional .caffe.DataParameter data_param = 11;
  if (has_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->data_param(), output);
  }

  // optional .caffe.DropoutParameter dropout_param = 12;
  if (has_dropout_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->dropout_param(), output);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  if (has_hdf5_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->hdf5_data_param(), output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  if (has_hdf5_output_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->hdf5_output_param(), output);
  }

  // optional .caffe.ImageDataParameter image_data_param = 15;
  if (has_image_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->image_data_param(), output);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  if (has_infogain_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->infogain_loss_param(), output);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  if (has_inner_product_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->inner_product_param(), output);
  }

  // optional .caffe.LRNParameter lrn_param = 18;
  if (has_lrn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->lrn_param(), output);
  }

  // optional .caffe.PoolingParameter pooling_param = 19;
  if (has_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->pooling_param(), output);
  }

  // optional .caffe.WindowDataParameter window_data_param = 20;
  if (has_window_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->window_data_param(), output);
  }

  // optional .caffe.PowerParameter power_param = 21;
  if (has_power_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->power_param(), output);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  if (has_memory_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->memory_data_param(), output);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  if (has_argmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->argmax_param(), output);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  if (has_eltwise_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->eltwise_param(), output);
  }

  // optional .caffe.ThresholdParameter threshold_param = 25;
  if (has_threshold_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->threshold_param(), output);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  if (has_dummy_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->dummy_data_param(), output);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  if (has_accuracy_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->accuracy_param(), output);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  if (has_hinge_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->hinge_loss_param(), output);
  }

  // optional .caffe.ReLUParameter relu_param = 30;
  if (has_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->relu_param(), output);
  }

  // optional .caffe.SliceParameter slice_param = 31;
  if (has_slice_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->slice_param(), output);
  }

  // repeated .caffe.NetStateRule include = 32;
  for (int i = 0; i < this->include_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->include(i), output);
  }

  // repeated .caffe.NetStateRule exclude = 33;
  for (int i = 0; i < this->exclude_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->exclude(i), output);
  }

  // optional .caffe.MVNParameter mvn_param = 34;
  if (has_mvn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->mvn_param(), output);
  }

  // repeated float loss_weight = 35;
  for (int i = 0; i < this->loss_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      35, this->loss_weight(i), output);
  }

  // optional .caffe.TransformationParameter transform_param = 36;
  if (has_transform_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->transform_param(), output);
  }

  // optional .caffe.TanHParameter tanh_param = 37;
  if (has_tanh_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->tanh_param(), output);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  if (has_sigmoid_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->sigmoid_param(), output);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  if (has_softmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->softmax_param(), output);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  if (has_contrastive_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->contrastive_loss_param(), output);
  }

  // optional .caffe.ExpParameter exp_param = 41;
  if (has_exp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->exp_param(), output);
  }

  // optional .caffe.LossParameter loss_param = 42;
  if (has_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->loss_param(), output);
  }

  // repeated string param = 1001;
  for (int i = 0; i < this->param_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->param(i).data(), this->param(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "param");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1001, this->param(i), output);
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  for (int i = 0; i < this->blob_share_mode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1002, this->blob_share_mode(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.V1LayerParameter)
}

::google::protobuf::uint8* V1LayerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.V1LayerParameter)
  // optional .caffe.V0LayerParameter layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->layer(), target);
  }

  // repeated string bottom = 2;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->bottom(i), target);
  }

  // repeated string top = 3;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->top(i), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional .caffe.V1LayerParameter.LayerType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // repeated .caffe.BlobProto blobs = 6;
  for (int i = 0; i < this->blobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->blobs(i), target);
  }

  // repeated float blobs_lr = 7;
  for (int i = 0; i < this->blobs_lr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->blobs_lr(i), target);
  }

  // repeated float weight_decay = 8;
  for (int i = 0; i < this->weight_decay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(8, this->weight_decay(i), target);
  }

  // optional .caffe.ConcatParameter concat_param = 9;
  if (has_concat_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->concat_param(), target);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  if (has_convolution_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->convolution_param(), target);
  }

  // optional .caffe.DataParameter data_param = 11;
  if (has_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->data_param(), target);
  }

  // optional .caffe.DropoutParameter dropout_param = 12;
  if (has_dropout_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->dropout_param(), target);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  if (has_hdf5_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->hdf5_data_param(), target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  if (has_hdf5_output_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->hdf5_output_param(), target);
  }

  // optional .caffe.ImageDataParameter image_data_param = 15;
  if (has_image_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->image_data_param(), target);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  if (has_infogain_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->infogain_loss_param(), target);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  if (has_inner_product_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->inner_product_param(), target);
  }

  // optional .caffe.LRNParameter lrn_param = 18;
  if (has_lrn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->lrn_param(), target);
  }

  // optional .caffe.PoolingParameter pooling_param = 19;
  if (has_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->pooling_param(), target);
  }

  // optional .caffe.WindowDataParameter window_data_param = 20;
  if (has_window_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->window_data_param(), target);
  }

  // optional .caffe.PowerParameter power_param = 21;
  if (has_power_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->power_param(), target);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  if (has_memory_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->memory_data_param(), target);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  if (has_argmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->argmax_param(), target);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  if (has_eltwise_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->eltwise_param(), target);
  }

  // optional .caffe.ThresholdParameter threshold_param = 25;
  if (has_threshold_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->threshold_param(), target);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  if (has_dummy_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->dummy_data_param(), target);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  if (has_accuracy_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->accuracy_param(), target);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  if (has_hinge_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->hinge_loss_param(), target);
  }

  // optional .caffe.ReLUParameter relu_param = 30;
  if (has_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->relu_param(), target);
  }

  // optional .caffe.SliceParameter slice_param = 31;
  if (has_slice_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->slice_param(), target);
  }

  // repeated .caffe.NetStateRule include = 32;
  for (int i = 0; i < this->include_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->include(i), target);
  }

  // repeated .caffe.NetStateRule exclude = 33;
  for (int i = 0; i < this->exclude_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->exclude(i), target);
  }

  // optional .caffe.MVNParameter mvn_param = 34;
  if (has_mvn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->mvn_param(), target);
  }

  // repeated float loss_weight = 35;
  for (int i = 0; i < this->loss_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(35, this->loss_weight(i), target);
  }

  // optional .caffe.TransformationParameter transform_param = 36;
  if (has_transform_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->transform_param(), target);
  }

  // optional .caffe.TanHParameter tanh_param = 37;
  if (has_tanh_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->tanh_param(), target);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  if (has_sigmoid_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->sigmoid_param(), target);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  if (has_softmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->softmax_param(), target);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  if (has_contrastive_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->contrastive_loss_param(), target);
  }

  // optional .caffe.ExpParameter exp_param = 41;
  if (has_exp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->exp_param(), target);
  }

  // optional .caffe.LossParameter loss_param = 42;
  if (has_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->loss_param(), target);
  }

  // repeated string param = 1001;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1001, this->param(i), target);
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  for (int i = 0; i < this->blob_share_mode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1002, this->blob_share_mode(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.V1LayerParameter)
  return target;
}

int V1LayerParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe.V1LayerParameter.LayerType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional .caffe.AccuracyParameter accuracy_param = 27;
    if (has_accuracy_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accuracy_param());
    }

    // optional .caffe.ArgMaxParameter argmax_param = 23;
    if (has_argmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->argmax_param());
    }

    // optional .caffe.ConcatParameter concat_param = 9;
    if (has_concat_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->concat_param());
    }

    // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
    if (has_contrastive_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contrastive_loss_param());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .caffe.ConvolutionParameter convolution_param = 10;
    if (has_convolution_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->convolution_param());
    }

    // optional .caffe.DataParameter data_param = 11;
    if (has_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_param());
    }

    // optional .caffe.DropoutParameter dropout_param = 12;
    if (has_dropout_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dropout_param());
    }

    // optional .caffe.DummyDataParameter dummy_data_param = 26;
    if (has_dummy_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dummy_data_param());
    }

    // optional .caffe.EltwiseParameter eltwise_param = 24;
    if (has_eltwise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eltwise_param());
    }

    // optional .caffe.ExpParameter exp_param = 41;
    if (has_exp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exp_param());
    }

    // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
    if (has_hdf5_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hdf5_data_param());
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
    if (has_hdf5_output_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hdf5_output_param());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .caffe.HingeLossParameter hinge_loss_param = 29;
    if (has_hinge_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hinge_loss_param());
    }

    // optional .caffe.ImageDataParameter image_data_param = 15;
    if (has_image_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_data_param());
    }

    // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
    if (has_infogain_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infogain_loss_param());
    }

    // optional .caffe.InnerProductParameter inner_product_param = 17;
    if (has_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inner_product_param());
    }

    // optional .caffe.LRNParameter lrn_param = 18;
    if (has_lrn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lrn_param());
    }

    // optional .caffe.MemoryDataParameter memory_data_param = 22;
    if (has_memory_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memory_data_param());
    }

    // optional .caffe.MVNParameter mvn_param = 34;
    if (has_mvn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mvn_param());
    }

    // optional .caffe.PoolingParameter pooling_param = 19;
    if (has_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pooling_param());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .caffe.PowerParameter power_param = 21;
    if (has_power_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->power_param());
    }

    // optional .caffe.ReLUParameter relu_param = 30;
    if (has_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relu_param());
    }

    // optional .caffe.SigmoidParameter sigmoid_param = 38;
    if (has_sigmoid_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sigmoid_param());
    }

    // optional .caffe.SoftmaxParameter softmax_param = 39;
    if (has_softmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->softmax_param());
    }

    // optional .caffe.SliceParameter slice_param = 31;
    if (has_slice_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slice_param());
    }

    // optional .caffe.TanHParameter tanh_param = 37;
    if (has_tanh_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tanh_param());
    }

    // optional .caffe.ThresholdParameter threshold_param = 25;
    if (has_threshold_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->threshold_param());
    }

    // optional .caffe.WindowDataParameter window_data_param = 20;
    if (has_window_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->window_data_param());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .caffe.TransformationParameter transform_param = 36;
    if (has_transform_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform_param());
    }

    // optional .caffe.LossParameter loss_param = 42;
    if (has_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loss_param());
    }

    // optional .caffe.V0LayerParameter layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer());
    }

  }
  // repeated string bottom = 2;
  total_size += 1 * this->bottom_size();
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  // repeated string top = 3;
  total_size += 1 * this->top_size();
  for (int i = 0; i < this->top_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }

  // repeated .caffe.NetStateRule include = 32;
  total_size += 2 * this->include_size();
  for (int i = 0; i < this->include_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->include(i));
  }

  // repeated .caffe.NetStateRule exclude = 33;
  total_size += 2 * this->exclude_size();
  for (int i = 0; i < this->exclude_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exclude(i));
  }

  // repeated .caffe.BlobProto blobs = 6;
  total_size += 1 * this->blobs_size();
  for (int i = 0; i < this->blobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blobs(i));
  }

  // repeated string param = 1001;
  total_size += 2 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param(i));
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  {
    int data_size = 0;
    for (int i = 0; i < this->blob_share_mode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->blob_share_mode(i));
    }
    total_size += 2 * this->blob_share_mode_size() + data_size;
  }

  // repeated float blobs_lr = 7;
  {
    int data_size = 0;
    data_size = 4 * this->blobs_lr_size();
    total_size += 1 * this->blobs_lr_size() + data_size;
  }

  // repeated float weight_decay = 8;
  {
    int data_size = 0;
    data_size = 4 * this->weight_decay_size();
    total_size += 1 * this->weight_decay_size() + data_size;
  }

  // repeated float loss_weight = 35;
  {
    int data_size = 0;
    data_size = 4 * this->loss_weight_size();
    total_size += 2 * this->loss_weight_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void V1LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const V1LayerParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const V1LayerParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void V1LayerParameter::MergeFrom(const V1LayerParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  blobs_.MergeFrom(from.blobs_);
  param_.MergeFrom(from.param_);
  blob_share_mode_.MergeFrom(from.blob_share_mode_);
  blobs_lr_.MergeFrom(from.blobs_lr_);
  weight_decay_.MergeFrom(from.weight_decay_);
  loss_weight_.MergeFrom(from.loss_weight_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_accuracy_param()) {
      mutable_accuracy_param()->::caffe::AccuracyParameter::MergeFrom(from.accuracy_param());
    }
    if (from.has_argmax_param()) {
      mutable_argmax_param()->::caffe::ArgMaxParameter::MergeFrom(from.argmax_param());
    }
    if (from.has_concat_param()) {
      mutable_concat_param()->::caffe::ConcatParameter::MergeFrom(from.concat_param());
    }
    if (from.has_contrastive_loss_param()) {
      mutable_contrastive_loss_param()->::caffe::ContrastiveLossParameter::MergeFrom(from.contrastive_loss_param());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_convolution_param()) {
      mutable_convolution_param()->::caffe::ConvolutionParameter::MergeFrom(from.convolution_param());
    }
    if (from.has_data_param()) {
      mutable_data_param()->::caffe::DataParameter::MergeFrom(from.data_param());
    }
    if (from.has_dropout_param()) {
      mutable_dropout_param()->::caffe::DropoutParameter::MergeFrom(from.dropout_param());
    }
    if (from.has_dummy_data_param()) {
      mutable_dummy_data_param()->::caffe::DummyDataParameter::MergeFrom(from.dummy_data_param());
    }
    if (from.has_eltwise_param()) {
      mutable_eltwise_param()->::caffe::EltwiseParameter::MergeFrom(from.eltwise_param());
    }
    if (from.has_exp_param()) {
      mutable_exp_param()->::caffe::ExpParameter::MergeFrom(from.exp_param());
    }
    if (from.has_hdf5_data_param()) {
      mutable_hdf5_data_param()->::caffe::HDF5DataParameter::MergeFrom(from.hdf5_data_param());
    }
    if (from.has_hdf5_output_param()) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_hinge_loss_param()) {
      mutable_hinge_loss_param()->::caffe::HingeLossParameter::MergeFrom(from.hinge_loss_param());
    }
    if (from.has_image_data_param()) {
      mutable_image_data_param()->::caffe::ImageDataParameter::MergeFrom(from.image_data_param());
    }
    if (from.has_infogain_loss_param()) {
      mutable_infogain_loss_param()->::caffe::InfogainLossParameter::MergeFrom(from.infogain_loss_param());
    }
    if (from.has_inner_product_param()) {
      mutable_inner_product_param()->::caffe::InnerProductParameter::MergeFrom(from.inner_product_param());
    }
    if (from.has_lrn_param()) {
      mutable_lrn_param()->::caffe::LRNParameter::MergeFrom(from.lrn_param());
    }
    if (from.has_memory_data_param()) {
      mutable_memory_data_param()->::caffe::MemoryDataParameter::MergeFrom(from.memory_data_param());
    }
    if (from.has_mvn_param()) {
      mutable_mvn_param()->::caffe::MVNParameter::MergeFrom(from.mvn_param());
    }
    if (from.has_pooling_param()) {
      mutable_pooling_param()->::caffe::PoolingParameter::MergeFrom(from.pooling_param());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_power_param()) {
      mutable_power_param()->::caffe::PowerParameter::MergeFrom(from.power_param());
    }
    if (from.has_relu_param()) {
      mutable_relu_param()->::caffe::ReLUParameter::MergeFrom(from.relu_param());
    }
    if (from.has_sigmoid_param()) {
      mutable_sigmoid_param()->::caffe::SigmoidParameter::MergeFrom(from.sigmoid_param());
    }
    if (from.has_softmax_param()) {
      mutable_softmax_param()->::caffe::SoftmaxParameter::MergeFrom(from.softmax_param());
    }
    if (from.has_slice_param()) {
      mutable_slice_param()->::caffe::SliceParameter::MergeFrom(from.slice_param());
    }
    if (from.has_tanh_param()) {
      mutable_tanh_param()->::caffe::TanHParameter::MergeFrom(from.tanh_param());
    }
    if (from.has_threshold_param()) {
      mutable_threshold_param()->::caffe::ThresholdParameter::MergeFrom(from.threshold_param());
    }
    if (from.has_window_data_param()) {
      mutable_window_data_param()->::caffe::WindowDataParameter::MergeFrom(from.window_data_param());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_transform_param()) {
      mutable_transform_param()->::caffe::TransformationParameter::MergeFrom(from.transform_param());
    }
    if (from.has_loss_param()) {
      mutable_loss_param()->::caffe::LossParameter::MergeFrom(from.loss_param());
    }
    if (from.has_layer()) {
      mutable_layer()->::caffe::V0LayerParameter::MergeFrom(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void V1LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V1LayerParameter::CopyFrom(const V1LayerParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V1LayerParameter::IsInitialized() const {

  return true;
}

void V1LayerParameter::Swap(V1LayerParameter* other) {
  if (other != this) {
    bottom_.Swap(&other->bottom_);
    top_.Swap(&other->top_);
    std::swap(name_, other->name_);
    include_.Swap(&other->include_);
    exclude_.Swap(&other->exclude_);
    std::swap(type_, other->type_);
    blobs_.Swap(&other->blobs_);
    param_.Swap(&other->param_);
    blob_share_mode_.Swap(&other->blob_share_mode_);
    blobs_lr_.Swap(&other->blobs_lr_);
    weight_decay_.Swap(&other->weight_decay_);
    loss_weight_.Swap(&other->loss_weight_);
    std::swap(accuracy_param_, other->accuracy_param_);
    std::swap(argmax_param_, other->argmax_param_);
    std::swap(concat_param_, other->concat_param_);
    std::swap(contrastive_loss_param_, other->contrastive_loss_param_);
    std::swap(convolution_param_, other->convolution_param_);
    std::swap(data_param_, other->data_param_);
    std::swap(dropout_param_, other->dropout_param_);
    std::swap(dummy_data_param_, other->dummy_data_param_);
    std::swap(eltwise_param_, other->eltwise_param_);
    std::swap(exp_param_, other->exp_param_);
    std::swap(hdf5_data_param_, other->hdf5_data_param_);
    std::swap(hdf5_output_param_, other->hdf5_output_param_);
    std::swap(hinge_loss_param_, other->hinge_loss_param_);
    std::swap(image_data_param_, other->image_data_param_);
    std::swap(infogain_loss_param_, other->infogain_loss_param_);
    std::swap(inner_product_param_, other->inner_product_param_);
    std::swap(lrn_param_, other->lrn_param_);
    std::swap(memory_data_param_, other->memory_data_param_);
    std::swap(mvn_param_, other->mvn_param_);
    std::swap(pooling_param_, other->pooling_param_);
    std::swap(power_param_, other->power_param_);
    std::swap(relu_param_, other->relu_param_);
    std::swap(sigmoid_param_, other->sigmoid_param_);
    std::swap(softmax_param_, other->softmax_param_);
    std::swap(slice_param_, other->slice_param_);
    std::swap(tanh_param_, other->tanh_param_);
    std::swap(threshold_param_, other->threshold_param_);
    std::swap(window_data_param_, other->window_data_param_);
    std::swap(transform_param_, other->transform_param_);
    std::swap(loss_param_, other->loss_param_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata V1LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = V1LayerParameter_descriptor_;
  metadata.reflection = V1LayerParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V0LayerParameter_PoolMethod_descriptor_;
}
bool V0LayerParameter_PoolMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const V0LayerParameter_PoolMethod V0LayerParameter::MAX;
const V0LayerParameter_PoolMethod V0LayerParameter::AVE;
const V0LayerParameter_PoolMethod V0LayerParameter::STOCHASTIC;
const V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MIN;
const V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MAX;
const int V0LayerParameter::PoolMethod_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* V0LayerParameter::_default_det_crop_mode_ = NULL;
#ifndef _MSC_VER
const int V0LayerParameter::kNameFieldNumber;
const int V0LayerParameter::kTypeFieldNumber;
const int V0LayerParameter::kNumOutputFieldNumber;
const int V0LayerParameter::kBiastermFieldNumber;
const int V0LayerParameter::kWeightFillerFieldNumber;
const int V0LayerParameter::kBiasFillerFieldNumber;
const int V0LayerParameter::kPadFieldNumber;
const int V0LayerParameter::kKernelsizeFieldNumber;
const int V0LayerParameter::kGroupFieldNumber;
const int V0LayerParameter::kStrideFieldNumber;
const int V0LayerParameter::kPoolFieldNumber;
const int V0LayerParameter::kDropoutRatioFieldNumber;
const int V0LayerParameter::kLocalSizeFieldNumber;
const int V0LayerParameter::kAlphaFieldNumber;
const int V0LayerParameter::kBetaFieldNumber;
const int V0LayerParameter::kKFieldNumber;
const int V0LayerParameter::kSourceFieldNumber;
const int V0LayerParameter::kScaleFieldNumber;
const int V0LayerParameter::kMeanfileFieldNumber;
const int V0LayerParameter::kBatchsizeFieldNumber;
const int V0LayerParameter::kCropsizeFieldNumber;
const int V0LayerParameter::kMirrorFieldNumber;
const int V0LayerParameter::kBlobsFieldNumber;
const int V0LayerParameter::kBlobsLrFieldNumber;
const int V0LayerParameter::kWeightDecayFieldNumber;
const int V0LayerParameter::kRandSkipFieldNumber;
const int V0LayerParameter::kDetFgThresholdFieldNumber;
const int V0LayerParameter::kDetBgThresholdFieldNumber;
const int V0LayerParameter::kDetFgFractionFieldNumber;
const int V0LayerParameter::kDetContextPadFieldNumber;
const int V0LayerParameter::kDetCropModeFieldNumber;
const int V0LayerParameter::kNewNumFieldNumber;
const int V0LayerParameter::kNewChannelsFieldNumber;
const int V0LayerParameter::kNewHeightFieldNumber;
const int V0LayerParameter::kNewWidthFieldNumber;
const int V0LayerParameter::kShuffleImagesFieldNumber;
const int V0LayerParameter::kConcatDimFieldNumber;
const int V0LayerParameter::kHdf5OutputParamFieldNumber;
#endif  // !_MSC_VER

V0LayerParameter::V0LayerParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.V0LayerParameter)
}

void V0LayerParameter::InitAsDefaultInstance() {
  weight_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  bias_filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
  hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(&::caffe::HDF5OutputParameter::default_instance());
}

V0LayerParameter::V0LayerParameter(const V0LayerParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.V0LayerParameter)
}

void V0LayerParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_output_ = 0u;
  biasterm_ = true;
  weight_filler_ = NULL;
  bias_filler_ = NULL;
  pad_ = 0u;
  kernelsize_ = 0u;
  group_ = 1u;
  stride_ = 1u;
  pool_ = 0;
  dropout_ratio_ = 0.5f;
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  k_ = 1;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = 1;
  meanfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batchsize_ = 0u;
  cropsize_ = 0u;
  mirror_ = false;
  rand_skip_ = 0u;
  det_fg_threshold_ = 0.5f;
  det_bg_threshold_ = 0.5f;
  det_fg_fraction_ = 0.25f;
  det_context_pad_ = 0u;
  det_crop_mode_ = const_cast< ::std::string*>(_default_det_crop_mode_);
  new_num_ = 0;
  new_channels_ = 0;
  new_height_ = 0;
  new_width_ = 0;
  shuffle_images_ = false;
  concat_dim_ = 1u;
  hdf5_output_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

V0LayerParameter::~V0LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.V0LayerParameter)
  SharedDtor();
}

void V0LayerParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (meanfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete meanfile_;
  }
  if (det_crop_mode_ != _default_det_crop_mode_) {
    delete det_crop_mode_;
  }
  if (this != default_instance_) {
    delete weight_filler_;
    delete bias_filler_;
    delete hdf5_output_param_;
  }
}

void V0LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* V0LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V0LayerParameter_descriptor_;
}

const V0LayerParameter& V0LayerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

V0LayerParameter* V0LayerParameter::default_instance_ = NULL;

V0LayerParameter* V0LayerParameter::New() const {
  return new V0LayerParameter;
}

void V0LayerParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<V0LayerParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(num_output_, pad_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    biasterm_ = true;
    if (has_weight_filler()) {
      if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (has_bias_filler()) {
      if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
    }
    kernelsize_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280) {
    group_ = 1u;
    stride_ = 1u;
    pool_ = 0;
    dropout_ratio_ = 0.5f;
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    k_ = 1;
  }
  if (_has_bits_[16 / 32] & 4128768) {
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    scale_ = 1;
    if (has_meanfile()) {
      if (meanfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        meanfile_->clear();
      }
    }
    batchsize_ = 0u;
    cropsize_ = 0u;
    mirror_ = false;
  }
  if (_has_bits_[24 / 32] & 4261412864) {
    rand_skip_ = 0u;
    det_fg_threshold_ = 0.5f;
    det_bg_threshold_ = 0.5f;
    det_fg_fraction_ = 0.25f;
    det_context_pad_ = 0u;
    if (has_det_crop_mode()) {
      if (det_crop_mode_ != _default_det_crop_mode_) {
        det_crop_mode_->assign(*_default_det_crop_mode_);
      }
    }
    new_num_ = 0;
  }
  if (_has_bits_[32 / 32] & 63) {
    ZR_(new_channels_, new_width_);
    shuffle_images_ = false;
    concat_dim_ = 1u;
    if (has_hdf5_output_param()) {
      if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  blobs_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool V0LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.V0LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_output;
        break;
      }

      // optional uint32 num_output = 3;
      case 3: {
        if (tag == 24) {
         parse_num_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_biasterm;
        break;
      }

      // optional bool biasterm = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_biasterm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biasterm_)));
          set_has_biasterm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_weight_filler;
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 5;
      case 5: {
        if (tag == 42) {
         parse_weight_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bias_filler;
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 6;
      case 6: {
        if (tag == 50) {
         parse_bias_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pad;
        break;
      }

      // optional uint32 pad = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_kernelsize;
        break;
      }

      // optional uint32 kernelsize = 8;
      case 8: {
        if (tag == 64) {
         parse_kernelsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernelsize_)));
          set_has_kernelsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_group;
        break;
      }

      // optional uint32 group = 9 [default = 1];
      case 9: {
        if (tag == 72) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_stride;
        break;
      }

      // optional uint32 stride = 10 [default = 1];
      case 10: {
        if (tag == 80) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_pool;
        break;
      }

      // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
      case 11: {
        if (tag == 88) {
         parse_pool:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V0LayerParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::V0LayerParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_dropout_ratio;
        break;
      }

      // optional float dropout_ratio = 12 [default = 0.5];
      case 12: {
        if (tag == 101) {
         parse_dropout_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
          set_has_dropout_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_local_size;
        break;
      }

      // optional uint32 local_size = 13 [default = 5];
      case 13: {
        if (tag == 104) {
         parse_local_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
          set_has_local_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_alpha;
        break;
      }

      // optional float alpha = 14 [default = 1];
      case 14: {
        if (tag == 117) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_beta;
        break;
      }

      // optional float beta = 15 [default = 0.75];
      case 15: {
        if (tag == 125) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_source;
        break;
      }

      // optional string source = 16;
      case 16: {
        if (tag == 130) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_scale;
        break;
      }

      // optional float scale = 17 [default = 1];
      case 17: {
        if (tag == 141) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_meanfile;
        break;
      }

      // optional string meanfile = 18;
      case 18: {
        if (tag == 146) {
         parse_meanfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meanfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meanfile().data(), this->meanfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "meanfile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_batchsize;
        break;
      }

      // optional uint32 batchsize = 19;
      case 19: {
        if (tag == 152) {
         parse_batchsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batchsize_)));
          set_has_batchsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_cropsize;
        break;
      }

      // optional uint32 cropsize = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_cropsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cropsize_)));
          set_has_cropsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 21 [default = false];
      case 21: {
        if (tag == 168) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_k;
        break;
      }

      // optional float k = 22 [default = 1];
      case 22: {
        if (tag == 181) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_blobs;
        break;
      }

      // repeated .caffe.BlobProto blobs = 50;
      case 50: {
        if (tag == 402) {
         parse_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_blobs;
        if (input->ExpectTag(413)) goto parse_blobs_lr;
        break;
      }

      // repeated float blobs_lr = 51;
      case 51: {
        if (tag == 413) {
         parse_blobs_lr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 413, input, this->mutable_blobs_lr())));
        } else if (tag == 410) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_blobs_lr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(413)) goto parse_blobs_lr;
        if (input->ExpectTag(421)) goto parse_weight_decay;
        break;
      }

      // repeated float weight_decay = 52;
      case 52: {
        if (tag == 421) {
         parse_weight_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 421, input, this->mutable_weight_decay())));
        } else if (tag == 418) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight_decay())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(421)) goto parse_weight_decay;
        if (input->ExpectTag(424)) goto parse_rand_skip;
        break;
      }

      // optional uint32 rand_skip = 53 [default = 0];
      case 53: {
        if (tag == 424) {
         parse_rand_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
          set_has_rand_skip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(437)) goto parse_det_fg_threshold;
        break;
      }

      // optional float det_fg_threshold = 54 [default = 0.5];
      case 54: {
        if (tag == 437) {
         parse_det_fg_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_fg_threshold_)));
          set_has_det_fg_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(445)) goto parse_det_bg_threshold;
        break;
      }

      // optional float det_bg_threshold = 55 [default = 0.5];
      case 55: {
        if (tag == 445) {
         parse_det_bg_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_bg_threshold_)));
          set_has_det_bg_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(453)) goto parse_det_fg_fraction;
        break;
      }

      // optional float det_fg_fraction = 56 [default = 0.25];
      case 56: {
        if (tag == 453) {
         parse_det_fg_fraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_fg_fraction_)));
          set_has_det_fg_fraction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_det_context_pad;
        break;
      }

      // optional uint32 det_context_pad = 58 [default = 0];
      case 58: {
        if (tag == 464) {
         parse_det_context_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &det_context_pad_)));
          set_has_det_context_pad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_det_crop_mode;
        break;
      }

      // optional string det_crop_mode = 59 [default = "warp"];
      case 59: {
        if (tag == 474) {
         parse_det_crop_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det_crop_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det_crop_mode().data(), this->det_crop_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det_crop_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_new_num;
        break;
      }

      // optional int32 new_num = 60 [default = 0];
      case 60: {
        if (tag == 480) {
         parse_new_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_num_)));
          set_has_new_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_new_channels;
        break;
      }

      // optional int32 new_channels = 61 [default = 0];
      case 61: {
        if (tag == 488) {
         parse_new_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_channels_)));
          set_has_new_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_new_height;
        break;
      }

      // optional int32 new_height = 62 [default = 0];
      case 62: {
        if (tag == 496) {
         parse_new_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_height_)));
          set_has_new_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_new_width;
        break;
      }

      // optional int32 new_width = 63 [default = 0];
      case 63: {
        if (tag == 504) {
         parse_new_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_width_)));
          set_has_new_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_shuffle_images;
        break;
      }

      // optional bool shuffle_images = 64 [default = false];
      case 64: {
        if (tag == 512) {
         parse_shuffle_images:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_images_)));
          set_has_shuffle_images();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_concat_dim;
        break;
      }

      // optional uint32 concat_dim = 65 [default = 1];
      case 65: {
        if (tag == 520) {
         parse_concat_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &concat_dim_)));
          set_has_concat_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_hdf5_output_param;
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_hdf5_output_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.V0LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.V0LayerParameter)
  return false;
#undef DO_
}

void V0LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.V0LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional uint32 num_output = 3;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_output(), output);
  }

  // optional bool biasterm = 4 [default = true];
  if (has_biasterm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->biasterm(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 5;
  if (has_weight_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->weight_filler(), output);
  }

  // optional .caffe.FillerParameter bias_filler = 6;
  if (has_bias_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bias_filler(), output);
  }

  // optional uint32 pad = 7 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pad(), output);
  }

  // optional uint32 kernelsize = 8;
  if (has_kernelsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kernelsize(), output);
  }

  // optional uint32 group = 9 [default = 1];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->group(), output);
  }

  // optional uint32 stride = 10 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->stride(), output);
  }

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->pool(), output);
  }

  // optional float dropout_ratio = 12 [default = 0.5];
  if (has_dropout_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->dropout_ratio(), output);
  }

  // optional uint32 local_size = 13 [default = 5];
  if (has_local_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->local_size(), output);
  }

  // optional float alpha = 14 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->alpha(), output);
  }

  // optional float beta = 15 [default = 0.75];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->beta(), output);
  }

  // optional string source = 16;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->source(), output);
  }

  // optional float scale = 17 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->scale(), output);
  }

  // optional string meanfile = 18;
  if (has_meanfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meanfile().data(), this->meanfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "meanfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->meanfile(), output);
  }

  // optional uint32 batchsize = 19;
  if (has_batchsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->batchsize(), output);
  }

  // optional uint32 cropsize = 20 [default = 0];
  if (has_cropsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->cropsize(), output);
  }

  // optional bool mirror = 21 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->mirror(), output);
  }

  // optional float k = 22 [default = 1];
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->k(), output);
  }

  // repeated .caffe.BlobProto blobs = 50;
  for (int i = 0; i < this->blobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->blobs(i), output);
  }

  // repeated float blobs_lr = 51;
  for (int i = 0; i < this->blobs_lr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      51, this->blobs_lr(i), output);
  }

  // repeated float weight_decay = 52;
  for (int i = 0; i < this->weight_decay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      52, this->weight_decay(i), output);
  }

  // optional uint32 rand_skip = 53 [default = 0];
  if (has_rand_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->rand_skip(), output);
  }

  // optional float det_fg_threshold = 54 [default = 0.5];
  if (has_det_fg_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->det_fg_threshold(), output);
  }

  // optional float det_bg_threshold = 55 [default = 0.5];
  if (has_det_bg_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->det_bg_threshold(), output);
  }

  // optional float det_fg_fraction = 56 [default = 0.25];
  if (has_det_fg_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(56, this->det_fg_fraction(), output);
  }

  // optional uint32 det_context_pad = 58 [default = 0];
  if (has_det_context_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->det_context_pad(), output);
  }

  // optional string det_crop_mode = 59 [default = "warp"];
  if (has_det_crop_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det_crop_mode().data(), this->det_crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det_crop_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      59, this->det_crop_mode(), output);
  }

  // optional int32 new_num = 60 [default = 0];
  if (has_new_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->new_num(), output);
  }

  // optional int32 new_channels = 61 [default = 0];
  if (has_new_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->new_channels(), output);
  }

  // optional int32 new_height = 62 [default = 0];
  if (has_new_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->new_height(), output);
  }

  // optional int32 new_width = 63 [default = 0];
  if (has_new_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->new_width(), output);
  }

  // optional bool shuffle_images = 64 [default = false];
  if (has_shuffle_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->shuffle_images(), output);
  }

  // optional uint32 concat_dim = 65 [default = 1];
  if (has_concat_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->concat_dim(), output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  if (has_hdf5_output_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->hdf5_output_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.V0LayerParameter)
}

::google::protobuf::uint8* V0LayerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.V0LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional uint32 num_output = 3;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_output(), target);
  }

  // optional bool biasterm = 4 [default = true];
  if (has_biasterm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->biasterm(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 5;
  if (has_weight_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->weight_filler(), target);
  }

  // optional .caffe.FillerParameter bias_filler = 6;
  if (has_bias_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bias_filler(), target);
  }

  // optional uint32 pad = 7 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pad(), target);
  }

  // optional uint32 kernelsize = 8;
  if (has_kernelsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->kernelsize(), target);
  }

  // optional uint32 group = 9 [default = 1];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->group(), target);
  }

  // optional uint32 stride = 10 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->stride(), target);
  }

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->pool(), target);
  }

  // optional float dropout_ratio = 12 [default = 0.5];
  if (has_dropout_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->dropout_ratio(), target);
  }

  // optional uint32 local_size = 13 [default = 5];
  if (has_local_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->local_size(), target);
  }

  // optional float alpha = 14 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->alpha(), target);
  }

  // optional float beta = 15 [default = 0.75];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->beta(), target);
  }

  // optional string source = 16;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->source(), target);
  }

  // optional float scale = 17 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->scale(), target);
  }

  // optional string meanfile = 18;
  if (has_meanfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meanfile().data(), this->meanfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "meanfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->meanfile(), target);
  }

  // optional uint32 batchsize = 19;
  if (has_batchsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->batchsize(), target);
  }

  // optional uint32 cropsize = 20 [default = 0];
  if (has_cropsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->cropsize(), target);
  }

  // optional bool mirror = 21 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->mirror(), target);
  }

  // optional float k = 22 [default = 1];
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->k(), target);
  }

  // repeated .caffe.BlobProto blobs = 50;
  for (int i = 0; i < this->blobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->blobs(i), target);
  }

  // repeated float blobs_lr = 51;
  for (int i = 0; i < this->blobs_lr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(51, this->blobs_lr(i), target);
  }

  // repeated float weight_decay = 52;
  for (int i = 0; i < this->weight_decay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(52, this->weight_decay(i), target);
  }

  // optional uint32 rand_skip = 53 [default = 0];
  if (has_rand_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->rand_skip(), target);
  }

  // optional float det_fg_threshold = 54 [default = 0.5];
  if (has_det_fg_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->det_fg_threshold(), target);
  }

  // optional float det_bg_threshold = 55 [default = 0.5];
  if (has_det_bg_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(55, this->det_bg_threshold(), target);
  }

  // optional float det_fg_fraction = 56 [default = 0.25];
  if (has_det_fg_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(56, this->det_fg_fraction(), target);
  }

  // optional uint32 det_context_pad = 58 [default = 0];
  if (has_det_context_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->det_context_pad(), target);
  }

  // optional string det_crop_mode = 59 [default = "warp"];
  if (has_det_crop_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det_crop_mode().data(), this->det_crop_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det_crop_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        59, this->det_crop_mode(), target);
  }

  // optional int32 new_num = 60 [default = 0];
  if (has_new_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->new_num(), target);
  }

  // optional int32 new_channels = 61 [default = 0];
  if (has_new_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->new_channels(), target);
  }

  // optional int32 new_height = 62 [default = 0];
  if (has_new_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->new_height(), target);
  }

  // optional int32 new_width = 63 [default = 0];
  if (has_new_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->new_width(), target);
  }

  // optional bool shuffle_images = 64 [default = false];
  if (has_shuffle_images()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->shuffle_images(), target);
  }

  // optional uint32 concat_dim = 65 [default = 1];
  if (has_concat_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->concat_dim(), target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  if (has_hdf5_output_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1001, this->hdf5_output_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.V0LayerParameter)
  return target;
}

int V0LayerParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional uint32 num_output = 3;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool biasterm = 4 [default = true];
    if (has_biasterm()) {
      total_size += 1 + 1;
    }

    // optional .caffe.FillerParameter weight_filler = 5;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_filler());
    }

    // optional .caffe.FillerParameter bias_filler = 6;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_filler());
    }

    // optional uint32 pad = 7 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 kernelsize = 8;
    if (has_kernelsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernelsize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 group = 9 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional uint32 stride = 10 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

    // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional float dropout_ratio = 12 [default = 0.5];
    if (has_dropout_ratio()) {
      total_size += 1 + 4;
    }

    // optional uint32 local_size = 13 [default = 5];
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }

    // optional float alpha = 14 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 15 [default = 0.75];
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional float k = 22 [default = 1];
    if (has_k()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string source = 16;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional float scale = 17 [default = 1];
    if (has_scale()) {
      total_size += 2 + 4;
    }

    // optional string meanfile = 18;
    if (has_meanfile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meanfile());
    }

    // optional uint32 batchsize = 19;
    if (has_batchsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batchsize());
    }

    // optional uint32 cropsize = 20 [default = 0];
    if (has_cropsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cropsize());
    }

    // optional bool mirror = 21 [default = false];
    if (has_mirror()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional uint32 rand_skip = 53 [default = 0];
    if (has_rand_skip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional float det_fg_threshold = 54 [default = 0.5];
    if (has_det_fg_threshold()) {
      total_size += 2 + 4;
    }

    // optional float det_bg_threshold = 55 [default = 0.5];
    if (has_det_bg_threshold()) {
      total_size += 2 + 4;
    }

    // optional float det_fg_fraction = 56 [default = 0.25];
    if (has_det_fg_fraction()) {
      total_size += 2 + 4;
    }

    // optional uint32 det_context_pad = 58 [default = 0];
    if (has_det_context_pad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->det_context_pad());
    }

    // optional string det_crop_mode = 59 [default = "warp"];
    if (has_det_crop_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det_crop_mode());
    }

    // optional int32 new_num = 60 [default = 0];
    if (has_new_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_num());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 new_channels = 61 [default = 0];
    if (has_new_channels()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_channels());
    }

    // optional int32 new_height = 62 [default = 0];
    if (has_new_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_height());
    }

    // optional int32 new_width = 63 [default = 0];
    if (has_new_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_width());
    }

    // optional bool shuffle_images = 64 [default = false];
    if (has_shuffle_images()) {
      total_size += 2 + 1;
    }

    // optional uint32 concat_dim = 65 [default = 1];
    if (has_concat_dim()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->concat_dim());
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
    if (has_hdf5_output_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hdf5_output_param());
    }

  }
  // repeated .caffe.BlobProto blobs = 50;
  total_size += 2 * this->blobs_size();
  for (int i = 0; i < this->blobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blobs(i));
  }

  // repeated float blobs_lr = 51;
  {
    int data_size = 0;
    data_size = 4 * this->blobs_lr_size();
    total_size += 2 * this->blobs_lr_size() + data_size;
  }

  // repeated float weight_decay = 52;
  {
    int data_size = 0;
    data_size = 4 * this->weight_decay_size();
    total_size += 2 * this->weight_decay_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void V0LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const V0LayerParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const V0LayerParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void V0LayerParameter::MergeFrom(const V0LayerParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  blobs_.MergeFrom(from.blobs_);
  blobs_lr_.MergeFrom(from.blobs_lr_);
  weight_decay_.MergeFrom(from.weight_decay_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_biasterm()) {
      set_biasterm(from.biasterm());
    }
    if (from.has_weight_filler()) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (from.has_bias_filler()) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_kernelsize()) {
      set_kernelsize(from.kernelsize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_dropout_ratio()) {
      set_dropout_ratio(from.dropout_ratio());
    }
    if (from.has_local_size()) {
      set_local_size(from.local_size());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_meanfile()) {
      set_meanfile(from.meanfile());
    }
    if (from.has_batchsize()) {
      set_batchsize(from.batchsize());
    }
    if (from.has_cropsize()) {
      set_cropsize(from.cropsize());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_rand_skip()) {
      set_rand_skip(from.rand_skip());
    }
    if (from.has_det_fg_threshold()) {
      set_det_fg_threshold(from.det_fg_threshold());
    }
    if (from.has_det_bg_threshold()) {
      set_det_bg_threshold(from.det_bg_threshold());
    }
    if (from.has_det_fg_fraction()) {
      set_det_fg_fraction(from.det_fg_fraction());
    }
    if (from.has_det_context_pad()) {
      set_det_context_pad(from.det_context_pad());
    }
    if (from.has_det_crop_mode()) {
      set_det_crop_mode(from.det_crop_mode());
    }
    if (from.has_new_num()) {
      set_new_num(from.new_num());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_new_channels()) {
      set_new_channels(from.new_channels());
    }
    if (from.has_new_height()) {
      set_new_height(from.new_height());
    }
    if (from.has_new_width()) {
      set_new_width(from.new_width());
    }
    if (from.has_shuffle_images()) {
      set_shuffle_images(from.shuffle_images());
    }
    if (from.has_concat_dim()) {
      set_concat_dim(from.concat_dim());
    }
    if (from.has_hdf5_output_param()) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void V0LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V0LayerParameter::CopyFrom(const V0LayerParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V0LayerParameter::IsInitialized() const {

  return true;
}

void V0LayerParameter::Swap(V0LayerParameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(num_output_, other->num_output_);
    std::swap(biasterm_, other->biasterm_);
    std::swap(weight_filler_, other->weight_filler_);
    std::swap(bias_filler_, other->bias_filler_);
    std::swap(pad_, other->pad_);
    std::swap(kernelsize_, other->kernelsize_);
    std::swap(group_, other->group_);
    std::swap(stride_, other->stride_);
    std::swap(pool_, other->pool_);
    std::swap(dropout_ratio_, other->dropout_ratio_);
    std::swap(local_size_, other->local_size_);
    std::swap(alpha_, other->alpha_);
    std::swap(beta_, other->beta_);
    std::swap(k_, other->k_);
    std::swap(source_, other->source_);
    std::swap(scale_, other->scale_);
    std::swap(meanfile_, other->meanfile_);
    std::swap(batchsize_, other->batchsize_);
    std::swap(cropsize_, other->cropsize_);
    std::swap(mirror_, other->mirror_);
    blobs_.Swap(&other->blobs_);
    blobs_lr_.Swap(&other->blobs_lr_);
    weight_decay_.Swap(&other->weight_decay_);
    std::swap(rand_skip_, other->rand_skip_);
    std::swap(det_fg_threshold_, other->det_fg_threshold_);
    std::swap(det_bg_threshold_, other->det_bg_threshold_);
    std::swap(det_fg_fraction_, other->det_fg_fraction_);
    std::swap(det_context_pad_, other->det_context_pad_);
    std::swap(det_crop_mode_, other->det_crop_mode_);
    std::swap(new_num_, other->new_num_);
    std::swap(new_channels_, other->new_channels_);
    std::swap(new_height_, other->new_height_);
    std::swap(new_width_, other->new_width_);
    std::swap(shuffle_images_, other->shuffle_images_);
    std::swap(concat_dim_, other->concat_dim_);
    std::swap(hdf5_output_param_, other->hdf5_output_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata V0LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = V0LayerParameter_descriptor_;
  metadata.reflection = V0LayerParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PReLUParameter::kFillerFieldNumber;
const int PReLUParameter::kChannelSharedFieldNumber;
#endif  // !_MSC_VER

PReLUParameter::PReLUParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PReLUParameter)
}

void PReLUParameter::InitAsDefaultInstance() {
  filler_ = const_cast< ::caffe::FillerParameter*>(&::caffe::FillerParameter::default_instance());
}

PReLUParameter::PReLUParameter(const PReLUParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe.PReLUParameter)
}

void PReLUParameter::SharedCtor() {
  _cached_size_ = 0;
  filler_ = NULL;
  channel_shared_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PReLUParameter::~PReLUParameter() {
  // @@protoc_insertion_point(destructor:caffe.PReLUParameter)
  SharedDtor();
}

void PReLUParameter::SharedDtor() {
  if (this != default_instance_) {
    delete filler_;
  }
}

void PReLUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PReLUParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PReLUParameter_descriptor_;
}

const PReLUParameter& PReLUParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe_2eproto();
  return *default_instance_;
}

PReLUParameter* PReLUParameter::default_instance_ = NULL;

PReLUParameter* PReLUParameter::New() const {
  return new PReLUParameter;
}

void PReLUParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_filler()) {
      if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
    }
    channel_shared_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PReLUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PReLUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.FillerParameter filler = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_shared;
        break;
      }

      // optional bool channel_shared = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_channel_shared:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_shared_)));
          set_has_channel_shared();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PReLUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PReLUParameter)
  return false;
#undef DO_
}

void PReLUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PReLUParameter)
  // optional .caffe.FillerParameter filler = 1;
  if (has_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filler(), output);
  }

  // optional bool channel_shared = 2 [default = false];
  if (has_channel_shared()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->channel_shared(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PReLUParameter)
}

::google::protobuf::uint8* PReLUParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PReLUParameter)
  // optional .caffe.FillerParameter filler = 1;
  if (has_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->filler(), target);
  }

  // optional bool channel_shared = 2 [default = false];
  if (has_channel_shared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->channel_shared(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PReLUParameter)
  return target;
}

int PReLUParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe.FillerParameter filler = 1;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filler());
    }

    // optional bool channel_shared = 2 [default = false];
    if (has_channel_shared()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PReLUParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PReLUParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PReLUParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PReLUParameter::MergeFrom(const PReLUParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filler()) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
    if (from.has_channel_shared()) {
      set_channel_shared(from.channel_shared());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PReLUParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PReLUParameter::CopyFrom(const PReLUParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PReLUParameter::IsInitialized() const {

  return true;
}

void PReLUParameter::Swap(PReLUParameter* other) {
  if (other != this) {
    std::swap(filler_, other->filler_);
    std::swap(channel_shared_, other->channel_shared_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PReLUParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PReLUParameter_descriptor_;
  metadata.reflection = PReLUParameter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

// @@protoc_insertion_point(global_scope)
